PragmaDirective
   Source: "pragma solidity >= 0.4.22 <0.9.0;"
ContractDefinition "console"
   Source: "library console {\n\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\n\n\tfunction _sendLogPayload(bytes memory payload) private view {\n\t\tuint256 payloadLength = payload.length;\n\t\taddress consoleAddress = CONSOLE_ADDRESS;\n\t\tassembly {\n\t\t\tlet payloadStart := add(payload, 32)\n\t\t\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\n\t\t}\n\t}\n\n\tfunction log() internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log()\"));\n\t}\n\n\tfunction logInt(int256 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(int256)\", p0));\n\t}\n\n\tfunction logUint(uint256 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256)\", p0));\n\t}\n\n\tfunction logString(string memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n\t}\n\n\tfunction logBool(bool p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n\t}\n\n\tfunction logAddress(address p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n\t}\n\n\tfunction logBytes(bytes memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes)\", p0));\n\t}\n\n\tfunction logBytes1(bytes1 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes1)\", p0));\n\t}\n\n\tfunction logBytes2(bytes2 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes2)\", p0));\n\t}\n\n\tfunction logBytes3(bytes3 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes3)\", p0));\n\t}\n\n\tfunction logBytes4(bytes4 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes4)\", p0));\n\t}\n\n\tfunction logBytes5(bytes5 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes5)\", p0));\n\t}\n\n\tfunction logBytes6(bytes6 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes6)\", p0));\n\t}\n\n\tfunction logBytes7(bytes7 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes7)\", p0));\n\t}\n\n\tfunction logBytes8(bytes8 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes8)\", p0));\n\t}\n\n\tfunction logBytes9(bytes9 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes9)\", p0));\n\t}\n\n\tfunction logBytes10(bytes10 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes10)\", p0));\n\t}\n\n\tfunction logBytes11(bytes11 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes11)\", p0));\n\t}\n\n\tfunction logBytes12(bytes12 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes12)\", p0));\n\t}\n\n\tfunction logBytes13(bytes13 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes13)\", p0));\n\t}\n\n\tfunction logBytes14(bytes14 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes14)\", p0));\n\t}\n\n\tfunction logBytes15(bytes15 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes15)\", p0));\n\t}\n\n\tfunction logBytes16(bytes16 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes16)\", p0));\n\t}\n\n\tfunction logBytes17(bytes17 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes17)\", p0));\n\t}\n\n\tfunction logBytes18(bytes18 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes18)\", p0));\n\t}\n\n\tfunction logBytes19(bytes19 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes19)\", p0));\n\t}\n\n\tfunction logBytes20(bytes20 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes20)\", p0));\n\t}\n\n\tfunction logBytes21(bytes21 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes21)\", p0));\n\t}\n\n\tfunction logBytes22(bytes22 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes22)\", p0));\n\t}\n\n\tfunction logBytes23(bytes23 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes23)\", p0));\n\t}\n\n\tfunction logBytes24(bytes24 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes24)\", p0));\n\t}\n\n\tfunction logBytes25(bytes25 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes25)\", p0));\n\t}\n\n\tfunction logBytes26(bytes26 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes26)\", p0));\n\t}\n\n\tfunction logBytes27(bytes27 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes27)\", p0));\n\t}\n\n\tfunction logBytes28(bytes28 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes28)\", p0));\n\t}\n\n\tfunction logBytes29(bytes29 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes29)\", p0));\n\t}\n\n\tfunction logBytes30(bytes30 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes30)\", p0));\n\t}\n\n\tfunction logBytes31(bytes31 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes31)\", p0));\n\t}\n\n\tfunction logBytes32(bytes32 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes32)\", p0));\n\t}\n\n\tfunction log(uint256 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256)\", p0));\n\t}\n\n\tfunction log(string memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n\t}\n\n\tfunction log(bool p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n\t}\n\n\tfunction log(address p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256)\", p0, p1));\n\t}\n\n\tfunction log(uint256 p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string)\", p0, p1));\n\t}\n\n\tfunction log(uint256 p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool)\", p0, p1));\n\t}\n\n\tfunction log(uint256 p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, uint256 p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, uint256 p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address)\", p0, p1));\n\t}\n\n\tfunction log(address p0, uint256 p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256)\", p0, p1));\n\t}\n\n\tfunction log(address p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string)\", p0, p1));\n\t}\n\n\tfunction log(address p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool)\", p0, p1));\n\t}\n\n\tfunction log(address p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address)\", p0, p1));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, bool p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, address p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint256 p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint256 p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint256 p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint256 p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint256 p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint256 p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint256 p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint256 p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n}"
  VariableDeclaration "CONSOLE_ADDRESS"
     Type: address
     Source: "address constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67)"
    ElementaryTypeName address
       Source: "address"
    FunctionCall
       Type: address
       Source: "address(0x000000000000000000636F6e736F6c652e6c6f67)"
      ElementaryTypeNameExpression address
         Type: type(address)
         Source: "address"
      Literal, token: [no token] value: 0x000000000000000000636F6e736F6c652e6c6f67
         Type: address
         Source: "0x000000000000000000636F6e736F6c652e6c6f67"
  FunctionDefinition "_sendLogPayload" - const
     Source: "function _sendLogPayload(bytes memory payload) private view {\n\t\tuint256 payloadLength = payload.length;\n\t\taddress consoleAddress = CONSOLE_ADDRESS;\n\t\tassembly {\n\t\t\tlet payloadStart := add(payload, 32)\n\t\t\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\n\t\t}\n\t}"
    ParameterList
       Source: "(bytes memory payload)"
      VariableDeclaration "payload"
         Type: bytes memory
         Source: "bytes memory payload"
        ElementaryTypeName bytes
           Source: "bytes"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\tuint256 payloadLength = payload.length;\n\t\taddress consoleAddress = CONSOLE_ADDRESS;\n\t\tassembly {\n\t\t\tlet payloadStart := add(payload, 32)\n\t\t\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\n\t\t}\n\t}"
      VariableDeclarationStatement
         Source: "uint256 payloadLength = payload.length"
        VariableDeclaration "payloadLength"
           Type: uint256
           Source: "uint256 payloadLength"
          ElementaryTypeName uint256
             Source: "uint256"
        MemberAccess to member length
           Type: uint256
           Source: "payload.length"
          Identifier payload
             Type: bytes memory
             Source: "payload"
      VariableDeclarationStatement
         Source: "address consoleAddress = CONSOLE_ADDRESS"
        VariableDeclaration "consoleAddress"
           Type: address
           Source: "address consoleAddress"
          ElementaryTypeName address
             Source: "address"
        Identifier CONSOLE_ADDRESS
           Type: address
           Source: "CONSOLE_ADDRESS"
      InlineAssembly
         Source: "assembly {\n\t\t\tlet payloadStart := add(payload, 32)\n\t\t\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\n\t\t}\n\t}"
  FunctionDefinition "log" - const
     Source: "function log() internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log()\"));\n\t}"
    ParameterList
       Source: "()"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log()\"));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log()\"))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log()\"))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log()\")"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log()
               Type: literal_string "log()"
               Source: "\"log()\""
  FunctionDefinition "logInt" - const
     Source: "function logInt(int256 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(int256)\", p0));\n\t}"
    ParameterList
       Source: "(int256 p0)"
      VariableDeclaration "p0"
         Type: int256
         Source: "int256 p0"
        ElementaryTypeName int256
           Source: "int256"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(int256)\", p0));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(int256)\", p0))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(int256)\", p0))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(int256)\", p0)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(int256)
               Type: literal_string "log(int256)"
               Source: "\"log(int256)\""
            Identifier p0
               Type: int256
               Source: "p0"
  FunctionDefinition "logUint" - const
     Source: "function logUint(uint256 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256)\", p0));\n\t}"
    ParameterList
       Source: "(uint256 p0)"
      VariableDeclaration "p0"
         Type: uint256
         Source: "uint256 p0"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256)\", p0));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256)\", p0))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256)\", p0))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(uint256)\", p0)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(uint256)
               Type: literal_string "log(uint256)"
               Source: "\"log(uint256)\""
            Identifier p0
               Type: uint256
               Source: "p0"
  FunctionDefinition "logString" - const
     Source: "function logString(string memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n\t}"
    ParameterList
       Source: "(string memory p0)"
      VariableDeclaration "p0"
         Type: string memory
         Source: "string memory p0"
        ElementaryTypeName string
           Source: "string"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(string)\", p0)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(string)
               Type: literal_string "log(string)"
               Source: "\"log(string)\""
            Identifier p0
               Type: string memory
               Source: "p0"
  FunctionDefinition "logBool" - const
     Source: "function logBool(bool p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n\t}"
    ParameterList
       Source: "(bool p0)"
      VariableDeclaration "p0"
         Type: bool
         Source: "bool p0"
        ElementaryTypeName bool
           Source: "bool"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(bool)\", p0)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(bool)
               Type: literal_string "log(bool)"
               Source: "\"log(bool)\""
            Identifier p0
               Type: bool
               Source: "p0"
  FunctionDefinition "logAddress" - const
     Source: "function logAddress(address p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n\t}"
    ParameterList
       Source: "(address p0)"
      VariableDeclaration "p0"
         Type: address
         Source: "address p0"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(address)\", p0)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(address)
               Type: literal_string "log(address)"
               Source: "\"log(address)\""
            Identifier p0
               Type: address
               Source: "p0"
  FunctionDefinition "logBytes" - const
     Source: "function logBytes(bytes memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes)\", p0));\n\t}"
    ParameterList
       Source: "(bytes memory p0)"
      VariableDeclaration "p0"
         Type: bytes memory
         Source: "bytes memory p0"
        ElementaryTypeName bytes
           Source: "bytes"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes)\", p0));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bytes)\", p0))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bytes)\", p0))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(bytes)\", p0)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(bytes)
               Type: literal_string "log(bytes)"
               Source: "\"log(bytes)\""
            Identifier p0
               Type: bytes memory
               Source: "p0"
  FunctionDefinition "logBytes1" - const
     Source: "function logBytes1(bytes1 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes1)\", p0));\n\t}"
    ParameterList
       Source: "(bytes1 p0)"
      VariableDeclaration "p0"
         Type: bytes1
         Source: "bytes1 p0"
        ElementaryTypeName bytes1
           Source: "bytes1"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes1)\", p0));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bytes1)\", p0))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bytes1)\", p0))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(bytes1)\", p0)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(bytes1)
               Type: literal_string "log(bytes1)"
               Source: "\"log(bytes1)\""
            Identifier p0
               Type: bytes1
               Source: "p0"
  FunctionDefinition "logBytes2" - const
     Source: "function logBytes2(bytes2 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes2)\", p0));\n\t}"
    ParameterList
       Source: "(bytes2 p0)"
      VariableDeclaration "p0"
         Type: bytes2
         Source: "bytes2 p0"
        ElementaryTypeName bytes2
           Source: "bytes2"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes2)\", p0));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bytes2)\", p0))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bytes2)\", p0))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(bytes2)\", p0)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(bytes2)
               Type: literal_string "log(bytes2)"
               Source: "\"log(bytes2)\""
            Identifier p0
               Type: bytes2
               Source: "p0"
  FunctionDefinition "logBytes3" - const
     Source: "function logBytes3(bytes3 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes3)\", p0));\n\t}"
    ParameterList
       Source: "(bytes3 p0)"
      VariableDeclaration "p0"
         Type: bytes3
         Source: "bytes3 p0"
        ElementaryTypeName bytes3
           Source: "bytes3"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes3)\", p0));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bytes3)\", p0))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bytes3)\", p0))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(bytes3)\", p0)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(bytes3)
               Type: literal_string "log(bytes3)"
               Source: "\"log(bytes3)\""
            Identifier p0
               Type: bytes3
               Source: "p0"
  FunctionDefinition "logBytes4" - const
     Source: "function logBytes4(bytes4 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes4)\", p0));\n\t}"
    ParameterList
       Source: "(bytes4 p0)"
      VariableDeclaration "p0"
         Type: bytes4
         Source: "bytes4 p0"
        ElementaryTypeName bytes4
           Source: "bytes4"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes4)\", p0));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bytes4)\", p0))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bytes4)\", p0))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(bytes4)\", p0)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(bytes4)
               Type: literal_string "log(bytes4)"
               Source: "\"log(bytes4)\""
            Identifier p0
               Type: bytes4
               Source: "p0"
  FunctionDefinition "logBytes5" - const
     Source: "function logBytes5(bytes5 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes5)\", p0));\n\t}"
    ParameterList
       Source: "(bytes5 p0)"
      VariableDeclaration "p0"
         Type: bytes5
         Source: "bytes5 p0"
        ElementaryTypeName bytes5
           Source: "bytes5"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes5)\", p0));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bytes5)\", p0))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bytes5)\", p0))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(bytes5)\", p0)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(bytes5)
               Type: literal_string "log(bytes5)"
               Source: "\"log(bytes5)\""
            Identifier p0
               Type: bytes5
               Source: "p0"
  FunctionDefinition "logBytes6" - const
     Source: "function logBytes6(bytes6 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes6)\", p0));\n\t}"
    ParameterList
       Source: "(bytes6 p0)"
      VariableDeclaration "p0"
         Type: bytes6
         Source: "bytes6 p0"
        ElementaryTypeName bytes6
           Source: "bytes6"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes6)\", p0));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bytes6)\", p0))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bytes6)\", p0))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(bytes6)\", p0)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(bytes6)
               Type: literal_string "log(bytes6)"
               Source: "\"log(bytes6)\""
            Identifier p0
               Type: bytes6
               Source: "p0"
  FunctionDefinition "logBytes7" - const
     Source: "function logBytes7(bytes7 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes7)\", p0));\n\t}"
    ParameterList
       Source: "(bytes7 p0)"
      VariableDeclaration "p0"
         Type: bytes7
         Source: "bytes7 p0"
        ElementaryTypeName bytes7
           Source: "bytes7"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes7)\", p0));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bytes7)\", p0))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bytes7)\", p0))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(bytes7)\", p0)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(bytes7)
               Type: literal_string "log(bytes7)"
               Source: "\"log(bytes7)\""
            Identifier p0
               Type: bytes7
               Source: "p0"
  FunctionDefinition "logBytes8" - const
     Source: "function logBytes8(bytes8 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes8)\", p0));\n\t}"
    ParameterList
       Source: "(bytes8 p0)"
      VariableDeclaration "p0"
         Type: bytes8
         Source: "bytes8 p0"
        ElementaryTypeName bytes8
           Source: "bytes8"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes8)\", p0));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bytes8)\", p0))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bytes8)\", p0))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(bytes8)\", p0)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(bytes8)
               Type: literal_string "log(bytes8)"
               Source: "\"log(bytes8)\""
            Identifier p0
               Type: bytes8
               Source: "p0"
  FunctionDefinition "logBytes9" - const
     Source: "function logBytes9(bytes9 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes9)\", p0));\n\t}"
    ParameterList
       Source: "(bytes9 p0)"
      VariableDeclaration "p0"
         Type: bytes9
         Source: "bytes9 p0"
        ElementaryTypeName bytes9
           Source: "bytes9"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes9)\", p0));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bytes9)\", p0))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bytes9)\", p0))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(bytes9)\", p0)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(bytes9)
               Type: literal_string "log(bytes9)"
               Source: "\"log(bytes9)\""
            Identifier p0
               Type: bytes9
               Source: "p0"
  FunctionDefinition "logBytes10" - const
     Source: "function logBytes10(bytes10 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes10)\", p0));\n\t}"
    ParameterList
       Source: "(bytes10 p0)"
      VariableDeclaration "p0"
         Type: bytes10
         Source: "bytes10 p0"
        ElementaryTypeName bytes10
           Source: "bytes10"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes10)\", p0));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bytes10)\", p0))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bytes10)\", p0))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(bytes10)\", p0)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(bytes10)
               Type: literal_string "log(bytes10)"
               Source: "\"log(bytes10)\""
            Identifier p0
               Type: bytes10
               Source: "p0"
  FunctionDefinition "logBytes11" - const
     Source: "function logBytes11(bytes11 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes11)\", p0));\n\t}"
    ParameterList
       Source: "(bytes11 p0)"
      VariableDeclaration "p0"
         Type: bytes11
         Source: "bytes11 p0"
        ElementaryTypeName bytes11
           Source: "bytes11"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes11)\", p0));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bytes11)\", p0))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bytes11)\", p0))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(bytes11)\", p0)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(bytes11)
               Type: literal_string "log(bytes11)"
               Source: "\"log(bytes11)\""
            Identifier p0
               Type: bytes11
               Source: "p0"
  FunctionDefinition "logBytes12" - const
     Source: "function logBytes12(bytes12 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes12)\", p0));\n\t}"
    ParameterList
       Source: "(bytes12 p0)"
      VariableDeclaration "p0"
         Type: bytes12
         Source: "bytes12 p0"
        ElementaryTypeName bytes12
           Source: "bytes12"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes12)\", p0));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bytes12)\", p0))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bytes12)\", p0))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(bytes12)\", p0)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(bytes12)
               Type: literal_string "log(bytes12)"
               Source: "\"log(bytes12)\""
            Identifier p0
               Type: bytes12
               Source: "p0"
  FunctionDefinition "logBytes13" - const
     Source: "function logBytes13(bytes13 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes13)\", p0));\n\t}"
    ParameterList
       Source: "(bytes13 p0)"
      VariableDeclaration "p0"
         Type: bytes13
         Source: "bytes13 p0"
        ElementaryTypeName bytes13
           Source: "bytes13"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes13)\", p0));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bytes13)\", p0))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bytes13)\", p0))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(bytes13)\", p0)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(bytes13)
               Type: literal_string "log(bytes13)"
               Source: "\"log(bytes13)\""
            Identifier p0
               Type: bytes13
               Source: "p0"
  FunctionDefinition "logBytes14" - const
     Source: "function logBytes14(bytes14 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes14)\", p0));\n\t}"
    ParameterList
       Source: "(bytes14 p0)"
      VariableDeclaration "p0"
         Type: bytes14
         Source: "bytes14 p0"
        ElementaryTypeName bytes14
           Source: "bytes14"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes14)\", p0));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bytes14)\", p0))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bytes14)\", p0))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(bytes14)\", p0)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(bytes14)
               Type: literal_string "log(bytes14)"
               Source: "\"log(bytes14)\""
            Identifier p0
               Type: bytes14
               Source: "p0"
  FunctionDefinition "logBytes15" - const
     Source: "function logBytes15(bytes15 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes15)\", p0));\n\t}"
    ParameterList
       Source: "(bytes15 p0)"
      VariableDeclaration "p0"
         Type: bytes15
         Source: "bytes15 p0"
        ElementaryTypeName bytes15
           Source: "bytes15"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes15)\", p0));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bytes15)\", p0))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bytes15)\", p0))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(bytes15)\", p0)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(bytes15)
               Type: literal_string "log(bytes15)"
               Source: "\"log(bytes15)\""
            Identifier p0
               Type: bytes15
               Source: "p0"
  FunctionDefinition "logBytes16" - const
     Source: "function logBytes16(bytes16 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes16)\", p0));\n\t}"
    ParameterList
       Source: "(bytes16 p0)"
      VariableDeclaration "p0"
         Type: bytes16
         Source: "bytes16 p0"
        ElementaryTypeName bytes16
           Source: "bytes16"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes16)\", p0));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bytes16)\", p0))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bytes16)\", p0))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(bytes16)\", p0)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(bytes16)
               Type: literal_string "log(bytes16)"
               Source: "\"log(bytes16)\""
            Identifier p0
               Type: bytes16
               Source: "p0"
  FunctionDefinition "logBytes17" - const
     Source: "function logBytes17(bytes17 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes17)\", p0));\n\t}"
    ParameterList
       Source: "(bytes17 p0)"
      VariableDeclaration "p0"
         Type: bytes17
         Source: "bytes17 p0"
        ElementaryTypeName bytes17
           Source: "bytes17"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes17)\", p0));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bytes17)\", p0))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bytes17)\", p0))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(bytes17)\", p0)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(bytes17)
               Type: literal_string "log(bytes17)"
               Source: "\"log(bytes17)\""
            Identifier p0
               Type: bytes17
               Source: "p0"
  FunctionDefinition "logBytes18" - const
     Source: "function logBytes18(bytes18 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes18)\", p0));\n\t}"
    ParameterList
       Source: "(bytes18 p0)"
      VariableDeclaration "p0"
         Type: bytes18
         Source: "bytes18 p0"
        ElementaryTypeName bytes18
           Source: "bytes18"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes18)\", p0));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bytes18)\", p0))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bytes18)\", p0))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(bytes18)\", p0)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(bytes18)
               Type: literal_string "log(bytes18)"
               Source: "\"log(bytes18)\""
            Identifier p0
               Type: bytes18
               Source: "p0"
  FunctionDefinition "logBytes19" - const
     Source: "function logBytes19(bytes19 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes19)\", p0));\n\t}"
    ParameterList
       Source: "(bytes19 p0)"
      VariableDeclaration "p0"
         Type: bytes19
         Source: "bytes19 p0"
        ElementaryTypeName bytes19
           Source: "bytes19"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes19)\", p0));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bytes19)\", p0))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bytes19)\", p0))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(bytes19)\", p0)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(bytes19)
               Type: literal_string "log(bytes19)"
               Source: "\"log(bytes19)\""
            Identifier p0
               Type: bytes19
               Source: "p0"
  FunctionDefinition "logBytes20" - const
     Source: "function logBytes20(bytes20 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes20)\", p0));\n\t}"
    ParameterList
       Source: "(bytes20 p0)"
      VariableDeclaration "p0"
         Type: bytes20
         Source: "bytes20 p0"
        ElementaryTypeName bytes20
           Source: "bytes20"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes20)\", p0));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bytes20)\", p0))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bytes20)\", p0))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(bytes20)\", p0)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(bytes20)
               Type: literal_string "log(bytes20)"
               Source: "\"log(bytes20)\""
            Identifier p0
               Type: bytes20
               Source: "p0"
  FunctionDefinition "logBytes21" - const
     Source: "function logBytes21(bytes21 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes21)\", p0));\n\t}"
    ParameterList
       Source: "(bytes21 p0)"
      VariableDeclaration "p0"
         Type: bytes21
         Source: "bytes21 p0"
        ElementaryTypeName bytes21
           Source: "bytes21"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes21)\", p0));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bytes21)\", p0))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bytes21)\", p0))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(bytes21)\", p0)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(bytes21)
               Type: literal_string "log(bytes21)"
               Source: "\"log(bytes21)\""
            Identifier p0
               Type: bytes21
               Source: "p0"
  FunctionDefinition "logBytes22" - const
     Source: "function logBytes22(bytes22 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes22)\", p0));\n\t}"
    ParameterList
       Source: "(bytes22 p0)"
      VariableDeclaration "p0"
         Type: bytes22
         Source: "bytes22 p0"
        ElementaryTypeName bytes22
           Source: "bytes22"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes22)\", p0));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bytes22)\", p0))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bytes22)\", p0))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(bytes22)\", p0)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(bytes22)
               Type: literal_string "log(bytes22)"
               Source: "\"log(bytes22)\""
            Identifier p0
               Type: bytes22
               Source: "p0"
  FunctionDefinition "logBytes23" - const
     Source: "function logBytes23(bytes23 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes23)\", p0));\n\t}"
    ParameterList
       Source: "(bytes23 p0)"
      VariableDeclaration "p0"
         Type: bytes23
         Source: "bytes23 p0"
        ElementaryTypeName bytes23
           Source: "bytes23"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes23)\", p0));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bytes23)\", p0))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bytes23)\", p0))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(bytes23)\", p0)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(bytes23)
               Type: literal_string "log(bytes23)"
               Source: "\"log(bytes23)\""
            Identifier p0
               Type: bytes23
               Source: "p0"
  FunctionDefinition "logBytes24" - const
     Source: "function logBytes24(bytes24 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes24)\", p0));\n\t}"
    ParameterList
       Source: "(bytes24 p0)"
      VariableDeclaration "p0"
         Type: bytes24
         Source: "bytes24 p0"
        ElementaryTypeName bytes24
           Source: "bytes24"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes24)\", p0));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bytes24)\", p0))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bytes24)\", p0))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(bytes24)\", p0)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(bytes24)
               Type: literal_string "log(bytes24)"
               Source: "\"log(bytes24)\""
            Identifier p0
               Type: bytes24
               Source: "p0"
  FunctionDefinition "logBytes25" - const
     Source: "function logBytes25(bytes25 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes25)\", p0));\n\t}"
    ParameterList
       Source: "(bytes25 p0)"
      VariableDeclaration "p0"
         Type: bytes25
         Source: "bytes25 p0"
        ElementaryTypeName bytes25
           Source: "bytes25"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes25)\", p0));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bytes25)\", p0))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bytes25)\", p0))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(bytes25)\", p0)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(bytes25)
               Type: literal_string "log(bytes25)"
               Source: "\"log(bytes25)\""
            Identifier p0
               Type: bytes25
               Source: "p0"
  FunctionDefinition "logBytes26" - const
     Source: "function logBytes26(bytes26 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes26)\", p0));\n\t}"
    ParameterList
       Source: "(bytes26 p0)"
      VariableDeclaration "p0"
         Type: bytes26
         Source: "bytes26 p0"
        ElementaryTypeName bytes26
           Source: "bytes26"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes26)\", p0));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bytes26)\", p0))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bytes26)\", p0))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(bytes26)\", p0)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(bytes26)
               Type: literal_string "log(bytes26)"
               Source: "\"log(bytes26)\""
            Identifier p0
               Type: bytes26
               Source: "p0"
  FunctionDefinition "logBytes27" - const
     Source: "function logBytes27(bytes27 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes27)\", p0));\n\t}"
    ParameterList
       Source: "(bytes27 p0)"
      VariableDeclaration "p0"
         Type: bytes27
         Source: "bytes27 p0"
        ElementaryTypeName bytes27
           Source: "bytes27"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes27)\", p0));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bytes27)\", p0))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bytes27)\", p0))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(bytes27)\", p0)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(bytes27)
               Type: literal_string "log(bytes27)"
               Source: "\"log(bytes27)\""
            Identifier p0
               Type: bytes27
               Source: "p0"
  FunctionDefinition "logBytes28" - const
     Source: "function logBytes28(bytes28 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes28)\", p0));\n\t}"
    ParameterList
       Source: "(bytes28 p0)"
      VariableDeclaration "p0"
         Type: bytes28
         Source: "bytes28 p0"
        ElementaryTypeName bytes28
           Source: "bytes28"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes28)\", p0));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bytes28)\", p0))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bytes28)\", p0))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(bytes28)\", p0)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(bytes28)
               Type: literal_string "log(bytes28)"
               Source: "\"log(bytes28)\""
            Identifier p0
               Type: bytes28
               Source: "p0"
  FunctionDefinition "logBytes29" - const
     Source: "function logBytes29(bytes29 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes29)\", p0));\n\t}"
    ParameterList
       Source: "(bytes29 p0)"
      VariableDeclaration "p0"
         Type: bytes29
         Source: "bytes29 p0"
        ElementaryTypeName bytes29
           Source: "bytes29"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes29)\", p0));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bytes29)\", p0))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bytes29)\", p0))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(bytes29)\", p0)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(bytes29)
               Type: literal_string "log(bytes29)"
               Source: "\"log(bytes29)\""
            Identifier p0
               Type: bytes29
               Source: "p0"
  FunctionDefinition "logBytes30" - const
     Source: "function logBytes30(bytes30 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes30)\", p0));\n\t}"
    ParameterList
       Source: "(bytes30 p0)"
      VariableDeclaration "p0"
         Type: bytes30
         Source: "bytes30 p0"
        ElementaryTypeName bytes30
           Source: "bytes30"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes30)\", p0));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bytes30)\", p0))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bytes30)\", p0))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(bytes30)\", p0)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(bytes30)
               Type: literal_string "log(bytes30)"
               Source: "\"log(bytes30)\""
            Identifier p0
               Type: bytes30
               Source: "p0"
  FunctionDefinition "logBytes31" - const
     Source: "function logBytes31(bytes31 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes31)\", p0));\n\t}"
    ParameterList
       Source: "(bytes31 p0)"
      VariableDeclaration "p0"
         Type: bytes31
         Source: "bytes31 p0"
        ElementaryTypeName bytes31
           Source: "bytes31"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes31)\", p0));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bytes31)\", p0))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bytes31)\", p0))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(bytes31)\", p0)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(bytes31)
               Type: literal_string "log(bytes31)"
               Source: "\"log(bytes31)\""
            Identifier p0
               Type: bytes31
               Source: "p0"
  FunctionDefinition "logBytes32" - const
     Source: "function logBytes32(bytes32 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes32)\", p0));\n\t}"
    ParameterList
       Source: "(bytes32 p0)"
      VariableDeclaration "p0"
         Type: bytes32
         Source: "bytes32 p0"
        ElementaryTypeName bytes32
           Source: "bytes32"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes32)\", p0));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bytes32)\", p0))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bytes32)\", p0))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(bytes32)\", p0)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(bytes32)
               Type: literal_string "log(bytes32)"
               Source: "\"log(bytes32)\""
            Identifier p0
               Type: bytes32
               Source: "p0"
  FunctionDefinition "log" - const
     Source: "function log(uint256 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256)\", p0));\n\t}"
    ParameterList
       Source: "(uint256 p0)"
      VariableDeclaration "p0"
         Type: uint256
         Source: "uint256 p0"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256)\", p0));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256)\", p0))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256)\", p0))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(uint256)\", p0)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(uint256)
               Type: literal_string "log(uint256)"
               Source: "\"log(uint256)\""
            Identifier p0
               Type: uint256
               Source: "p0"
  FunctionDefinition "log" - const
     Source: "function log(string memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n\t}"
    ParameterList
       Source: "(string memory p0)"
      VariableDeclaration "p0"
         Type: string memory
         Source: "string memory p0"
        ElementaryTypeName string
           Source: "string"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(string)\", p0)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(string)
               Type: literal_string "log(string)"
               Source: "\"log(string)\""
            Identifier p0
               Type: string memory
               Source: "p0"
  FunctionDefinition "log" - const
     Source: "function log(bool p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n\t}"
    ParameterList
       Source: "(bool p0)"
      VariableDeclaration "p0"
         Type: bool
         Source: "bool p0"
        ElementaryTypeName bool
           Source: "bool"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(bool)\", p0)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(bool)
               Type: literal_string "log(bool)"
               Source: "\"log(bool)\""
            Identifier p0
               Type: bool
               Source: "p0"
  FunctionDefinition "log" - const
     Source: "function log(address p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n\t}"
    ParameterList
       Source: "(address p0)"
      VariableDeclaration "p0"
         Type: address
         Source: "address p0"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(address)\", p0)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(address)
               Type: literal_string "log(address)"
               Source: "\"log(address)\""
            Identifier p0
               Type: address
               Source: "p0"
  FunctionDefinition "log" - const
     Source: "function log(uint256 p0, uint256 p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256)\", p0, p1));\n\t}"
    ParameterList
       Source: "(uint256 p0, uint256 p1)"
      VariableDeclaration "p0"
         Type: uint256
         Source: "uint256 p0"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p1"
         Type: uint256
         Source: "uint256 p1"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256)\", p0, p1));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256)\", p0, p1))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256)\", p0, p1))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(uint256,uint256)\", p0, p1)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(uint256,uint256)
               Type: literal_string "log(uint256,uint256)"
               Source: "\"log(uint256,uint256)\""
            Identifier p0
               Type: uint256
               Source: "p0"
            Identifier p1
               Type: uint256
               Source: "p1"
  FunctionDefinition "log" - const
     Source: "function log(uint256 p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string)\", p0, p1));\n\t}"
    ParameterList
       Source: "(uint256 p0, string memory p1)"
      VariableDeclaration "p0"
         Type: uint256
         Source: "uint256 p0"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p1"
         Type: string memory
         Source: "string memory p1"
        ElementaryTypeName string
           Source: "string"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string)\", p0, p1));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string)\", p0, p1))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string)\", p0, p1))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(uint256,string)\", p0, p1)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(uint256,string)
               Type: literal_string "log(uint256,string)"
               Source: "\"log(uint256,string)\""
            Identifier p0
               Type: uint256
               Source: "p0"
            Identifier p1
               Type: string memory
               Source: "p1"
  FunctionDefinition "log" - const
     Source: "function log(uint256 p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool)\", p0, p1));\n\t}"
    ParameterList
       Source: "(uint256 p0, bool p1)"
      VariableDeclaration "p0"
         Type: uint256
         Source: "uint256 p0"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p1"
         Type: bool
         Source: "bool p1"
        ElementaryTypeName bool
           Source: "bool"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool)\", p0, p1));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool)\", p0, p1))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool)\", p0, p1))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(uint256,bool)\", p0, p1)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(uint256,bool)
               Type: literal_string "log(uint256,bool)"
               Source: "\"log(uint256,bool)\""
            Identifier p0
               Type: uint256
               Source: "p0"
            Identifier p1
               Type: bool
               Source: "p1"
  FunctionDefinition "log" - const
     Source: "function log(uint256 p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address)\", p0, p1));\n\t}"
    ParameterList
       Source: "(uint256 p0, address p1)"
      VariableDeclaration "p0"
         Type: uint256
         Source: "uint256 p0"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p1"
         Type: address
         Source: "address p1"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address)\", p0, p1));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address)\", p0, p1))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address)\", p0, p1))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(uint256,address)\", p0, p1)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(uint256,address)
               Type: literal_string "log(uint256,address)"
               Source: "\"log(uint256,address)\""
            Identifier p0
               Type: uint256
               Source: "p0"
            Identifier p1
               Type: address
               Source: "p1"
  FunctionDefinition "log" - const
     Source: "function log(string memory p0, uint256 p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256)\", p0, p1));\n\t}"
    ParameterList
       Source: "(string memory p0, uint256 p1)"
      VariableDeclaration "p0"
         Type: string memory
         Source: "string memory p0"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p1"
         Type: uint256
         Source: "uint256 p1"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256)\", p0, p1));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256)\", p0, p1))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256)\", p0, p1))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(string,uint256)\", p0, p1)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(string,uint256)
               Type: literal_string "log(string,uint256)"
               Source: "\"log(string,uint256)\""
            Identifier p0
               Type: string memory
               Source: "p0"
            Identifier p1
               Type: uint256
               Source: "p1"
  FunctionDefinition "log" - const
     Source: "function log(string memory p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string)\", p0, p1));\n\t}"
    ParameterList
       Source: "(string memory p0, string memory p1)"
      VariableDeclaration "p0"
         Type: string memory
         Source: "string memory p0"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p1"
         Type: string memory
         Source: "string memory p1"
        ElementaryTypeName string
           Source: "string"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string)\", p0, p1));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,string)\", p0, p1))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,string)\", p0, p1))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(string,string)\", p0, p1)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(string,string)
               Type: literal_string "log(string,string)"
               Source: "\"log(string,string)\""
            Identifier p0
               Type: string memory
               Source: "p0"
            Identifier p1
               Type: string memory
               Source: "p1"
  FunctionDefinition "log" - const
     Source: "function log(string memory p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool)\", p0, p1));\n\t}"
    ParameterList
       Source: "(string memory p0, bool p1)"
      VariableDeclaration "p0"
         Type: string memory
         Source: "string memory p0"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p1"
         Type: bool
         Source: "bool p1"
        ElementaryTypeName bool
           Source: "bool"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool)\", p0, p1));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,bool)\", p0, p1))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,bool)\", p0, p1))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(string,bool)\", p0, p1)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(string,bool)
               Type: literal_string "log(string,bool)"
               Source: "\"log(string,bool)\""
            Identifier p0
               Type: string memory
               Source: "p0"
            Identifier p1
               Type: bool
               Source: "p1"
  FunctionDefinition "log" - const
     Source: "function log(string memory p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address)\", p0, p1));\n\t}"
    ParameterList
       Source: "(string memory p0, address p1)"
      VariableDeclaration "p0"
         Type: string memory
         Source: "string memory p0"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p1"
         Type: address
         Source: "address p1"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address)\", p0, p1));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,address)\", p0, p1))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,address)\", p0, p1))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(string,address)\", p0, p1)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(string,address)
               Type: literal_string "log(string,address)"
               Source: "\"log(string,address)\""
            Identifier p0
               Type: string memory
               Source: "p0"
            Identifier p1
               Type: address
               Source: "p1"
  FunctionDefinition "log" - const
     Source: "function log(bool p0, uint256 p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256)\", p0, p1));\n\t}"
    ParameterList
       Source: "(bool p0, uint256 p1)"
      VariableDeclaration "p0"
         Type: bool
         Source: "bool p0"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p1"
         Type: uint256
         Source: "uint256 p1"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256)\", p0, p1));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256)\", p0, p1))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256)\", p0, p1))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(bool,uint256)\", p0, p1)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(bool,uint256)
               Type: literal_string "log(bool,uint256)"
               Source: "\"log(bool,uint256)\""
            Identifier p0
               Type: bool
               Source: "p0"
            Identifier p1
               Type: uint256
               Source: "p1"
  FunctionDefinition "log" - const
     Source: "function log(bool p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string)\", p0, p1));\n\t}"
    ParameterList
       Source: "(bool p0, string memory p1)"
      VariableDeclaration "p0"
         Type: bool
         Source: "bool p0"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p1"
         Type: string memory
         Source: "string memory p1"
        ElementaryTypeName string
           Source: "string"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string)\", p0, p1));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,string)\", p0, p1))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,string)\", p0, p1))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(bool,string)\", p0, p1)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(bool,string)
               Type: literal_string "log(bool,string)"
               Source: "\"log(bool,string)\""
            Identifier p0
               Type: bool
               Source: "p0"
            Identifier p1
               Type: string memory
               Source: "p1"
  FunctionDefinition "log" - const
     Source: "function log(bool p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool)\", p0, p1));\n\t}"
    ParameterList
       Source: "(bool p0, bool p1)"
      VariableDeclaration "p0"
         Type: bool
         Source: "bool p0"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p1"
         Type: bool
         Source: "bool p1"
        ElementaryTypeName bool
           Source: "bool"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool)\", p0, p1));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool)\", p0, p1))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool)\", p0, p1))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(bool,bool)\", p0, p1)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(bool,bool)
               Type: literal_string "log(bool,bool)"
               Source: "\"log(bool,bool)\""
            Identifier p0
               Type: bool
               Source: "p0"
            Identifier p1
               Type: bool
               Source: "p1"
  FunctionDefinition "log" - const
     Source: "function log(bool p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address)\", p0, p1));\n\t}"
    ParameterList
       Source: "(bool p0, address p1)"
      VariableDeclaration "p0"
         Type: bool
         Source: "bool p0"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p1"
         Type: address
         Source: "address p1"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address)\", p0, p1));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,address)\", p0, p1))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,address)\", p0, p1))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(bool,address)\", p0, p1)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(bool,address)
               Type: literal_string "log(bool,address)"
               Source: "\"log(bool,address)\""
            Identifier p0
               Type: bool
               Source: "p0"
            Identifier p1
               Type: address
               Source: "p1"
  FunctionDefinition "log" - const
     Source: "function log(address p0, uint256 p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256)\", p0, p1));\n\t}"
    ParameterList
       Source: "(address p0, uint256 p1)"
      VariableDeclaration "p0"
         Type: address
         Source: "address p0"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p1"
         Type: uint256
         Source: "uint256 p1"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256)\", p0, p1));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256)\", p0, p1))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256)\", p0, p1))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(address,uint256)\", p0, p1)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(address,uint256)
               Type: literal_string "log(address,uint256)"
               Source: "\"log(address,uint256)\""
            Identifier p0
               Type: address
               Source: "p0"
            Identifier p1
               Type: uint256
               Source: "p1"
  FunctionDefinition "log" - const
     Source: "function log(address p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string)\", p0, p1));\n\t}"
    ParameterList
       Source: "(address p0, string memory p1)"
      VariableDeclaration "p0"
         Type: address
         Source: "address p0"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p1"
         Type: string memory
         Source: "string memory p1"
        ElementaryTypeName string
           Source: "string"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string)\", p0, p1));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,string)\", p0, p1))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,string)\", p0, p1))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(address,string)\", p0, p1)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(address,string)
               Type: literal_string "log(address,string)"
               Source: "\"log(address,string)\""
            Identifier p0
               Type: address
               Source: "p0"
            Identifier p1
               Type: string memory
               Source: "p1"
  FunctionDefinition "log" - const
     Source: "function log(address p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool)\", p0, p1));\n\t}"
    ParameterList
       Source: "(address p0, bool p1)"
      VariableDeclaration "p0"
         Type: address
         Source: "address p0"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p1"
         Type: bool
         Source: "bool p1"
        ElementaryTypeName bool
           Source: "bool"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool)\", p0, p1));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,bool)\", p0, p1))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,bool)\", p0, p1))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(address,bool)\", p0, p1)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(address,bool)
               Type: literal_string "log(address,bool)"
               Source: "\"log(address,bool)\""
            Identifier p0
               Type: address
               Source: "p0"
            Identifier p1
               Type: bool
               Source: "p1"
  FunctionDefinition "log" - const
     Source: "function log(address p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address)\", p0, p1));\n\t}"
    ParameterList
       Source: "(address p0, address p1)"
      VariableDeclaration "p0"
         Type: address
         Source: "address p0"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p1"
         Type: address
         Source: "address p1"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address)\", p0, p1));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,address)\", p0, p1))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,address)\", p0, p1))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(address,address)\", p0, p1)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(address,address)
               Type: literal_string "log(address,address)"
               Source: "\"log(address,address)\""
            Identifier p0
               Type: address
               Source: "p0"
            Identifier p1
               Type: address
               Source: "p1"
  FunctionDefinition "log" - const
     Source: "function log(uint256 p0, uint256 p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256)\", p0, p1, p2));\n\t}"
    ParameterList
       Source: "(uint256 p0, uint256 p1, uint256 p2)"
      VariableDeclaration "p0"
         Type: uint256
         Source: "uint256 p0"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p1"
         Type: uint256
         Source: "uint256 p1"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p2"
         Type: uint256
         Source: "uint256 p2"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256)\", p0, p1, p2));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256)\", p0, p1, p2))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256)\", p0, p1, p2))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(uint256,uint256,uint256)\", p0, p1, p2)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(uint256,uint256,uint256)
               Type: literal_string "log(uint256,uint256,uint256)"
               Source: "\"log(uint256,uint256,uint256)\""
            Identifier p0
               Type: uint256
               Source: "p0"
            Identifier p1
               Type: uint256
               Source: "p1"
            Identifier p2
               Type: uint256
               Source: "p2"
  FunctionDefinition "log" - const
     Source: "function log(uint256 p0, uint256 p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string)\", p0, p1, p2));\n\t}"
    ParameterList
       Source: "(uint256 p0, uint256 p1, string memory p2)"
      VariableDeclaration "p0"
         Type: uint256
         Source: "uint256 p0"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p1"
         Type: uint256
         Source: "uint256 p1"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p2"
         Type: string memory
         Source: "string memory p2"
        ElementaryTypeName string
           Source: "string"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string)\", p0, p1, p2));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string)\", p0, p1, p2))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string)\", p0, p1, p2))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(uint256,uint256,string)\", p0, p1, p2)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(uint256,uint256,string)
               Type: literal_string "log(uint256,uint256,string)"
               Source: "\"log(uint256,uint256,string)\""
            Identifier p0
               Type: uint256
               Source: "p0"
            Identifier p1
               Type: uint256
               Source: "p1"
            Identifier p2
               Type: string memory
               Source: "p2"
  FunctionDefinition "log" - const
     Source: "function log(uint256 p0, uint256 p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool)\", p0, p1, p2));\n\t}"
    ParameterList
       Source: "(uint256 p0, uint256 p1, bool p2)"
      VariableDeclaration "p0"
         Type: uint256
         Source: "uint256 p0"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p1"
         Type: uint256
         Source: "uint256 p1"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p2"
         Type: bool
         Source: "bool p2"
        ElementaryTypeName bool
           Source: "bool"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool)\", p0, p1, p2));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool)\", p0, p1, p2))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool)\", p0, p1, p2))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(uint256,uint256,bool)\", p0, p1, p2)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(uint256,uint256,bool)
               Type: literal_string "log(uint256,uint256,bool)"
               Source: "\"log(uint256,uint256,bool)\""
            Identifier p0
               Type: uint256
               Source: "p0"
            Identifier p1
               Type: uint256
               Source: "p1"
            Identifier p2
               Type: bool
               Source: "p2"
  FunctionDefinition "log" - const
     Source: "function log(uint256 p0, uint256 p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address)\", p0, p1, p2));\n\t}"
    ParameterList
       Source: "(uint256 p0, uint256 p1, address p2)"
      VariableDeclaration "p0"
         Type: uint256
         Source: "uint256 p0"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p1"
         Type: uint256
         Source: "uint256 p1"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p2"
         Type: address
         Source: "address p2"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address)\", p0, p1, p2));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address)\", p0, p1, p2))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address)\", p0, p1, p2))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(uint256,uint256,address)\", p0, p1, p2)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(uint256,uint256,address)
               Type: literal_string "log(uint256,uint256,address)"
               Source: "\"log(uint256,uint256,address)\""
            Identifier p0
               Type: uint256
               Source: "p0"
            Identifier p1
               Type: uint256
               Source: "p1"
            Identifier p2
               Type: address
               Source: "p2"
  FunctionDefinition "log" - const
     Source: "function log(uint256 p0, string memory p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256)\", p0, p1, p2));\n\t}"
    ParameterList
       Source: "(uint256 p0, string memory p1, uint256 p2)"
      VariableDeclaration "p0"
         Type: uint256
         Source: "uint256 p0"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p1"
         Type: string memory
         Source: "string memory p1"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p2"
         Type: uint256
         Source: "uint256 p2"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256)\", p0, p1, p2));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256)\", p0, p1, p2))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256)\", p0, p1, p2))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(uint256,string,uint256)\", p0, p1, p2)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(uint256,string,uint256)
               Type: literal_string "log(uint256,string,uint256)"
               Source: "\"log(uint256,string,uint256)\""
            Identifier p0
               Type: uint256
               Source: "p0"
            Identifier p1
               Type: string memory
               Source: "p1"
            Identifier p2
               Type: uint256
               Source: "p2"
  FunctionDefinition "log" - const
     Source: "function log(uint256 p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string)\", p0, p1, p2));\n\t}"
    ParameterList
       Source: "(uint256 p0, string memory p1, string memory p2)"
      VariableDeclaration "p0"
         Type: uint256
         Source: "uint256 p0"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p1"
         Type: string memory
         Source: "string memory p1"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p2"
         Type: string memory
         Source: "string memory p2"
        ElementaryTypeName string
           Source: "string"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string)\", p0, p1, p2));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string)\", p0, p1, p2))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string)\", p0, p1, p2))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(uint256,string,string)\", p0, p1, p2)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(uint256,string,string)
               Type: literal_string "log(uint256,string,string)"
               Source: "\"log(uint256,string,string)\""
            Identifier p0
               Type: uint256
               Source: "p0"
            Identifier p1
               Type: string memory
               Source: "p1"
            Identifier p2
               Type: string memory
               Source: "p2"
  FunctionDefinition "log" - const
     Source: "function log(uint256 p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool)\", p0, p1, p2));\n\t}"
    ParameterList
       Source: "(uint256 p0, string memory p1, bool p2)"
      VariableDeclaration "p0"
         Type: uint256
         Source: "uint256 p0"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p1"
         Type: string memory
         Source: "string memory p1"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p2"
         Type: bool
         Source: "bool p2"
        ElementaryTypeName bool
           Source: "bool"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool)\", p0, p1, p2));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool)\", p0, p1, p2))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool)\", p0, p1, p2))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(uint256,string,bool)\", p0, p1, p2)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(uint256,string,bool)
               Type: literal_string "log(uint256,string,bool)"
               Source: "\"log(uint256,string,bool)\""
            Identifier p0
               Type: uint256
               Source: "p0"
            Identifier p1
               Type: string memory
               Source: "p1"
            Identifier p2
               Type: bool
               Source: "p2"
  FunctionDefinition "log" - const
     Source: "function log(uint256 p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address)\", p0, p1, p2));\n\t}"
    ParameterList
       Source: "(uint256 p0, string memory p1, address p2)"
      VariableDeclaration "p0"
         Type: uint256
         Source: "uint256 p0"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p1"
         Type: string memory
         Source: "string memory p1"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p2"
         Type: address
         Source: "address p2"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address)\", p0, p1, p2));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address)\", p0, p1, p2))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address)\", p0, p1, p2))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(uint256,string,address)\", p0, p1, p2)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(uint256,string,address)
               Type: literal_string "log(uint256,string,address)"
               Source: "\"log(uint256,string,address)\""
            Identifier p0
               Type: uint256
               Source: "p0"
            Identifier p1
               Type: string memory
               Source: "p1"
            Identifier p2
               Type: address
               Source: "p2"
  FunctionDefinition "log" - const
     Source: "function log(uint256 p0, bool p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256)\", p0, p1, p2));\n\t}"
    ParameterList
       Source: "(uint256 p0, bool p1, uint256 p2)"
      VariableDeclaration "p0"
         Type: uint256
         Source: "uint256 p0"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p1"
         Type: bool
         Source: "bool p1"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p2"
         Type: uint256
         Source: "uint256 p2"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256)\", p0, p1, p2));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256)\", p0, p1, p2))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256)\", p0, p1, p2))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(uint256,bool,uint256)\", p0, p1, p2)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(uint256,bool,uint256)
               Type: literal_string "log(uint256,bool,uint256)"
               Source: "\"log(uint256,bool,uint256)\""
            Identifier p0
               Type: uint256
               Source: "p0"
            Identifier p1
               Type: bool
               Source: "p1"
            Identifier p2
               Type: uint256
               Source: "p2"
  FunctionDefinition "log" - const
     Source: "function log(uint256 p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string)\", p0, p1, p2));\n\t}"
    ParameterList
       Source: "(uint256 p0, bool p1, string memory p2)"
      VariableDeclaration "p0"
         Type: uint256
         Source: "uint256 p0"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p1"
         Type: bool
         Source: "bool p1"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p2"
         Type: string memory
         Source: "string memory p2"
        ElementaryTypeName string
           Source: "string"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string)\", p0, p1, p2));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string)\", p0, p1, p2))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string)\", p0, p1, p2))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(uint256,bool,string)\", p0, p1, p2)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(uint256,bool,string)
               Type: literal_string "log(uint256,bool,string)"
               Source: "\"log(uint256,bool,string)\""
            Identifier p0
               Type: uint256
               Source: "p0"
            Identifier p1
               Type: bool
               Source: "p1"
            Identifier p2
               Type: string memory
               Source: "p2"
  FunctionDefinition "log" - const
     Source: "function log(uint256 p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool)\", p0, p1, p2));\n\t}"
    ParameterList
       Source: "(uint256 p0, bool p1, bool p2)"
      VariableDeclaration "p0"
         Type: uint256
         Source: "uint256 p0"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p1"
         Type: bool
         Source: "bool p1"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p2"
         Type: bool
         Source: "bool p2"
        ElementaryTypeName bool
           Source: "bool"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool)\", p0, p1, p2));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool)\", p0, p1, p2))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool)\", p0, p1, p2))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(uint256,bool,bool)\", p0, p1, p2)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(uint256,bool,bool)
               Type: literal_string "log(uint256,bool,bool)"
               Source: "\"log(uint256,bool,bool)\""
            Identifier p0
               Type: uint256
               Source: "p0"
            Identifier p1
               Type: bool
               Source: "p1"
            Identifier p2
               Type: bool
               Source: "p2"
  FunctionDefinition "log" - const
     Source: "function log(uint256 p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address)\", p0, p1, p2));\n\t}"
    ParameterList
       Source: "(uint256 p0, bool p1, address p2)"
      VariableDeclaration "p0"
         Type: uint256
         Source: "uint256 p0"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p1"
         Type: bool
         Source: "bool p1"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p2"
         Type: address
         Source: "address p2"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address)\", p0, p1, p2));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address)\", p0, p1, p2))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address)\", p0, p1, p2))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(uint256,bool,address)\", p0, p1, p2)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(uint256,bool,address)
               Type: literal_string "log(uint256,bool,address)"
               Source: "\"log(uint256,bool,address)\""
            Identifier p0
               Type: uint256
               Source: "p0"
            Identifier p1
               Type: bool
               Source: "p1"
            Identifier p2
               Type: address
               Source: "p2"
  FunctionDefinition "log" - const
     Source: "function log(uint256 p0, address p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256)\", p0, p1, p2));\n\t}"
    ParameterList
       Source: "(uint256 p0, address p1, uint256 p2)"
      VariableDeclaration "p0"
         Type: uint256
         Source: "uint256 p0"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p1"
         Type: address
         Source: "address p1"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p2"
         Type: uint256
         Source: "uint256 p2"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256)\", p0, p1, p2));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256)\", p0, p1, p2))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256)\", p0, p1, p2))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(uint256,address,uint256)\", p0, p1, p2)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(uint256,address,uint256)
               Type: literal_string "log(uint256,address,uint256)"
               Source: "\"log(uint256,address,uint256)\""
            Identifier p0
               Type: uint256
               Source: "p0"
            Identifier p1
               Type: address
               Source: "p1"
            Identifier p2
               Type: uint256
               Source: "p2"
  FunctionDefinition "log" - const
     Source: "function log(uint256 p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string)\", p0, p1, p2));\n\t}"
    ParameterList
       Source: "(uint256 p0, address p1, string memory p2)"
      VariableDeclaration "p0"
         Type: uint256
         Source: "uint256 p0"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p1"
         Type: address
         Source: "address p1"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p2"
         Type: string memory
         Source: "string memory p2"
        ElementaryTypeName string
           Source: "string"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string)\", p0, p1, p2));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string)\", p0, p1, p2))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string)\", p0, p1, p2))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(uint256,address,string)\", p0, p1, p2)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(uint256,address,string)
               Type: literal_string "log(uint256,address,string)"
               Source: "\"log(uint256,address,string)\""
            Identifier p0
               Type: uint256
               Source: "p0"
            Identifier p1
               Type: address
               Source: "p1"
            Identifier p2
               Type: string memory
               Source: "p2"
  FunctionDefinition "log" - const
     Source: "function log(uint256 p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool)\", p0, p1, p2));\n\t}"
    ParameterList
       Source: "(uint256 p0, address p1, bool p2)"
      VariableDeclaration "p0"
         Type: uint256
         Source: "uint256 p0"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p1"
         Type: address
         Source: "address p1"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p2"
         Type: bool
         Source: "bool p2"
        ElementaryTypeName bool
           Source: "bool"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool)\", p0, p1, p2));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool)\", p0, p1, p2))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool)\", p0, p1, p2))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(uint256,address,bool)\", p0, p1, p2)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(uint256,address,bool)
               Type: literal_string "log(uint256,address,bool)"
               Source: "\"log(uint256,address,bool)\""
            Identifier p0
               Type: uint256
               Source: "p0"
            Identifier p1
               Type: address
               Source: "p1"
            Identifier p2
               Type: bool
               Source: "p2"
  FunctionDefinition "log" - const
     Source: "function log(uint256 p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address)\", p0, p1, p2));\n\t}"
    ParameterList
       Source: "(uint256 p0, address p1, address p2)"
      VariableDeclaration "p0"
         Type: uint256
         Source: "uint256 p0"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p1"
         Type: address
         Source: "address p1"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p2"
         Type: address
         Source: "address p2"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address)\", p0, p1, p2));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address)\", p0, p1, p2))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address)\", p0, p1, p2))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(uint256,address,address)\", p0, p1, p2)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(uint256,address,address)
               Type: literal_string "log(uint256,address,address)"
               Source: "\"log(uint256,address,address)\""
            Identifier p0
               Type: uint256
               Source: "p0"
            Identifier p1
               Type: address
               Source: "p1"
            Identifier p2
               Type: address
               Source: "p2"
  FunctionDefinition "log" - const
     Source: "function log(string memory p0, uint256 p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256)\", p0, p1, p2));\n\t}"
    ParameterList
       Source: "(string memory p0, uint256 p1, uint256 p2)"
      VariableDeclaration "p0"
         Type: string memory
         Source: "string memory p0"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p1"
         Type: uint256
         Source: "uint256 p1"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p2"
         Type: uint256
         Source: "uint256 p2"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256)\", p0, p1, p2));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256)\", p0, p1, p2))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256)\", p0, p1, p2))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(string,uint256,uint256)\", p0, p1, p2)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(string,uint256,uint256)
               Type: literal_string "log(string,uint256,uint256)"
               Source: "\"log(string,uint256,uint256)\""
            Identifier p0
               Type: string memory
               Source: "p0"
            Identifier p1
               Type: uint256
               Source: "p1"
            Identifier p2
               Type: uint256
               Source: "p2"
  FunctionDefinition "log" - const
     Source: "function log(string memory p0, uint256 p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string)\", p0, p1, p2));\n\t}"
    ParameterList
       Source: "(string memory p0, uint256 p1, string memory p2)"
      VariableDeclaration "p0"
         Type: string memory
         Source: "string memory p0"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p1"
         Type: uint256
         Source: "uint256 p1"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p2"
         Type: string memory
         Source: "string memory p2"
        ElementaryTypeName string
           Source: "string"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string)\", p0, p1, p2));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string)\", p0, p1, p2))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string)\", p0, p1, p2))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(string,uint256,string)\", p0, p1, p2)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(string,uint256,string)
               Type: literal_string "log(string,uint256,string)"
               Source: "\"log(string,uint256,string)\""
            Identifier p0
               Type: string memory
               Source: "p0"
            Identifier p1
               Type: uint256
               Source: "p1"
            Identifier p2
               Type: string memory
               Source: "p2"
  FunctionDefinition "log" - const
     Source: "function log(string memory p0, uint256 p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool)\", p0, p1, p2));\n\t}"
    ParameterList
       Source: "(string memory p0, uint256 p1, bool p2)"
      VariableDeclaration "p0"
         Type: string memory
         Source: "string memory p0"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p1"
         Type: uint256
         Source: "uint256 p1"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p2"
         Type: bool
         Source: "bool p2"
        ElementaryTypeName bool
           Source: "bool"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool)\", p0, p1, p2));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool)\", p0, p1, p2))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool)\", p0, p1, p2))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(string,uint256,bool)\", p0, p1, p2)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(string,uint256,bool)
               Type: literal_string "log(string,uint256,bool)"
               Source: "\"log(string,uint256,bool)\""
            Identifier p0
               Type: string memory
               Source: "p0"
            Identifier p1
               Type: uint256
               Source: "p1"
            Identifier p2
               Type: bool
               Source: "p2"
  FunctionDefinition "log" - const
     Source: "function log(string memory p0, uint256 p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address)\", p0, p1, p2));\n\t}"
    ParameterList
       Source: "(string memory p0, uint256 p1, address p2)"
      VariableDeclaration "p0"
         Type: string memory
         Source: "string memory p0"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p1"
         Type: uint256
         Source: "uint256 p1"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p2"
         Type: address
         Source: "address p2"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address)\", p0, p1, p2));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address)\", p0, p1, p2))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address)\", p0, p1, p2))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(string,uint256,address)\", p0, p1, p2)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(string,uint256,address)
               Type: literal_string "log(string,uint256,address)"
               Source: "\"log(string,uint256,address)\""
            Identifier p0
               Type: string memory
               Source: "p0"
            Identifier p1
               Type: uint256
               Source: "p1"
            Identifier p2
               Type: address
               Source: "p2"
  FunctionDefinition "log" - const
     Source: "function log(string memory p0, string memory p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256)\", p0, p1, p2));\n\t}"
    ParameterList
       Source: "(string memory p0, string memory p1, uint256 p2)"
      VariableDeclaration "p0"
         Type: string memory
         Source: "string memory p0"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p1"
         Type: string memory
         Source: "string memory p1"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p2"
         Type: uint256
         Source: "uint256 p2"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256)\", p0, p1, p2));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256)\", p0, p1, p2))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256)\", p0, p1, p2))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(string,string,uint256)\", p0, p1, p2)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(string,string,uint256)
               Type: literal_string "log(string,string,uint256)"
               Source: "\"log(string,string,uint256)\""
            Identifier p0
               Type: string memory
               Source: "p0"
            Identifier p1
               Type: string memory
               Source: "p1"
            Identifier p2
               Type: uint256
               Source: "p2"
  FunctionDefinition "log" - const
     Source: "function log(string memory p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string)\", p0, p1, p2));\n\t}"
    ParameterList
       Source: "(string memory p0, string memory p1, string memory p2)"
      VariableDeclaration "p0"
         Type: string memory
         Source: "string memory p0"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p1"
         Type: string memory
         Source: "string memory p1"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p2"
         Type: string memory
         Source: "string memory p2"
        ElementaryTypeName string
           Source: "string"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string)\", p0, p1, p2));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string)\", p0, p1, p2))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string)\", p0, p1, p2))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(string,string,string)\", p0, p1, p2)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(string,string,string)
               Type: literal_string "log(string,string,string)"
               Source: "\"log(string,string,string)\""
            Identifier p0
               Type: string memory
               Source: "p0"
            Identifier p1
               Type: string memory
               Source: "p1"
            Identifier p2
               Type: string memory
               Source: "p2"
  FunctionDefinition "log" - const
     Source: "function log(string memory p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool)\", p0, p1, p2));\n\t}"
    ParameterList
       Source: "(string memory p0, string memory p1, bool p2)"
      VariableDeclaration "p0"
         Type: string memory
         Source: "string memory p0"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p1"
         Type: string memory
         Source: "string memory p1"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p2"
         Type: bool
         Source: "bool p2"
        ElementaryTypeName bool
           Source: "bool"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool)\", p0, p1, p2));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool)\", p0, p1, p2))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool)\", p0, p1, p2))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(string,string,bool)\", p0, p1, p2)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(string,string,bool)
               Type: literal_string "log(string,string,bool)"
               Source: "\"log(string,string,bool)\""
            Identifier p0
               Type: string memory
               Source: "p0"
            Identifier p1
               Type: string memory
               Source: "p1"
            Identifier p2
               Type: bool
               Source: "p2"
  FunctionDefinition "log" - const
     Source: "function log(string memory p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address)\", p0, p1, p2));\n\t}"
    ParameterList
       Source: "(string memory p0, string memory p1, address p2)"
      VariableDeclaration "p0"
         Type: string memory
         Source: "string memory p0"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p1"
         Type: string memory
         Source: "string memory p1"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p2"
         Type: address
         Source: "address p2"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address)\", p0, p1, p2));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address)\", p0, p1, p2))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address)\", p0, p1, p2))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(string,string,address)\", p0, p1, p2)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(string,string,address)
               Type: literal_string "log(string,string,address)"
               Source: "\"log(string,string,address)\""
            Identifier p0
               Type: string memory
               Source: "p0"
            Identifier p1
               Type: string memory
               Source: "p1"
            Identifier p2
               Type: address
               Source: "p2"
  FunctionDefinition "log" - const
     Source: "function log(string memory p0, bool p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256)\", p0, p1, p2));\n\t}"
    ParameterList
       Source: "(string memory p0, bool p1, uint256 p2)"
      VariableDeclaration "p0"
         Type: string memory
         Source: "string memory p0"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p1"
         Type: bool
         Source: "bool p1"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p2"
         Type: uint256
         Source: "uint256 p2"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256)\", p0, p1, p2));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256)\", p0, p1, p2))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256)\", p0, p1, p2))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(string,bool,uint256)\", p0, p1, p2)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(string,bool,uint256)
               Type: literal_string "log(string,bool,uint256)"
               Source: "\"log(string,bool,uint256)\""
            Identifier p0
               Type: string memory
               Source: "p0"
            Identifier p1
               Type: bool
               Source: "p1"
            Identifier p2
               Type: uint256
               Source: "p2"
  FunctionDefinition "log" - const
     Source: "function log(string memory p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string)\", p0, p1, p2));\n\t}"
    ParameterList
       Source: "(string memory p0, bool p1, string memory p2)"
      VariableDeclaration "p0"
         Type: string memory
         Source: "string memory p0"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p1"
         Type: bool
         Source: "bool p1"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p2"
         Type: string memory
         Source: "string memory p2"
        ElementaryTypeName string
           Source: "string"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string)\", p0, p1, p2));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string)\", p0, p1, p2))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string)\", p0, p1, p2))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(string,bool,string)\", p0, p1, p2)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(string,bool,string)
               Type: literal_string "log(string,bool,string)"
               Source: "\"log(string,bool,string)\""
            Identifier p0
               Type: string memory
               Source: "p0"
            Identifier p1
               Type: bool
               Source: "p1"
            Identifier p2
               Type: string memory
               Source: "p2"
  FunctionDefinition "log" - const
     Source: "function log(string memory p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool)\", p0, p1, p2));\n\t}"
    ParameterList
       Source: "(string memory p0, bool p1, bool p2)"
      VariableDeclaration "p0"
         Type: string memory
         Source: "string memory p0"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p1"
         Type: bool
         Source: "bool p1"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p2"
         Type: bool
         Source: "bool p2"
        ElementaryTypeName bool
           Source: "bool"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool)\", p0, p1, p2));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool)\", p0, p1, p2))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool)\", p0, p1, p2))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(string,bool,bool)\", p0, p1, p2)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(string,bool,bool)
               Type: literal_string "log(string,bool,bool)"
               Source: "\"log(string,bool,bool)\""
            Identifier p0
               Type: string memory
               Source: "p0"
            Identifier p1
               Type: bool
               Source: "p1"
            Identifier p2
               Type: bool
               Source: "p2"
  FunctionDefinition "log" - const
     Source: "function log(string memory p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address)\", p0, p1, p2));\n\t}"
    ParameterList
       Source: "(string memory p0, bool p1, address p2)"
      VariableDeclaration "p0"
         Type: string memory
         Source: "string memory p0"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p1"
         Type: bool
         Source: "bool p1"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p2"
         Type: address
         Source: "address p2"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address)\", p0, p1, p2));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address)\", p0, p1, p2))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address)\", p0, p1, p2))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(string,bool,address)\", p0, p1, p2)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(string,bool,address)
               Type: literal_string "log(string,bool,address)"
               Source: "\"log(string,bool,address)\""
            Identifier p0
               Type: string memory
               Source: "p0"
            Identifier p1
               Type: bool
               Source: "p1"
            Identifier p2
               Type: address
               Source: "p2"
  FunctionDefinition "log" - const
     Source: "function log(string memory p0, address p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256)\", p0, p1, p2));\n\t}"
    ParameterList
       Source: "(string memory p0, address p1, uint256 p2)"
      VariableDeclaration "p0"
         Type: string memory
         Source: "string memory p0"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p1"
         Type: address
         Source: "address p1"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p2"
         Type: uint256
         Source: "uint256 p2"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256)\", p0, p1, p2));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256)\", p0, p1, p2))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256)\", p0, p1, p2))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(string,address,uint256)\", p0, p1, p2)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(string,address,uint256)
               Type: literal_string "log(string,address,uint256)"
               Source: "\"log(string,address,uint256)\""
            Identifier p0
               Type: string memory
               Source: "p0"
            Identifier p1
               Type: address
               Source: "p1"
            Identifier p2
               Type: uint256
               Source: "p2"
  FunctionDefinition "log" - const
     Source: "function log(string memory p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string)\", p0, p1, p2));\n\t}"
    ParameterList
       Source: "(string memory p0, address p1, string memory p2)"
      VariableDeclaration "p0"
         Type: string memory
         Source: "string memory p0"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p1"
         Type: address
         Source: "address p1"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p2"
         Type: string memory
         Source: "string memory p2"
        ElementaryTypeName string
           Source: "string"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string)\", p0, p1, p2));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string)\", p0, p1, p2))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string)\", p0, p1, p2))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(string,address,string)\", p0, p1, p2)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(string,address,string)
               Type: literal_string "log(string,address,string)"
               Source: "\"log(string,address,string)\""
            Identifier p0
               Type: string memory
               Source: "p0"
            Identifier p1
               Type: address
               Source: "p1"
            Identifier p2
               Type: string memory
               Source: "p2"
  FunctionDefinition "log" - const
     Source: "function log(string memory p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool)\", p0, p1, p2));\n\t}"
    ParameterList
       Source: "(string memory p0, address p1, bool p2)"
      VariableDeclaration "p0"
         Type: string memory
         Source: "string memory p0"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p1"
         Type: address
         Source: "address p1"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p2"
         Type: bool
         Source: "bool p2"
        ElementaryTypeName bool
           Source: "bool"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool)\", p0, p1, p2));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool)\", p0, p1, p2))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool)\", p0, p1, p2))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(string,address,bool)\", p0, p1, p2)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(string,address,bool)
               Type: literal_string "log(string,address,bool)"
               Source: "\"log(string,address,bool)\""
            Identifier p0
               Type: string memory
               Source: "p0"
            Identifier p1
               Type: address
               Source: "p1"
            Identifier p2
               Type: bool
               Source: "p2"
  FunctionDefinition "log" - const
     Source: "function log(string memory p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address)\", p0, p1, p2));\n\t}"
    ParameterList
       Source: "(string memory p0, address p1, address p2)"
      VariableDeclaration "p0"
         Type: string memory
         Source: "string memory p0"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p1"
         Type: address
         Source: "address p1"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p2"
         Type: address
         Source: "address p2"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address)\", p0, p1, p2));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address)\", p0, p1, p2))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address)\", p0, p1, p2))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(string,address,address)\", p0, p1, p2)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(string,address,address)
               Type: literal_string "log(string,address,address)"
               Source: "\"log(string,address,address)\""
            Identifier p0
               Type: string memory
               Source: "p0"
            Identifier p1
               Type: address
               Source: "p1"
            Identifier p2
               Type: address
               Source: "p2"
  FunctionDefinition "log" - const
     Source: "function log(bool p0, uint256 p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256)\", p0, p1, p2));\n\t}"
    ParameterList
       Source: "(bool p0, uint256 p1, uint256 p2)"
      VariableDeclaration "p0"
         Type: bool
         Source: "bool p0"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p1"
         Type: uint256
         Source: "uint256 p1"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p2"
         Type: uint256
         Source: "uint256 p2"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256)\", p0, p1, p2));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256)\", p0, p1, p2))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256)\", p0, p1, p2))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(bool,uint256,uint256)\", p0, p1, p2)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(bool,uint256,uint256)
               Type: literal_string "log(bool,uint256,uint256)"
               Source: "\"log(bool,uint256,uint256)\""
            Identifier p0
               Type: bool
               Source: "p0"
            Identifier p1
               Type: uint256
               Source: "p1"
            Identifier p2
               Type: uint256
               Source: "p2"
  FunctionDefinition "log" - const
     Source: "function log(bool p0, uint256 p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string)\", p0, p1, p2));\n\t}"
    ParameterList
       Source: "(bool p0, uint256 p1, string memory p2)"
      VariableDeclaration "p0"
         Type: bool
         Source: "bool p0"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p1"
         Type: uint256
         Source: "uint256 p1"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p2"
         Type: string memory
         Source: "string memory p2"
        ElementaryTypeName string
           Source: "string"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string)\", p0, p1, p2));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string)\", p0, p1, p2))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string)\", p0, p1, p2))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(bool,uint256,string)\", p0, p1, p2)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(bool,uint256,string)
               Type: literal_string "log(bool,uint256,string)"
               Source: "\"log(bool,uint256,string)\""
            Identifier p0
               Type: bool
               Source: "p0"
            Identifier p1
               Type: uint256
               Source: "p1"
            Identifier p2
               Type: string memory
               Source: "p2"
  FunctionDefinition "log" - const
     Source: "function log(bool p0, uint256 p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool)\", p0, p1, p2));\n\t}"
    ParameterList
       Source: "(bool p0, uint256 p1, bool p2)"
      VariableDeclaration "p0"
         Type: bool
         Source: "bool p0"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p1"
         Type: uint256
         Source: "uint256 p1"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p2"
         Type: bool
         Source: "bool p2"
        ElementaryTypeName bool
           Source: "bool"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool)\", p0, p1, p2));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool)\", p0, p1, p2))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool)\", p0, p1, p2))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(bool,uint256,bool)\", p0, p1, p2)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(bool,uint256,bool)
               Type: literal_string "log(bool,uint256,bool)"
               Source: "\"log(bool,uint256,bool)\""
            Identifier p0
               Type: bool
               Source: "p0"
            Identifier p1
               Type: uint256
               Source: "p1"
            Identifier p2
               Type: bool
               Source: "p2"
  FunctionDefinition "log" - const
     Source: "function log(bool p0, uint256 p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address)\", p0, p1, p2));\n\t}"
    ParameterList
       Source: "(bool p0, uint256 p1, address p2)"
      VariableDeclaration "p0"
         Type: bool
         Source: "bool p0"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p1"
         Type: uint256
         Source: "uint256 p1"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p2"
         Type: address
         Source: "address p2"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address)\", p0, p1, p2));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address)\", p0, p1, p2))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address)\", p0, p1, p2))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(bool,uint256,address)\", p0, p1, p2)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(bool,uint256,address)
               Type: literal_string "log(bool,uint256,address)"
               Source: "\"log(bool,uint256,address)\""
            Identifier p0
               Type: bool
               Source: "p0"
            Identifier p1
               Type: uint256
               Source: "p1"
            Identifier p2
               Type: address
               Source: "p2"
  FunctionDefinition "log" - const
     Source: "function log(bool p0, string memory p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256)\", p0, p1, p2));\n\t}"
    ParameterList
       Source: "(bool p0, string memory p1, uint256 p2)"
      VariableDeclaration "p0"
         Type: bool
         Source: "bool p0"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p1"
         Type: string memory
         Source: "string memory p1"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p2"
         Type: uint256
         Source: "uint256 p2"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256)\", p0, p1, p2));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256)\", p0, p1, p2))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256)\", p0, p1, p2))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(bool,string,uint256)\", p0, p1, p2)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(bool,string,uint256)
               Type: literal_string "log(bool,string,uint256)"
               Source: "\"log(bool,string,uint256)\""
            Identifier p0
               Type: bool
               Source: "p0"
            Identifier p1
               Type: string memory
               Source: "p1"
            Identifier p2
               Type: uint256
               Source: "p2"
  FunctionDefinition "log" - const
     Source: "function log(bool p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string)\", p0, p1, p2));\n\t}"
    ParameterList
       Source: "(bool p0, string memory p1, string memory p2)"
      VariableDeclaration "p0"
         Type: bool
         Source: "bool p0"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p1"
         Type: string memory
         Source: "string memory p1"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p2"
         Type: string memory
         Source: "string memory p2"
        ElementaryTypeName string
           Source: "string"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string)\", p0, p1, p2));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string)\", p0, p1, p2))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string)\", p0, p1, p2))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(bool,string,string)\", p0, p1, p2)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(bool,string,string)
               Type: literal_string "log(bool,string,string)"
               Source: "\"log(bool,string,string)\""
            Identifier p0
               Type: bool
               Source: "p0"
            Identifier p1
               Type: string memory
               Source: "p1"
            Identifier p2
               Type: string memory
               Source: "p2"
  FunctionDefinition "log" - const
     Source: "function log(bool p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool)\", p0, p1, p2));\n\t}"
    ParameterList
       Source: "(bool p0, string memory p1, bool p2)"
      VariableDeclaration "p0"
         Type: bool
         Source: "bool p0"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p1"
         Type: string memory
         Source: "string memory p1"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p2"
         Type: bool
         Source: "bool p2"
        ElementaryTypeName bool
           Source: "bool"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool)\", p0, p1, p2));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool)\", p0, p1, p2))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool)\", p0, p1, p2))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(bool,string,bool)\", p0, p1, p2)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(bool,string,bool)
               Type: literal_string "log(bool,string,bool)"
               Source: "\"log(bool,string,bool)\""
            Identifier p0
               Type: bool
               Source: "p0"
            Identifier p1
               Type: string memory
               Source: "p1"
            Identifier p2
               Type: bool
               Source: "p2"
  FunctionDefinition "log" - const
     Source: "function log(bool p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address)\", p0, p1, p2));\n\t}"
    ParameterList
       Source: "(bool p0, string memory p1, address p2)"
      VariableDeclaration "p0"
         Type: bool
         Source: "bool p0"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p1"
         Type: string memory
         Source: "string memory p1"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p2"
         Type: address
         Source: "address p2"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address)\", p0, p1, p2));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address)\", p0, p1, p2))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address)\", p0, p1, p2))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(bool,string,address)\", p0, p1, p2)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(bool,string,address)
               Type: literal_string "log(bool,string,address)"
               Source: "\"log(bool,string,address)\""
            Identifier p0
               Type: bool
               Source: "p0"
            Identifier p1
               Type: string memory
               Source: "p1"
            Identifier p2
               Type: address
               Source: "p2"
  FunctionDefinition "log" - const
     Source: "function log(bool p0, bool p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256)\", p0, p1, p2));\n\t}"
    ParameterList
       Source: "(bool p0, bool p1, uint256 p2)"
      VariableDeclaration "p0"
         Type: bool
         Source: "bool p0"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p1"
         Type: bool
         Source: "bool p1"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p2"
         Type: uint256
         Source: "uint256 p2"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256)\", p0, p1, p2));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256)\", p0, p1, p2))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256)\", p0, p1, p2))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(bool,bool,uint256)\", p0, p1, p2)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(bool,bool,uint256)
               Type: literal_string "log(bool,bool,uint256)"
               Source: "\"log(bool,bool,uint256)\""
            Identifier p0
               Type: bool
               Source: "p0"
            Identifier p1
               Type: bool
               Source: "p1"
            Identifier p2
               Type: uint256
               Source: "p2"
  FunctionDefinition "log" - const
     Source: "function log(bool p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string)\", p0, p1, p2));\n\t}"
    ParameterList
       Source: "(bool p0, bool p1, string memory p2)"
      VariableDeclaration "p0"
         Type: bool
         Source: "bool p0"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p1"
         Type: bool
         Source: "bool p1"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p2"
         Type: string memory
         Source: "string memory p2"
        ElementaryTypeName string
           Source: "string"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string)\", p0, p1, p2));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string)\", p0, p1, p2))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string)\", p0, p1, p2))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(bool,bool,string)\", p0, p1, p2)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(bool,bool,string)
               Type: literal_string "log(bool,bool,string)"
               Source: "\"log(bool,bool,string)\""
            Identifier p0
               Type: bool
               Source: "p0"
            Identifier p1
               Type: bool
               Source: "p1"
            Identifier p2
               Type: string memory
               Source: "p2"
  FunctionDefinition "log" - const
     Source: "function log(bool p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool)\", p0, p1, p2));\n\t}"
    ParameterList
       Source: "(bool p0, bool p1, bool p2)"
      VariableDeclaration "p0"
         Type: bool
         Source: "bool p0"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p1"
         Type: bool
         Source: "bool p1"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p2"
         Type: bool
         Source: "bool p2"
        ElementaryTypeName bool
           Source: "bool"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool)\", p0, p1, p2));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool)\", p0, p1, p2))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool)\", p0, p1, p2))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(bool,bool,bool)\", p0, p1, p2)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(bool,bool,bool)
               Type: literal_string "log(bool,bool,bool)"
               Source: "\"log(bool,bool,bool)\""
            Identifier p0
               Type: bool
               Source: "p0"
            Identifier p1
               Type: bool
               Source: "p1"
            Identifier p2
               Type: bool
               Source: "p2"
  FunctionDefinition "log" - const
     Source: "function log(bool p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address)\", p0, p1, p2));\n\t}"
    ParameterList
       Source: "(bool p0, bool p1, address p2)"
      VariableDeclaration "p0"
         Type: bool
         Source: "bool p0"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p1"
         Type: bool
         Source: "bool p1"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p2"
         Type: address
         Source: "address p2"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address)\", p0, p1, p2));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address)\", p0, p1, p2))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address)\", p0, p1, p2))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(bool,bool,address)\", p0, p1, p2)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(bool,bool,address)
               Type: literal_string "log(bool,bool,address)"
               Source: "\"log(bool,bool,address)\""
            Identifier p0
               Type: bool
               Source: "p0"
            Identifier p1
               Type: bool
               Source: "p1"
            Identifier p2
               Type: address
               Source: "p2"
  FunctionDefinition "log" - const
     Source: "function log(bool p0, address p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256)\", p0, p1, p2));\n\t}"
    ParameterList
       Source: "(bool p0, address p1, uint256 p2)"
      VariableDeclaration "p0"
         Type: bool
         Source: "bool p0"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p1"
         Type: address
         Source: "address p1"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p2"
         Type: uint256
         Source: "uint256 p2"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256)\", p0, p1, p2));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256)\", p0, p1, p2))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256)\", p0, p1, p2))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(bool,address,uint256)\", p0, p1, p2)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(bool,address,uint256)
               Type: literal_string "log(bool,address,uint256)"
               Source: "\"log(bool,address,uint256)\""
            Identifier p0
               Type: bool
               Source: "p0"
            Identifier p1
               Type: address
               Source: "p1"
            Identifier p2
               Type: uint256
               Source: "p2"
  FunctionDefinition "log" - const
     Source: "function log(bool p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string)\", p0, p1, p2));\n\t}"
    ParameterList
       Source: "(bool p0, address p1, string memory p2)"
      VariableDeclaration "p0"
         Type: bool
         Source: "bool p0"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p1"
         Type: address
         Source: "address p1"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p2"
         Type: string memory
         Source: "string memory p2"
        ElementaryTypeName string
           Source: "string"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string)\", p0, p1, p2));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string)\", p0, p1, p2))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string)\", p0, p1, p2))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(bool,address,string)\", p0, p1, p2)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(bool,address,string)
               Type: literal_string "log(bool,address,string)"
               Source: "\"log(bool,address,string)\""
            Identifier p0
               Type: bool
               Source: "p0"
            Identifier p1
               Type: address
               Source: "p1"
            Identifier p2
               Type: string memory
               Source: "p2"
  FunctionDefinition "log" - const
     Source: "function log(bool p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool)\", p0, p1, p2));\n\t}"
    ParameterList
       Source: "(bool p0, address p1, bool p2)"
      VariableDeclaration "p0"
         Type: bool
         Source: "bool p0"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p1"
         Type: address
         Source: "address p1"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p2"
         Type: bool
         Source: "bool p2"
        ElementaryTypeName bool
           Source: "bool"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool)\", p0, p1, p2));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool)\", p0, p1, p2))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool)\", p0, p1, p2))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(bool,address,bool)\", p0, p1, p2)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(bool,address,bool)
               Type: literal_string "log(bool,address,bool)"
               Source: "\"log(bool,address,bool)\""
            Identifier p0
               Type: bool
               Source: "p0"
            Identifier p1
               Type: address
               Source: "p1"
            Identifier p2
               Type: bool
               Source: "p2"
  FunctionDefinition "log" - const
     Source: "function log(bool p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address)\", p0, p1, p2));\n\t}"
    ParameterList
       Source: "(bool p0, address p1, address p2)"
      VariableDeclaration "p0"
         Type: bool
         Source: "bool p0"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p1"
         Type: address
         Source: "address p1"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p2"
         Type: address
         Source: "address p2"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address)\", p0, p1, p2));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address)\", p0, p1, p2))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address)\", p0, p1, p2))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(bool,address,address)\", p0, p1, p2)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(bool,address,address)
               Type: literal_string "log(bool,address,address)"
               Source: "\"log(bool,address,address)\""
            Identifier p0
               Type: bool
               Source: "p0"
            Identifier p1
               Type: address
               Source: "p1"
            Identifier p2
               Type: address
               Source: "p2"
  FunctionDefinition "log" - const
     Source: "function log(address p0, uint256 p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256)\", p0, p1, p2));\n\t}"
    ParameterList
       Source: "(address p0, uint256 p1, uint256 p2)"
      VariableDeclaration "p0"
         Type: address
         Source: "address p0"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p1"
         Type: uint256
         Source: "uint256 p1"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p2"
         Type: uint256
         Source: "uint256 p2"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256)\", p0, p1, p2));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256)\", p0, p1, p2))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256)\", p0, p1, p2))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(address,uint256,uint256)\", p0, p1, p2)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(address,uint256,uint256)
               Type: literal_string "log(address,uint256,uint256)"
               Source: "\"log(address,uint256,uint256)\""
            Identifier p0
               Type: address
               Source: "p0"
            Identifier p1
               Type: uint256
               Source: "p1"
            Identifier p2
               Type: uint256
               Source: "p2"
  FunctionDefinition "log" - const
     Source: "function log(address p0, uint256 p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string)\", p0, p1, p2));\n\t}"
    ParameterList
       Source: "(address p0, uint256 p1, string memory p2)"
      VariableDeclaration "p0"
         Type: address
         Source: "address p0"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p1"
         Type: uint256
         Source: "uint256 p1"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p2"
         Type: string memory
         Source: "string memory p2"
        ElementaryTypeName string
           Source: "string"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string)\", p0, p1, p2));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string)\", p0, p1, p2))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string)\", p0, p1, p2))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(address,uint256,string)\", p0, p1, p2)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(address,uint256,string)
               Type: literal_string "log(address,uint256,string)"
               Source: "\"log(address,uint256,string)\""
            Identifier p0
               Type: address
               Source: "p0"
            Identifier p1
               Type: uint256
               Source: "p1"
            Identifier p2
               Type: string memory
               Source: "p2"
  FunctionDefinition "log" - const
     Source: "function log(address p0, uint256 p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool)\", p0, p1, p2));\n\t}"
    ParameterList
       Source: "(address p0, uint256 p1, bool p2)"
      VariableDeclaration "p0"
         Type: address
         Source: "address p0"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p1"
         Type: uint256
         Source: "uint256 p1"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p2"
         Type: bool
         Source: "bool p2"
        ElementaryTypeName bool
           Source: "bool"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool)\", p0, p1, p2));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool)\", p0, p1, p2))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool)\", p0, p1, p2))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(address,uint256,bool)\", p0, p1, p2)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(address,uint256,bool)
               Type: literal_string "log(address,uint256,bool)"
               Source: "\"log(address,uint256,bool)\""
            Identifier p0
               Type: address
               Source: "p0"
            Identifier p1
               Type: uint256
               Source: "p1"
            Identifier p2
               Type: bool
               Source: "p2"
  FunctionDefinition "log" - const
     Source: "function log(address p0, uint256 p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address)\", p0, p1, p2));\n\t}"
    ParameterList
       Source: "(address p0, uint256 p1, address p2)"
      VariableDeclaration "p0"
         Type: address
         Source: "address p0"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p1"
         Type: uint256
         Source: "uint256 p1"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p2"
         Type: address
         Source: "address p2"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address)\", p0, p1, p2));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address)\", p0, p1, p2))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address)\", p0, p1, p2))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(address,uint256,address)\", p0, p1, p2)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(address,uint256,address)
               Type: literal_string "log(address,uint256,address)"
               Source: "\"log(address,uint256,address)\""
            Identifier p0
               Type: address
               Source: "p0"
            Identifier p1
               Type: uint256
               Source: "p1"
            Identifier p2
               Type: address
               Source: "p2"
  FunctionDefinition "log" - const
     Source: "function log(address p0, string memory p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256)\", p0, p1, p2));\n\t}"
    ParameterList
       Source: "(address p0, string memory p1, uint256 p2)"
      VariableDeclaration "p0"
         Type: address
         Source: "address p0"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p1"
         Type: string memory
         Source: "string memory p1"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p2"
         Type: uint256
         Source: "uint256 p2"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256)\", p0, p1, p2));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256)\", p0, p1, p2))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256)\", p0, p1, p2))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(address,string,uint256)\", p0, p1, p2)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(address,string,uint256)
               Type: literal_string "log(address,string,uint256)"
               Source: "\"log(address,string,uint256)\""
            Identifier p0
               Type: address
               Source: "p0"
            Identifier p1
               Type: string memory
               Source: "p1"
            Identifier p2
               Type: uint256
               Source: "p2"
  FunctionDefinition "log" - const
     Source: "function log(address p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string)\", p0, p1, p2));\n\t}"
    ParameterList
       Source: "(address p0, string memory p1, string memory p2)"
      VariableDeclaration "p0"
         Type: address
         Source: "address p0"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p1"
         Type: string memory
         Source: "string memory p1"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p2"
         Type: string memory
         Source: "string memory p2"
        ElementaryTypeName string
           Source: "string"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string)\", p0, p1, p2));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string)\", p0, p1, p2))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string)\", p0, p1, p2))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(address,string,string)\", p0, p1, p2)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(address,string,string)
               Type: literal_string "log(address,string,string)"
               Source: "\"log(address,string,string)\""
            Identifier p0
               Type: address
               Source: "p0"
            Identifier p1
               Type: string memory
               Source: "p1"
            Identifier p2
               Type: string memory
               Source: "p2"
  FunctionDefinition "log" - const
     Source: "function log(address p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool)\", p0, p1, p2));\n\t}"
    ParameterList
       Source: "(address p0, string memory p1, bool p2)"
      VariableDeclaration "p0"
         Type: address
         Source: "address p0"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p1"
         Type: string memory
         Source: "string memory p1"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p2"
         Type: bool
         Source: "bool p2"
        ElementaryTypeName bool
           Source: "bool"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool)\", p0, p1, p2));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool)\", p0, p1, p2))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool)\", p0, p1, p2))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(address,string,bool)\", p0, p1, p2)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(address,string,bool)
               Type: literal_string "log(address,string,bool)"
               Source: "\"log(address,string,bool)\""
            Identifier p0
               Type: address
               Source: "p0"
            Identifier p1
               Type: string memory
               Source: "p1"
            Identifier p2
               Type: bool
               Source: "p2"
  FunctionDefinition "log" - const
     Source: "function log(address p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address)\", p0, p1, p2));\n\t}"
    ParameterList
       Source: "(address p0, string memory p1, address p2)"
      VariableDeclaration "p0"
         Type: address
         Source: "address p0"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p1"
         Type: string memory
         Source: "string memory p1"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p2"
         Type: address
         Source: "address p2"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address)\", p0, p1, p2));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address)\", p0, p1, p2))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address)\", p0, p1, p2))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(address,string,address)\", p0, p1, p2)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(address,string,address)
               Type: literal_string "log(address,string,address)"
               Source: "\"log(address,string,address)\""
            Identifier p0
               Type: address
               Source: "p0"
            Identifier p1
               Type: string memory
               Source: "p1"
            Identifier p2
               Type: address
               Source: "p2"
  FunctionDefinition "log" - const
     Source: "function log(address p0, bool p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256)\", p0, p1, p2));\n\t}"
    ParameterList
       Source: "(address p0, bool p1, uint256 p2)"
      VariableDeclaration "p0"
         Type: address
         Source: "address p0"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p1"
         Type: bool
         Source: "bool p1"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p2"
         Type: uint256
         Source: "uint256 p2"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256)\", p0, p1, p2));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256)\", p0, p1, p2))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256)\", p0, p1, p2))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(address,bool,uint256)\", p0, p1, p2)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(address,bool,uint256)
               Type: literal_string "log(address,bool,uint256)"
               Source: "\"log(address,bool,uint256)\""
            Identifier p0
               Type: address
               Source: "p0"
            Identifier p1
               Type: bool
               Source: "p1"
            Identifier p2
               Type: uint256
               Source: "p2"
  FunctionDefinition "log" - const
     Source: "function log(address p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string)\", p0, p1, p2));\n\t}"
    ParameterList
       Source: "(address p0, bool p1, string memory p2)"
      VariableDeclaration "p0"
         Type: address
         Source: "address p0"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p1"
         Type: bool
         Source: "bool p1"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p2"
         Type: string memory
         Source: "string memory p2"
        ElementaryTypeName string
           Source: "string"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string)\", p0, p1, p2));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string)\", p0, p1, p2))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string)\", p0, p1, p2))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(address,bool,string)\", p0, p1, p2)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(address,bool,string)
               Type: literal_string "log(address,bool,string)"
               Source: "\"log(address,bool,string)\""
            Identifier p0
               Type: address
               Source: "p0"
            Identifier p1
               Type: bool
               Source: "p1"
            Identifier p2
               Type: string memory
               Source: "p2"
  FunctionDefinition "log" - const
     Source: "function log(address p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool)\", p0, p1, p2));\n\t}"
    ParameterList
       Source: "(address p0, bool p1, bool p2)"
      VariableDeclaration "p0"
         Type: address
         Source: "address p0"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p1"
         Type: bool
         Source: "bool p1"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p2"
         Type: bool
         Source: "bool p2"
        ElementaryTypeName bool
           Source: "bool"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool)\", p0, p1, p2));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool)\", p0, p1, p2))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool)\", p0, p1, p2))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(address,bool,bool)\", p0, p1, p2)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(address,bool,bool)
               Type: literal_string "log(address,bool,bool)"
               Source: "\"log(address,bool,bool)\""
            Identifier p0
               Type: address
               Source: "p0"
            Identifier p1
               Type: bool
               Source: "p1"
            Identifier p2
               Type: bool
               Source: "p2"
  FunctionDefinition "log" - const
     Source: "function log(address p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address)\", p0, p1, p2));\n\t}"
    ParameterList
       Source: "(address p0, bool p1, address p2)"
      VariableDeclaration "p0"
         Type: address
         Source: "address p0"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p1"
         Type: bool
         Source: "bool p1"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p2"
         Type: address
         Source: "address p2"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address)\", p0, p1, p2));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address)\", p0, p1, p2))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address)\", p0, p1, p2))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(address,bool,address)\", p0, p1, p2)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(address,bool,address)
               Type: literal_string "log(address,bool,address)"
               Source: "\"log(address,bool,address)\""
            Identifier p0
               Type: address
               Source: "p0"
            Identifier p1
               Type: bool
               Source: "p1"
            Identifier p2
               Type: address
               Source: "p2"
  FunctionDefinition "log" - const
     Source: "function log(address p0, address p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256)\", p0, p1, p2));\n\t}"
    ParameterList
       Source: "(address p0, address p1, uint256 p2)"
      VariableDeclaration "p0"
         Type: address
         Source: "address p0"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p1"
         Type: address
         Source: "address p1"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p2"
         Type: uint256
         Source: "uint256 p2"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256)\", p0, p1, p2));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256)\", p0, p1, p2))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256)\", p0, p1, p2))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(address,address,uint256)\", p0, p1, p2)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(address,address,uint256)
               Type: literal_string "log(address,address,uint256)"
               Source: "\"log(address,address,uint256)\""
            Identifier p0
               Type: address
               Source: "p0"
            Identifier p1
               Type: address
               Source: "p1"
            Identifier p2
               Type: uint256
               Source: "p2"
  FunctionDefinition "log" - const
     Source: "function log(address p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string)\", p0, p1, p2));\n\t}"
    ParameterList
       Source: "(address p0, address p1, string memory p2)"
      VariableDeclaration "p0"
         Type: address
         Source: "address p0"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p1"
         Type: address
         Source: "address p1"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p2"
         Type: string memory
         Source: "string memory p2"
        ElementaryTypeName string
           Source: "string"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string)\", p0, p1, p2));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string)\", p0, p1, p2))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string)\", p0, p1, p2))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(address,address,string)\", p0, p1, p2)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(address,address,string)
               Type: literal_string "log(address,address,string)"
               Source: "\"log(address,address,string)\""
            Identifier p0
               Type: address
               Source: "p0"
            Identifier p1
               Type: address
               Source: "p1"
            Identifier p2
               Type: string memory
               Source: "p2"
  FunctionDefinition "log" - const
     Source: "function log(address p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool)\", p0, p1, p2));\n\t}"
    ParameterList
       Source: "(address p0, address p1, bool p2)"
      VariableDeclaration "p0"
         Type: address
         Source: "address p0"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p1"
         Type: address
         Source: "address p1"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p2"
         Type: bool
         Source: "bool p2"
        ElementaryTypeName bool
           Source: "bool"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool)\", p0, p1, p2));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool)\", p0, p1, p2))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool)\", p0, p1, p2))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(address,address,bool)\", p0, p1, p2)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(address,address,bool)
               Type: literal_string "log(address,address,bool)"
               Source: "\"log(address,address,bool)\""
            Identifier p0
               Type: address
               Source: "p0"
            Identifier p1
               Type: address
               Source: "p1"
            Identifier p2
               Type: bool
               Source: "p2"
  FunctionDefinition "log" - const
     Source: "function log(address p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address)\", p0, p1, p2));\n\t}"
    ParameterList
       Source: "(address p0, address p1, address p2)"
      VariableDeclaration "p0"
         Type: address
         Source: "address p0"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p1"
         Type: address
         Source: "address p1"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p2"
         Type: address
         Source: "address p2"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address)\", p0, p1, p2));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address)\", p0, p1, p2))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address)\", p0, p1, p2))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(address,address,address)\", p0, p1, p2)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(address,address,address)
               Type: literal_string "log(address,address,address)"
               Source: "\"log(address,address,address)\""
            Identifier p0
               Type: address
               Source: "p0"
            Identifier p1
               Type: address
               Source: "p1"
            Identifier p2
               Type: address
               Source: "p2"
  FunctionDefinition "log" - const
     Source: "function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,uint256)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(uint256 p0, uint256 p1, uint256 p2, uint256 p3)"
      VariableDeclaration "p0"
         Type: uint256
         Source: "uint256 p0"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p1"
         Type: uint256
         Source: "uint256 p1"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p2"
         Type: uint256
         Source: "uint256 p2"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p3"
         Type: uint256
         Source: "uint256 p3"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,uint256)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,uint256)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,uint256)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(uint256,uint256,uint256,uint256)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(uint256,uint256,uint256,uint256)
               Type: literal_string "log(uint256,uint256,uint256,uint256)"
               Source: "\"log(uint256,uint256,uint256,uint256)\""
            Identifier p0
               Type: uint256
               Source: "p0"
            Identifier p1
               Type: uint256
               Source: "p1"
            Identifier p2
               Type: uint256
               Source: "p2"
            Identifier p3
               Type: uint256
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,string)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(uint256 p0, uint256 p1, uint256 p2, string memory p3)"
      VariableDeclaration "p0"
         Type: uint256
         Source: "uint256 p0"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p1"
         Type: uint256
         Source: "uint256 p1"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p2"
         Type: uint256
         Source: "uint256 p2"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p3"
         Type: string memory
         Source: "string memory p3"
        ElementaryTypeName string
           Source: "string"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,string)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,string)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,string)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(uint256,uint256,uint256,string)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(uint256,uint256,uint256,string)
               Type: literal_string "log(uint256,uint256,uint256,string)"
               Source: "\"log(uint256,uint256,uint256,string)\""
            Identifier p0
               Type: uint256
               Source: "p0"
            Identifier p1
               Type: uint256
               Source: "p1"
            Identifier p2
               Type: uint256
               Source: "p2"
            Identifier p3
               Type: string memory
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,bool)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(uint256 p0, uint256 p1, uint256 p2, bool p3)"
      VariableDeclaration "p0"
         Type: uint256
         Source: "uint256 p0"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p1"
         Type: uint256
         Source: "uint256 p1"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p2"
         Type: uint256
         Source: "uint256 p2"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p3"
         Type: bool
         Source: "bool p3"
        ElementaryTypeName bool
           Source: "bool"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,bool)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,bool)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,bool)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(uint256,uint256,uint256,bool)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(uint256,uint256,uint256,bool)
               Type: literal_string "log(uint256,uint256,uint256,bool)"
               Source: "\"log(uint256,uint256,uint256,bool)\""
            Identifier p0
               Type: uint256
               Source: "p0"
            Identifier p1
               Type: uint256
               Source: "p1"
            Identifier p2
               Type: uint256
               Source: "p2"
            Identifier p3
               Type: bool
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,address)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(uint256 p0, uint256 p1, uint256 p2, address p3)"
      VariableDeclaration "p0"
         Type: uint256
         Source: "uint256 p0"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p1"
         Type: uint256
         Source: "uint256 p1"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p2"
         Type: uint256
         Source: "uint256 p2"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p3"
         Type: address
         Source: "address p3"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,address)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,address)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,address)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(uint256,uint256,uint256,address)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(uint256,uint256,uint256,address)
               Type: literal_string "log(uint256,uint256,uint256,address)"
               Source: "\"log(uint256,uint256,uint256,address)\""
            Identifier p0
               Type: uint256
               Source: "p0"
            Identifier p1
               Type: uint256
               Source: "p1"
            Identifier p2
               Type: uint256
               Source: "p2"
            Identifier p3
               Type: address
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,uint256)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(uint256 p0, uint256 p1, string memory p2, uint256 p3)"
      VariableDeclaration "p0"
         Type: uint256
         Source: "uint256 p0"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p1"
         Type: uint256
         Source: "uint256 p1"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p2"
         Type: string memory
         Source: "string memory p2"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p3"
         Type: uint256
         Source: "uint256 p3"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,uint256)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,uint256)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,uint256)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(uint256,uint256,string,uint256)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(uint256,uint256,string,uint256)
               Type: literal_string "log(uint256,uint256,string,uint256)"
               Source: "\"log(uint256,uint256,string,uint256)\""
            Identifier p0
               Type: uint256
               Source: "p0"
            Identifier p1
               Type: uint256
               Source: "p1"
            Identifier p2
               Type: string memory
               Source: "p2"
            Identifier p3
               Type: uint256
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,string)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(uint256 p0, uint256 p1, string memory p2, string memory p3)"
      VariableDeclaration "p0"
         Type: uint256
         Source: "uint256 p0"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p1"
         Type: uint256
         Source: "uint256 p1"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p2"
         Type: string memory
         Source: "string memory p2"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p3"
         Type: string memory
         Source: "string memory p3"
        ElementaryTypeName string
           Source: "string"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,string)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,string)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,string)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(uint256,uint256,string,string)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(uint256,uint256,string,string)
               Type: literal_string "log(uint256,uint256,string,string)"
               Source: "\"log(uint256,uint256,string,string)\""
            Identifier p0
               Type: uint256
               Source: "p0"
            Identifier p1
               Type: uint256
               Source: "p1"
            Identifier p2
               Type: string memory
               Source: "p2"
            Identifier p3
               Type: string memory
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,bool)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(uint256 p0, uint256 p1, string memory p2, bool p3)"
      VariableDeclaration "p0"
         Type: uint256
         Source: "uint256 p0"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p1"
         Type: uint256
         Source: "uint256 p1"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p2"
         Type: string memory
         Source: "string memory p2"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p3"
         Type: bool
         Source: "bool p3"
        ElementaryTypeName bool
           Source: "bool"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,bool)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,bool)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,bool)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(uint256,uint256,string,bool)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(uint256,uint256,string,bool)
               Type: literal_string "log(uint256,uint256,string,bool)"
               Source: "\"log(uint256,uint256,string,bool)\""
            Identifier p0
               Type: uint256
               Source: "p0"
            Identifier p1
               Type: uint256
               Source: "p1"
            Identifier p2
               Type: string memory
               Source: "p2"
            Identifier p3
               Type: bool
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(uint256 p0, uint256 p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,address)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(uint256 p0, uint256 p1, string memory p2, address p3)"
      VariableDeclaration "p0"
         Type: uint256
         Source: "uint256 p0"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p1"
         Type: uint256
         Source: "uint256 p1"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p2"
         Type: string memory
         Source: "string memory p2"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p3"
         Type: address
         Source: "address p3"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,address)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,address)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,address)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(uint256,uint256,string,address)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(uint256,uint256,string,address)
               Type: literal_string "log(uint256,uint256,string,address)"
               Source: "\"log(uint256,uint256,string,address)\""
            Identifier p0
               Type: uint256
               Source: "p0"
            Identifier p1
               Type: uint256
               Source: "p1"
            Identifier p2
               Type: string memory
               Source: "p2"
            Identifier p3
               Type: address
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,uint256)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(uint256 p0, uint256 p1, bool p2, uint256 p3)"
      VariableDeclaration "p0"
         Type: uint256
         Source: "uint256 p0"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p1"
         Type: uint256
         Source: "uint256 p1"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p2"
         Type: bool
         Source: "bool p2"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p3"
         Type: uint256
         Source: "uint256 p3"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,uint256)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,uint256)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,uint256)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(uint256,uint256,bool,uint256)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(uint256,uint256,bool,uint256)
               Type: literal_string "log(uint256,uint256,bool,uint256)"
               Source: "\"log(uint256,uint256,bool,uint256)\""
            Identifier p0
               Type: uint256
               Source: "p0"
            Identifier p1
               Type: uint256
               Source: "p1"
            Identifier p2
               Type: bool
               Source: "p2"
            Identifier p3
               Type: uint256
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,string)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(uint256 p0, uint256 p1, bool p2, string memory p3)"
      VariableDeclaration "p0"
         Type: uint256
         Source: "uint256 p0"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p1"
         Type: uint256
         Source: "uint256 p1"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p2"
         Type: bool
         Source: "bool p2"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p3"
         Type: string memory
         Source: "string memory p3"
        ElementaryTypeName string
           Source: "string"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,string)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,string)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,string)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(uint256,uint256,bool,string)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(uint256,uint256,bool,string)
               Type: literal_string "log(uint256,uint256,bool,string)"
               Source: "\"log(uint256,uint256,bool,string)\""
            Identifier p0
               Type: uint256
               Source: "p0"
            Identifier p1
               Type: uint256
               Source: "p1"
            Identifier p2
               Type: bool
               Source: "p2"
            Identifier p3
               Type: string memory
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(uint256 p0, uint256 p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,bool)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(uint256 p0, uint256 p1, bool p2, bool p3)"
      VariableDeclaration "p0"
         Type: uint256
         Source: "uint256 p0"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p1"
         Type: uint256
         Source: "uint256 p1"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p2"
         Type: bool
         Source: "bool p2"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p3"
         Type: bool
         Source: "bool p3"
        ElementaryTypeName bool
           Source: "bool"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,bool)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,bool)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,bool)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(uint256,uint256,bool,bool)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(uint256,uint256,bool,bool)
               Type: literal_string "log(uint256,uint256,bool,bool)"
               Source: "\"log(uint256,uint256,bool,bool)\""
            Identifier p0
               Type: uint256
               Source: "p0"
            Identifier p1
               Type: uint256
               Source: "p1"
            Identifier p2
               Type: bool
               Source: "p2"
            Identifier p3
               Type: bool
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(uint256 p0, uint256 p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,address)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(uint256 p0, uint256 p1, bool p2, address p3)"
      VariableDeclaration "p0"
         Type: uint256
         Source: "uint256 p0"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p1"
         Type: uint256
         Source: "uint256 p1"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p2"
         Type: bool
         Source: "bool p2"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p3"
         Type: address
         Source: "address p3"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,address)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,address)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,address)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(uint256,uint256,bool,address)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(uint256,uint256,bool,address)
               Type: literal_string "log(uint256,uint256,bool,address)"
               Source: "\"log(uint256,uint256,bool,address)\""
            Identifier p0
               Type: uint256
               Source: "p0"
            Identifier p1
               Type: uint256
               Source: "p1"
            Identifier p2
               Type: bool
               Source: "p2"
            Identifier p3
               Type: address
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,uint256)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(uint256 p0, uint256 p1, address p2, uint256 p3)"
      VariableDeclaration "p0"
         Type: uint256
         Source: "uint256 p0"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p1"
         Type: uint256
         Source: "uint256 p1"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p2"
         Type: address
         Source: "address p2"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p3"
         Type: uint256
         Source: "uint256 p3"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,uint256)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,uint256)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,uint256)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(uint256,uint256,address,uint256)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(uint256,uint256,address,uint256)
               Type: literal_string "log(uint256,uint256,address,uint256)"
               Source: "\"log(uint256,uint256,address,uint256)\""
            Identifier p0
               Type: uint256
               Source: "p0"
            Identifier p1
               Type: uint256
               Source: "p1"
            Identifier p2
               Type: address
               Source: "p2"
            Identifier p3
               Type: uint256
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(uint256 p0, uint256 p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,string)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(uint256 p0, uint256 p1, address p2, string memory p3)"
      VariableDeclaration "p0"
         Type: uint256
         Source: "uint256 p0"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p1"
         Type: uint256
         Source: "uint256 p1"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p2"
         Type: address
         Source: "address p2"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p3"
         Type: string memory
         Source: "string memory p3"
        ElementaryTypeName string
           Source: "string"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,string)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,string)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,string)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(uint256,uint256,address,string)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(uint256,uint256,address,string)
               Type: literal_string "log(uint256,uint256,address,string)"
               Source: "\"log(uint256,uint256,address,string)\""
            Identifier p0
               Type: uint256
               Source: "p0"
            Identifier p1
               Type: uint256
               Source: "p1"
            Identifier p2
               Type: address
               Source: "p2"
            Identifier p3
               Type: string memory
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(uint256 p0, uint256 p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,bool)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(uint256 p0, uint256 p1, address p2, bool p3)"
      VariableDeclaration "p0"
         Type: uint256
         Source: "uint256 p0"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p1"
         Type: uint256
         Source: "uint256 p1"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p2"
         Type: address
         Source: "address p2"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p3"
         Type: bool
         Source: "bool p3"
        ElementaryTypeName bool
           Source: "bool"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,bool)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,bool)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,bool)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(uint256,uint256,address,bool)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(uint256,uint256,address,bool)
               Type: literal_string "log(uint256,uint256,address,bool)"
               Source: "\"log(uint256,uint256,address,bool)\""
            Identifier p0
               Type: uint256
               Source: "p0"
            Identifier p1
               Type: uint256
               Source: "p1"
            Identifier p2
               Type: address
               Source: "p2"
            Identifier p3
               Type: bool
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(uint256 p0, uint256 p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,address)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(uint256 p0, uint256 p1, address p2, address p3)"
      VariableDeclaration "p0"
         Type: uint256
         Source: "uint256 p0"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p1"
         Type: uint256
         Source: "uint256 p1"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p2"
         Type: address
         Source: "address p2"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p3"
         Type: address
         Source: "address p3"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,address)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,address)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,address)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(uint256,uint256,address,address)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(uint256,uint256,address,address)
               Type: literal_string "log(uint256,uint256,address,address)"
               Source: "\"log(uint256,uint256,address,address)\""
            Identifier p0
               Type: uint256
               Source: "p0"
            Identifier p1
               Type: uint256
               Source: "p1"
            Identifier p2
               Type: address
               Source: "p2"
            Identifier p3
               Type: address
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,uint256)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(uint256 p0, string memory p1, uint256 p2, uint256 p3)"
      VariableDeclaration "p0"
         Type: uint256
         Source: "uint256 p0"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p1"
         Type: string memory
         Source: "string memory p1"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p2"
         Type: uint256
         Source: "uint256 p2"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p3"
         Type: uint256
         Source: "uint256 p3"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,uint256)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,uint256)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,uint256)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(uint256,string,uint256,uint256)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(uint256,string,uint256,uint256)
               Type: literal_string "log(uint256,string,uint256,uint256)"
               Source: "\"log(uint256,string,uint256,uint256)\""
            Identifier p0
               Type: uint256
               Source: "p0"
            Identifier p1
               Type: string memory
               Source: "p1"
            Identifier p2
               Type: uint256
               Source: "p2"
            Identifier p3
               Type: uint256
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,string)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(uint256 p0, string memory p1, uint256 p2, string memory p3)"
      VariableDeclaration "p0"
         Type: uint256
         Source: "uint256 p0"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p1"
         Type: string memory
         Source: "string memory p1"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p2"
         Type: uint256
         Source: "uint256 p2"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p3"
         Type: string memory
         Source: "string memory p3"
        ElementaryTypeName string
           Source: "string"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,string)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,string)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,string)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(uint256,string,uint256,string)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(uint256,string,uint256,string)
               Type: literal_string "log(uint256,string,uint256,string)"
               Source: "\"log(uint256,string,uint256,string)\""
            Identifier p0
               Type: uint256
               Source: "p0"
            Identifier p1
               Type: string memory
               Source: "p1"
            Identifier p2
               Type: uint256
               Source: "p2"
            Identifier p3
               Type: string memory
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,bool)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(uint256 p0, string memory p1, uint256 p2, bool p3)"
      VariableDeclaration "p0"
         Type: uint256
         Source: "uint256 p0"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p1"
         Type: string memory
         Source: "string memory p1"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p2"
         Type: uint256
         Source: "uint256 p2"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p3"
         Type: bool
         Source: "bool p3"
        ElementaryTypeName bool
           Source: "bool"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,bool)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,bool)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,bool)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(uint256,string,uint256,bool)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(uint256,string,uint256,bool)
               Type: literal_string "log(uint256,string,uint256,bool)"
               Source: "\"log(uint256,string,uint256,bool)\""
            Identifier p0
               Type: uint256
               Source: "p0"
            Identifier p1
               Type: string memory
               Source: "p1"
            Identifier p2
               Type: uint256
               Source: "p2"
            Identifier p3
               Type: bool
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(uint256 p0, string memory p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,address)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(uint256 p0, string memory p1, uint256 p2, address p3)"
      VariableDeclaration "p0"
         Type: uint256
         Source: "uint256 p0"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p1"
         Type: string memory
         Source: "string memory p1"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p2"
         Type: uint256
         Source: "uint256 p2"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p3"
         Type: address
         Source: "address p3"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,address)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,address)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,address)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(uint256,string,uint256,address)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(uint256,string,uint256,address)
               Type: literal_string "log(uint256,string,uint256,address)"
               Source: "\"log(uint256,string,uint256,address)\""
            Identifier p0
               Type: uint256
               Source: "p0"
            Identifier p1
               Type: string memory
               Source: "p1"
            Identifier p2
               Type: uint256
               Source: "p2"
            Identifier p3
               Type: address
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,uint256)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(uint256 p0, string memory p1, string memory p2, uint256 p3)"
      VariableDeclaration "p0"
         Type: uint256
         Source: "uint256 p0"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p1"
         Type: string memory
         Source: "string memory p1"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p2"
         Type: string memory
         Source: "string memory p2"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p3"
         Type: uint256
         Source: "uint256 p3"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,uint256)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,uint256)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,uint256)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(uint256,string,string,uint256)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(uint256,string,string,uint256)
               Type: literal_string "log(uint256,string,string,uint256)"
               Source: "\"log(uint256,string,string,uint256)\""
            Identifier p0
               Type: uint256
               Source: "p0"
            Identifier p1
               Type: string memory
               Source: "p1"
            Identifier p2
               Type: string memory
               Source: "p2"
            Identifier p3
               Type: uint256
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,string)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(uint256 p0, string memory p1, string memory p2, string memory p3)"
      VariableDeclaration "p0"
         Type: uint256
         Source: "uint256 p0"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p1"
         Type: string memory
         Source: "string memory p1"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p2"
         Type: string memory
         Source: "string memory p2"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p3"
         Type: string memory
         Source: "string memory p3"
        ElementaryTypeName string
           Source: "string"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,string)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,string)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,string)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(uint256,string,string,string)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(uint256,string,string,string)
               Type: literal_string "log(uint256,string,string,string)"
               Source: "\"log(uint256,string,string,string)\""
            Identifier p0
               Type: uint256
               Source: "p0"
            Identifier p1
               Type: string memory
               Source: "p1"
            Identifier p2
               Type: string memory
               Source: "p2"
            Identifier p3
               Type: string memory
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(uint256 p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,bool)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(uint256 p0, string memory p1, string memory p2, bool p3)"
      VariableDeclaration "p0"
         Type: uint256
         Source: "uint256 p0"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p1"
         Type: string memory
         Source: "string memory p1"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p2"
         Type: string memory
         Source: "string memory p2"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p3"
         Type: bool
         Source: "bool p3"
        ElementaryTypeName bool
           Source: "bool"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,bool)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,bool)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,bool)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(uint256,string,string,bool)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(uint256,string,string,bool)
               Type: literal_string "log(uint256,string,string,bool)"
               Source: "\"log(uint256,string,string,bool)\""
            Identifier p0
               Type: uint256
               Source: "p0"
            Identifier p1
               Type: string memory
               Source: "p1"
            Identifier p2
               Type: string memory
               Source: "p2"
            Identifier p3
               Type: bool
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(uint256 p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,address)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(uint256 p0, string memory p1, string memory p2, address p3)"
      VariableDeclaration "p0"
         Type: uint256
         Source: "uint256 p0"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p1"
         Type: string memory
         Source: "string memory p1"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p2"
         Type: string memory
         Source: "string memory p2"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p3"
         Type: address
         Source: "address p3"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,address)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,address)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,address)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(uint256,string,string,address)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(uint256,string,string,address)
               Type: literal_string "log(uint256,string,string,address)"
               Source: "\"log(uint256,string,string,address)\""
            Identifier p0
               Type: uint256
               Source: "p0"
            Identifier p1
               Type: string memory
               Source: "p1"
            Identifier p2
               Type: string memory
               Source: "p2"
            Identifier p3
               Type: address
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,uint256)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(uint256 p0, string memory p1, bool p2, uint256 p3)"
      VariableDeclaration "p0"
         Type: uint256
         Source: "uint256 p0"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p1"
         Type: string memory
         Source: "string memory p1"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p2"
         Type: bool
         Source: "bool p2"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p3"
         Type: uint256
         Source: "uint256 p3"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,uint256)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,uint256)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,uint256)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(uint256,string,bool,uint256)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(uint256,string,bool,uint256)
               Type: literal_string "log(uint256,string,bool,uint256)"
               Source: "\"log(uint256,string,bool,uint256)\""
            Identifier p0
               Type: uint256
               Source: "p0"
            Identifier p1
               Type: string memory
               Source: "p1"
            Identifier p2
               Type: bool
               Source: "p2"
            Identifier p3
               Type: uint256
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(uint256 p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,string)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(uint256 p0, string memory p1, bool p2, string memory p3)"
      VariableDeclaration "p0"
         Type: uint256
         Source: "uint256 p0"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p1"
         Type: string memory
         Source: "string memory p1"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p2"
         Type: bool
         Source: "bool p2"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p3"
         Type: string memory
         Source: "string memory p3"
        ElementaryTypeName string
           Source: "string"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,string)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,string)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,string)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(uint256,string,bool,string)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(uint256,string,bool,string)
               Type: literal_string "log(uint256,string,bool,string)"
               Source: "\"log(uint256,string,bool,string)\""
            Identifier p0
               Type: uint256
               Source: "p0"
            Identifier p1
               Type: string memory
               Source: "p1"
            Identifier p2
               Type: bool
               Source: "p2"
            Identifier p3
               Type: string memory
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(uint256 p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,bool)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(uint256 p0, string memory p1, bool p2, bool p3)"
      VariableDeclaration "p0"
         Type: uint256
         Source: "uint256 p0"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p1"
         Type: string memory
         Source: "string memory p1"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p2"
         Type: bool
         Source: "bool p2"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p3"
         Type: bool
         Source: "bool p3"
        ElementaryTypeName bool
           Source: "bool"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,bool)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,bool)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,bool)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(uint256,string,bool,bool)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(uint256,string,bool,bool)
               Type: literal_string "log(uint256,string,bool,bool)"
               Source: "\"log(uint256,string,bool,bool)\""
            Identifier p0
               Type: uint256
               Source: "p0"
            Identifier p1
               Type: string memory
               Source: "p1"
            Identifier p2
               Type: bool
               Source: "p2"
            Identifier p3
               Type: bool
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(uint256 p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,address)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(uint256 p0, string memory p1, bool p2, address p3)"
      VariableDeclaration "p0"
         Type: uint256
         Source: "uint256 p0"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p1"
         Type: string memory
         Source: "string memory p1"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p2"
         Type: bool
         Source: "bool p2"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p3"
         Type: address
         Source: "address p3"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,address)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,address)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,address)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(uint256,string,bool,address)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(uint256,string,bool,address)
               Type: literal_string "log(uint256,string,bool,address)"
               Source: "\"log(uint256,string,bool,address)\""
            Identifier p0
               Type: uint256
               Source: "p0"
            Identifier p1
               Type: string memory
               Source: "p1"
            Identifier p2
               Type: bool
               Source: "p2"
            Identifier p3
               Type: address
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(uint256 p0, string memory p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,uint256)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(uint256 p0, string memory p1, address p2, uint256 p3)"
      VariableDeclaration "p0"
         Type: uint256
         Source: "uint256 p0"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p1"
         Type: string memory
         Source: "string memory p1"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p2"
         Type: address
         Source: "address p2"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p3"
         Type: uint256
         Source: "uint256 p3"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,uint256)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,uint256)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,uint256)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(uint256,string,address,uint256)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(uint256,string,address,uint256)
               Type: literal_string "log(uint256,string,address,uint256)"
               Source: "\"log(uint256,string,address,uint256)\""
            Identifier p0
               Type: uint256
               Source: "p0"
            Identifier p1
               Type: string memory
               Source: "p1"
            Identifier p2
               Type: address
               Source: "p2"
            Identifier p3
               Type: uint256
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(uint256 p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,string)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(uint256 p0, string memory p1, address p2, string memory p3)"
      VariableDeclaration "p0"
         Type: uint256
         Source: "uint256 p0"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p1"
         Type: string memory
         Source: "string memory p1"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p2"
         Type: address
         Source: "address p2"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p3"
         Type: string memory
         Source: "string memory p3"
        ElementaryTypeName string
           Source: "string"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,string)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,string)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,string)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(uint256,string,address,string)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(uint256,string,address,string)
               Type: literal_string "log(uint256,string,address,string)"
               Source: "\"log(uint256,string,address,string)\""
            Identifier p0
               Type: uint256
               Source: "p0"
            Identifier p1
               Type: string memory
               Source: "p1"
            Identifier p2
               Type: address
               Source: "p2"
            Identifier p3
               Type: string memory
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(uint256 p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,bool)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(uint256 p0, string memory p1, address p2, bool p3)"
      VariableDeclaration "p0"
         Type: uint256
         Source: "uint256 p0"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p1"
         Type: string memory
         Source: "string memory p1"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p2"
         Type: address
         Source: "address p2"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p3"
         Type: bool
         Source: "bool p3"
        ElementaryTypeName bool
           Source: "bool"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,bool)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,bool)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,bool)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(uint256,string,address,bool)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(uint256,string,address,bool)
               Type: literal_string "log(uint256,string,address,bool)"
               Source: "\"log(uint256,string,address,bool)\""
            Identifier p0
               Type: uint256
               Source: "p0"
            Identifier p1
               Type: string memory
               Source: "p1"
            Identifier p2
               Type: address
               Source: "p2"
            Identifier p3
               Type: bool
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(uint256 p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,address)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(uint256 p0, string memory p1, address p2, address p3)"
      VariableDeclaration "p0"
         Type: uint256
         Source: "uint256 p0"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p1"
         Type: string memory
         Source: "string memory p1"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p2"
         Type: address
         Source: "address p2"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p3"
         Type: address
         Source: "address p3"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,address)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,address)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,address)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(uint256,string,address,address)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(uint256,string,address,address)
               Type: literal_string "log(uint256,string,address,address)"
               Source: "\"log(uint256,string,address,address)\""
            Identifier p0
               Type: uint256
               Source: "p0"
            Identifier p1
               Type: string memory
               Source: "p1"
            Identifier p2
               Type: address
               Source: "p2"
            Identifier p3
               Type: address
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,uint256)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(uint256 p0, bool p1, uint256 p2, uint256 p3)"
      VariableDeclaration "p0"
         Type: uint256
         Source: "uint256 p0"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p1"
         Type: bool
         Source: "bool p1"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p2"
         Type: uint256
         Source: "uint256 p2"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p3"
         Type: uint256
         Source: "uint256 p3"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,uint256)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,uint256)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,uint256)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(uint256,bool,uint256,uint256)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(uint256,bool,uint256,uint256)
               Type: literal_string "log(uint256,bool,uint256,uint256)"
               Source: "\"log(uint256,bool,uint256,uint256)\""
            Identifier p0
               Type: uint256
               Source: "p0"
            Identifier p1
               Type: bool
               Source: "p1"
            Identifier p2
               Type: uint256
               Source: "p2"
            Identifier p3
               Type: uint256
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,string)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(uint256 p0, bool p1, uint256 p2, string memory p3)"
      VariableDeclaration "p0"
         Type: uint256
         Source: "uint256 p0"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p1"
         Type: bool
         Source: "bool p1"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p2"
         Type: uint256
         Source: "uint256 p2"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p3"
         Type: string memory
         Source: "string memory p3"
        ElementaryTypeName string
           Source: "string"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,string)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,string)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,string)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(uint256,bool,uint256,string)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(uint256,bool,uint256,string)
               Type: literal_string "log(uint256,bool,uint256,string)"
               Source: "\"log(uint256,bool,uint256,string)\""
            Identifier p0
               Type: uint256
               Source: "p0"
            Identifier p1
               Type: bool
               Source: "p1"
            Identifier p2
               Type: uint256
               Source: "p2"
            Identifier p3
               Type: string memory
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(uint256 p0, bool p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,bool)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(uint256 p0, bool p1, uint256 p2, bool p3)"
      VariableDeclaration "p0"
         Type: uint256
         Source: "uint256 p0"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p1"
         Type: bool
         Source: "bool p1"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p2"
         Type: uint256
         Source: "uint256 p2"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p3"
         Type: bool
         Source: "bool p3"
        ElementaryTypeName bool
           Source: "bool"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,bool)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,bool)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,bool)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(uint256,bool,uint256,bool)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(uint256,bool,uint256,bool)
               Type: literal_string "log(uint256,bool,uint256,bool)"
               Source: "\"log(uint256,bool,uint256,bool)\""
            Identifier p0
               Type: uint256
               Source: "p0"
            Identifier p1
               Type: bool
               Source: "p1"
            Identifier p2
               Type: uint256
               Source: "p2"
            Identifier p3
               Type: bool
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(uint256 p0, bool p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,address)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(uint256 p0, bool p1, uint256 p2, address p3)"
      VariableDeclaration "p0"
         Type: uint256
         Source: "uint256 p0"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p1"
         Type: bool
         Source: "bool p1"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p2"
         Type: uint256
         Source: "uint256 p2"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p3"
         Type: address
         Source: "address p3"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,address)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,address)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,address)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(uint256,bool,uint256,address)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(uint256,bool,uint256,address)
               Type: literal_string "log(uint256,bool,uint256,address)"
               Source: "\"log(uint256,bool,uint256,address)\""
            Identifier p0
               Type: uint256
               Source: "p0"
            Identifier p1
               Type: bool
               Source: "p1"
            Identifier p2
               Type: uint256
               Source: "p2"
            Identifier p3
               Type: address
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,uint256)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(uint256 p0, bool p1, string memory p2, uint256 p3)"
      VariableDeclaration "p0"
         Type: uint256
         Source: "uint256 p0"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p1"
         Type: bool
         Source: "bool p1"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p2"
         Type: string memory
         Source: "string memory p2"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p3"
         Type: uint256
         Source: "uint256 p3"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,uint256)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,uint256)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,uint256)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(uint256,bool,string,uint256)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(uint256,bool,string,uint256)
               Type: literal_string "log(uint256,bool,string,uint256)"
               Source: "\"log(uint256,bool,string,uint256)\""
            Identifier p0
               Type: uint256
               Source: "p0"
            Identifier p1
               Type: bool
               Source: "p1"
            Identifier p2
               Type: string memory
               Source: "p2"
            Identifier p3
               Type: uint256
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(uint256 p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,string)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(uint256 p0, bool p1, string memory p2, string memory p3)"
      VariableDeclaration "p0"
         Type: uint256
         Source: "uint256 p0"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p1"
         Type: bool
         Source: "bool p1"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p2"
         Type: string memory
         Source: "string memory p2"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p3"
         Type: string memory
         Source: "string memory p3"
        ElementaryTypeName string
           Source: "string"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,string)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,string)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,string)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(uint256,bool,string,string)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(uint256,bool,string,string)
               Type: literal_string "log(uint256,bool,string,string)"
               Source: "\"log(uint256,bool,string,string)\""
            Identifier p0
               Type: uint256
               Source: "p0"
            Identifier p1
               Type: bool
               Source: "p1"
            Identifier p2
               Type: string memory
               Source: "p2"
            Identifier p3
               Type: string memory
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(uint256 p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,bool)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(uint256 p0, bool p1, string memory p2, bool p3)"
      VariableDeclaration "p0"
         Type: uint256
         Source: "uint256 p0"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p1"
         Type: bool
         Source: "bool p1"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p2"
         Type: string memory
         Source: "string memory p2"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p3"
         Type: bool
         Source: "bool p3"
        ElementaryTypeName bool
           Source: "bool"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,bool)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,bool)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,bool)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(uint256,bool,string,bool)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(uint256,bool,string,bool)
               Type: literal_string "log(uint256,bool,string,bool)"
               Source: "\"log(uint256,bool,string,bool)\""
            Identifier p0
               Type: uint256
               Source: "p0"
            Identifier p1
               Type: bool
               Source: "p1"
            Identifier p2
               Type: string memory
               Source: "p2"
            Identifier p3
               Type: bool
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(uint256 p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,address)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(uint256 p0, bool p1, string memory p2, address p3)"
      VariableDeclaration "p0"
         Type: uint256
         Source: "uint256 p0"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p1"
         Type: bool
         Source: "bool p1"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p2"
         Type: string memory
         Source: "string memory p2"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p3"
         Type: address
         Source: "address p3"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,address)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,address)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,address)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(uint256,bool,string,address)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(uint256,bool,string,address)
               Type: literal_string "log(uint256,bool,string,address)"
               Source: "\"log(uint256,bool,string,address)\""
            Identifier p0
               Type: uint256
               Source: "p0"
            Identifier p1
               Type: bool
               Source: "p1"
            Identifier p2
               Type: string memory
               Source: "p2"
            Identifier p3
               Type: address
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(uint256 p0, bool p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,uint256)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(uint256 p0, bool p1, bool p2, uint256 p3)"
      VariableDeclaration "p0"
         Type: uint256
         Source: "uint256 p0"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p1"
         Type: bool
         Source: "bool p1"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p2"
         Type: bool
         Source: "bool p2"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p3"
         Type: uint256
         Source: "uint256 p3"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,uint256)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,uint256)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,uint256)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(uint256,bool,bool,uint256)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(uint256,bool,bool,uint256)
               Type: literal_string "log(uint256,bool,bool,uint256)"
               Source: "\"log(uint256,bool,bool,uint256)\""
            Identifier p0
               Type: uint256
               Source: "p0"
            Identifier p1
               Type: bool
               Source: "p1"
            Identifier p2
               Type: bool
               Source: "p2"
            Identifier p3
               Type: uint256
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(uint256 p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,string)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(uint256 p0, bool p1, bool p2, string memory p3)"
      VariableDeclaration "p0"
         Type: uint256
         Source: "uint256 p0"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p1"
         Type: bool
         Source: "bool p1"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p2"
         Type: bool
         Source: "bool p2"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p3"
         Type: string memory
         Source: "string memory p3"
        ElementaryTypeName string
           Source: "string"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,string)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,string)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,string)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(uint256,bool,bool,string)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(uint256,bool,bool,string)
               Type: literal_string "log(uint256,bool,bool,string)"
               Source: "\"log(uint256,bool,bool,string)\""
            Identifier p0
               Type: uint256
               Source: "p0"
            Identifier p1
               Type: bool
               Source: "p1"
            Identifier p2
               Type: bool
               Source: "p2"
            Identifier p3
               Type: string memory
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(uint256 p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,bool)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(uint256 p0, bool p1, bool p2, bool p3)"
      VariableDeclaration "p0"
         Type: uint256
         Source: "uint256 p0"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p1"
         Type: bool
         Source: "bool p1"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p2"
         Type: bool
         Source: "bool p2"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p3"
         Type: bool
         Source: "bool p3"
        ElementaryTypeName bool
           Source: "bool"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,bool)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,bool)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,bool)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(uint256,bool,bool,bool)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(uint256,bool,bool,bool)
               Type: literal_string "log(uint256,bool,bool,bool)"
               Source: "\"log(uint256,bool,bool,bool)\""
            Identifier p0
               Type: uint256
               Source: "p0"
            Identifier p1
               Type: bool
               Source: "p1"
            Identifier p2
               Type: bool
               Source: "p2"
            Identifier p3
               Type: bool
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(uint256 p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,address)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(uint256 p0, bool p1, bool p2, address p3)"
      VariableDeclaration "p0"
         Type: uint256
         Source: "uint256 p0"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p1"
         Type: bool
         Source: "bool p1"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p2"
         Type: bool
         Source: "bool p2"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p3"
         Type: address
         Source: "address p3"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,address)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,address)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,address)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(uint256,bool,bool,address)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(uint256,bool,bool,address)
               Type: literal_string "log(uint256,bool,bool,address)"
               Source: "\"log(uint256,bool,bool,address)\""
            Identifier p0
               Type: uint256
               Source: "p0"
            Identifier p1
               Type: bool
               Source: "p1"
            Identifier p2
               Type: bool
               Source: "p2"
            Identifier p3
               Type: address
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(uint256 p0, bool p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,uint256)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(uint256 p0, bool p1, address p2, uint256 p3)"
      VariableDeclaration "p0"
         Type: uint256
         Source: "uint256 p0"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p1"
         Type: bool
         Source: "bool p1"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p2"
         Type: address
         Source: "address p2"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p3"
         Type: uint256
         Source: "uint256 p3"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,uint256)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,uint256)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,uint256)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(uint256,bool,address,uint256)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(uint256,bool,address,uint256)
               Type: literal_string "log(uint256,bool,address,uint256)"
               Source: "\"log(uint256,bool,address,uint256)\""
            Identifier p0
               Type: uint256
               Source: "p0"
            Identifier p1
               Type: bool
               Source: "p1"
            Identifier p2
               Type: address
               Source: "p2"
            Identifier p3
               Type: uint256
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(uint256 p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,string)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(uint256 p0, bool p1, address p2, string memory p3)"
      VariableDeclaration "p0"
         Type: uint256
         Source: "uint256 p0"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p1"
         Type: bool
         Source: "bool p1"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p2"
         Type: address
         Source: "address p2"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p3"
         Type: string memory
         Source: "string memory p3"
        ElementaryTypeName string
           Source: "string"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,string)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,string)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,string)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(uint256,bool,address,string)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(uint256,bool,address,string)
               Type: literal_string "log(uint256,bool,address,string)"
               Source: "\"log(uint256,bool,address,string)\""
            Identifier p0
               Type: uint256
               Source: "p0"
            Identifier p1
               Type: bool
               Source: "p1"
            Identifier p2
               Type: address
               Source: "p2"
            Identifier p3
               Type: string memory
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(uint256 p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,bool)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(uint256 p0, bool p1, address p2, bool p3)"
      VariableDeclaration "p0"
         Type: uint256
         Source: "uint256 p0"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p1"
         Type: bool
         Source: "bool p1"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p2"
         Type: address
         Source: "address p2"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p3"
         Type: bool
         Source: "bool p3"
        ElementaryTypeName bool
           Source: "bool"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,bool)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,bool)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,bool)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(uint256,bool,address,bool)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(uint256,bool,address,bool)
               Type: literal_string "log(uint256,bool,address,bool)"
               Source: "\"log(uint256,bool,address,bool)\""
            Identifier p0
               Type: uint256
               Source: "p0"
            Identifier p1
               Type: bool
               Source: "p1"
            Identifier p2
               Type: address
               Source: "p2"
            Identifier p3
               Type: bool
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(uint256 p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,address)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(uint256 p0, bool p1, address p2, address p3)"
      VariableDeclaration "p0"
         Type: uint256
         Source: "uint256 p0"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p1"
         Type: bool
         Source: "bool p1"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p2"
         Type: address
         Source: "address p2"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p3"
         Type: address
         Source: "address p3"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,address)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,address)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,address)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(uint256,bool,address,address)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(uint256,bool,address,address)
               Type: literal_string "log(uint256,bool,address,address)"
               Source: "\"log(uint256,bool,address,address)\""
            Identifier p0
               Type: uint256
               Source: "p0"
            Identifier p1
               Type: bool
               Source: "p1"
            Identifier p2
               Type: address
               Source: "p2"
            Identifier p3
               Type: address
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,uint256)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(uint256 p0, address p1, uint256 p2, uint256 p3)"
      VariableDeclaration "p0"
         Type: uint256
         Source: "uint256 p0"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p1"
         Type: address
         Source: "address p1"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p2"
         Type: uint256
         Source: "uint256 p2"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p3"
         Type: uint256
         Source: "uint256 p3"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,uint256)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,uint256)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,uint256)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(uint256,address,uint256,uint256)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(uint256,address,uint256,uint256)
               Type: literal_string "log(uint256,address,uint256,uint256)"
               Source: "\"log(uint256,address,uint256,uint256)\""
            Identifier p0
               Type: uint256
               Source: "p0"
            Identifier p1
               Type: address
               Source: "p1"
            Identifier p2
               Type: uint256
               Source: "p2"
            Identifier p3
               Type: uint256
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(uint256 p0, address p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,string)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(uint256 p0, address p1, uint256 p2, string memory p3)"
      VariableDeclaration "p0"
         Type: uint256
         Source: "uint256 p0"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p1"
         Type: address
         Source: "address p1"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p2"
         Type: uint256
         Source: "uint256 p2"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p3"
         Type: string memory
         Source: "string memory p3"
        ElementaryTypeName string
           Source: "string"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,string)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,string)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,string)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(uint256,address,uint256,string)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(uint256,address,uint256,string)
               Type: literal_string "log(uint256,address,uint256,string)"
               Source: "\"log(uint256,address,uint256,string)\""
            Identifier p0
               Type: uint256
               Source: "p0"
            Identifier p1
               Type: address
               Source: "p1"
            Identifier p2
               Type: uint256
               Source: "p2"
            Identifier p3
               Type: string memory
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(uint256 p0, address p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,bool)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(uint256 p0, address p1, uint256 p2, bool p3)"
      VariableDeclaration "p0"
         Type: uint256
         Source: "uint256 p0"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p1"
         Type: address
         Source: "address p1"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p2"
         Type: uint256
         Source: "uint256 p2"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p3"
         Type: bool
         Source: "bool p3"
        ElementaryTypeName bool
           Source: "bool"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,bool)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,bool)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,bool)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(uint256,address,uint256,bool)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(uint256,address,uint256,bool)
               Type: literal_string "log(uint256,address,uint256,bool)"
               Source: "\"log(uint256,address,uint256,bool)\""
            Identifier p0
               Type: uint256
               Source: "p0"
            Identifier p1
               Type: address
               Source: "p1"
            Identifier p2
               Type: uint256
               Source: "p2"
            Identifier p3
               Type: bool
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(uint256 p0, address p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,address)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(uint256 p0, address p1, uint256 p2, address p3)"
      VariableDeclaration "p0"
         Type: uint256
         Source: "uint256 p0"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p1"
         Type: address
         Source: "address p1"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p2"
         Type: uint256
         Source: "uint256 p2"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p3"
         Type: address
         Source: "address p3"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,address)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,address)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,address)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(uint256,address,uint256,address)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(uint256,address,uint256,address)
               Type: literal_string "log(uint256,address,uint256,address)"
               Source: "\"log(uint256,address,uint256,address)\""
            Identifier p0
               Type: uint256
               Source: "p0"
            Identifier p1
               Type: address
               Source: "p1"
            Identifier p2
               Type: uint256
               Source: "p2"
            Identifier p3
               Type: address
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(uint256 p0, address p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,uint256)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(uint256 p0, address p1, string memory p2, uint256 p3)"
      VariableDeclaration "p0"
         Type: uint256
         Source: "uint256 p0"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p1"
         Type: address
         Source: "address p1"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p2"
         Type: string memory
         Source: "string memory p2"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p3"
         Type: uint256
         Source: "uint256 p3"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,uint256)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,uint256)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,uint256)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(uint256,address,string,uint256)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(uint256,address,string,uint256)
               Type: literal_string "log(uint256,address,string,uint256)"
               Source: "\"log(uint256,address,string,uint256)\""
            Identifier p0
               Type: uint256
               Source: "p0"
            Identifier p1
               Type: address
               Source: "p1"
            Identifier p2
               Type: string memory
               Source: "p2"
            Identifier p3
               Type: uint256
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(uint256 p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,string)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(uint256 p0, address p1, string memory p2, string memory p3)"
      VariableDeclaration "p0"
         Type: uint256
         Source: "uint256 p0"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p1"
         Type: address
         Source: "address p1"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p2"
         Type: string memory
         Source: "string memory p2"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p3"
         Type: string memory
         Source: "string memory p3"
        ElementaryTypeName string
           Source: "string"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,string)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,string)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,string)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(uint256,address,string,string)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(uint256,address,string,string)
               Type: literal_string "log(uint256,address,string,string)"
               Source: "\"log(uint256,address,string,string)\""
            Identifier p0
               Type: uint256
               Source: "p0"
            Identifier p1
               Type: address
               Source: "p1"
            Identifier p2
               Type: string memory
               Source: "p2"
            Identifier p3
               Type: string memory
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(uint256 p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,bool)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(uint256 p0, address p1, string memory p2, bool p3)"
      VariableDeclaration "p0"
         Type: uint256
         Source: "uint256 p0"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p1"
         Type: address
         Source: "address p1"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p2"
         Type: string memory
         Source: "string memory p2"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p3"
         Type: bool
         Source: "bool p3"
        ElementaryTypeName bool
           Source: "bool"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,bool)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,bool)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,bool)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(uint256,address,string,bool)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(uint256,address,string,bool)
               Type: literal_string "log(uint256,address,string,bool)"
               Source: "\"log(uint256,address,string,bool)\""
            Identifier p0
               Type: uint256
               Source: "p0"
            Identifier p1
               Type: address
               Source: "p1"
            Identifier p2
               Type: string memory
               Source: "p2"
            Identifier p3
               Type: bool
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(uint256 p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,address)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(uint256 p0, address p1, string memory p2, address p3)"
      VariableDeclaration "p0"
         Type: uint256
         Source: "uint256 p0"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p1"
         Type: address
         Source: "address p1"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p2"
         Type: string memory
         Source: "string memory p2"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p3"
         Type: address
         Source: "address p3"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,address)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,address)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,address)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(uint256,address,string,address)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(uint256,address,string,address)
               Type: literal_string "log(uint256,address,string,address)"
               Source: "\"log(uint256,address,string,address)\""
            Identifier p0
               Type: uint256
               Source: "p0"
            Identifier p1
               Type: address
               Source: "p1"
            Identifier p2
               Type: string memory
               Source: "p2"
            Identifier p3
               Type: address
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(uint256 p0, address p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,uint256)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(uint256 p0, address p1, bool p2, uint256 p3)"
      VariableDeclaration "p0"
         Type: uint256
         Source: "uint256 p0"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p1"
         Type: address
         Source: "address p1"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p2"
         Type: bool
         Source: "bool p2"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p3"
         Type: uint256
         Source: "uint256 p3"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,uint256)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,uint256)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,uint256)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(uint256,address,bool,uint256)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(uint256,address,bool,uint256)
               Type: literal_string "log(uint256,address,bool,uint256)"
               Source: "\"log(uint256,address,bool,uint256)\""
            Identifier p0
               Type: uint256
               Source: "p0"
            Identifier p1
               Type: address
               Source: "p1"
            Identifier p2
               Type: bool
               Source: "p2"
            Identifier p3
               Type: uint256
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(uint256 p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,string)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(uint256 p0, address p1, bool p2, string memory p3)"
      VariableDeclaration "p0"
         Type: uint256
         Source: "uint256 p0"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p1"
         Type: address
         Source: "address p1"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p2"
         Type: bool
         Source: "bool p2"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p3"
         Type: string memory
         Source: "string memory p3"
        ElementaryTypeName string
           Source: "string"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,string)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,string)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,string)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(uint256,address,bool,string)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(uint256,address,bool,string)
               Type: literal_string "log(uint256,address,bool,string)"
               Source: "\"log(uint256,address,bool,string)\""
            Identifier p0
               Type: uint256
               Source: "p0"
            Identifier p1
               Type: address
               Source: "p1"
            Identifier p2
               Type: bool
               Source: "p2"
            Identifier p3
               Type: string memory
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(uint256 p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,bool)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(uint256 p0, address p1, bool p2, bool p3)"
      VariableDeclaration "p0"
         Type: uint256
         Source: "uint256 p0"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p1"
         Type: address
         Source: "address p1"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p2"
         Type: bool
         Source: "bool p2"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p3"
         Type: bool
         Source: "bool p3"
        ElementaryTypeName bool
           Source: "bool"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,bool)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,bool)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,bool)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(uint256,address,bool,bool)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(uint256,address,bool,bool)
               Type: literal_string "log(uint256,address,bool,bool)"
               Source: "\"log(uint256,address,bool,bool)\""
            Identifier p0
               Type: uint256
               Source: "p0"
            Identifier p1
               Type: address
               Source: "p1"
            Identifier p2
               Type: bool
               Source: "p2"
            Identifier p3
               Type: bool
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(uint256 p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,address)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(uint256 p0, address p1, bool p2, address p3)"
      VariableDeclaration "p0"
         Type: uint256
         Source: "uint256 p0"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p1"
         Type: address
         Source: "address p1"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p2"
         Type: bool
         Source: "bool p2"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p3"
         Type: address
         Source: "address p3"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,address)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,address)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,address)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(uint256,address,bool,address)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(uint256,address,bool,address)
               Type: literal_string "log(uint256,address,bool,address)"
               Source: "\"log(uint256,address,bool,address)\""
            Identifier p0
               Type: uint256
               Source: "p0"
            Identifier p1
               Type: address
               Source: "p1"
            Identifier p2
               Type: bool
               Source: "p2"
            Identifier p3
               Type: address
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(uint256 p0, address p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,uint256)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(uint256 p0, address p1, address p2, uint256 p3)"
      VariableDeclaration "p0"
         Type: uint256
         Source: "uint256 p0"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p1"
         Type: address
         Source: "address p1"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p2"
         Type: address
         Source: "address p2"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p3"
         Type: uint256
         Source: "uint256 p3"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,uint256)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,uint256)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,uint256)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(uint256,address,address,uint256)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(uint256,address,address,uint256)
               Type: literal_string "log(uint256,address,address,uint256)"
               Source: "\"log(uint256,address,address,uint256)\""
            Identifier p0
               Type: uint256
               Source: "p0"
            Identifier p1
               Type: address
               Source: "p1"
            Identifier p2
               Type: address
               Source: "p2"
            Identifier p3
               Type: uint256
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(uint256 p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,string)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(uint256 p0, address p1, address p2, string memory p3)"
      VariableDeclaration "p0"
         Type: uint256
         Source: "uint256 p0"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p1"
         Type: address
         Source: "address p1"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p2"
         Type: address
         Source: "address p2"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p3"
         Type: string memory
         Source: "string memory p3"
        ElementaryTypeName string
           Source: "string"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,string)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,string)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,string)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(uint256,address,address,string)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(uint256,address,address,string)
               Type: literal_string "log(uint256,address,address,string)"
               Source: "\"log(uint256,address,address,string)\""
            Identifier p0
               Type: uint256
               Source: "p0"
            Identifier p1
               Type: address
               Source: "p1"
            Identifier p2
               Type: address
               Source: "p2"
            Identifier p3
               Type: string memory
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(uint256 p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,bool)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(uint256 p0, address p1, address p2, bool p3)"
      VariableDeclaration "p0"
         Type: uint256
         Source: "uint256 p0"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p1"
         Type: address
         Source: "address p1"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p2"
         Type: address
         Source: "address p2"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p3"
         Type: bool
         Source: "bool p3"
        ElementaryTypeName bool
           Source: "bool"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,bool)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,bool)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,bool)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(uint256,address,address,bool)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(uint256,address,address,bool)
               Type: literal_string "log(uint256,address,address,bool)"
               Source: "\"log(uint256,address,address,bool)\""
            Identifier p0
               Type: uint256
               Source: "p0"
            Identifier p1
               Type: address
               Source: "p1"
            Identifier p2
               Type: address
               Source: "p2"
            Identifier p3
               Type: bool
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(uint256 p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,address)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(uint256 p0, address p1, address p2, address p3)"
      VariableDeclaration "p0"
         Type: uint256
         Source: "uint256 p0"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p1"
         Type: address
         Source: "address p1"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p2"
         Type: address
         Source: "address p2"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p3"
         Type: address
         Source: "address p3"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,address)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,address)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,address)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(uint256,address,address,address)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(uint256,address,address,address)
               Type: literal_string "log(uint256,address,address,address)"
               Source: "\"log(uint256,address,address,address)\""
            Identifier p0
               Type: uint256
               Source: "p0"
            Identifier p1
               Type: address
               Source: "p1"
            Identifier p2
               Type: address
               Source: "p2"
            Identifier p3
               Type: address
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,uint256)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(string memory p0, uint256 p1, uint256 p2, uint256 p3)"
      VariableDeclaration "p0"
         Type: string memory
         Source: "string memory p0"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p1"
         Type: uint256
         Source: "uint256 p1"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p2"
         Type: uint256
         Source: "uint256 p2"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p3"
         Type: uint256
         Source: "uint256 p3"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,uint256)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,uint256)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,uint256)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(string,uint256,uint256,uint256)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(string,uint256,uint256,uint256)
               Type: literal_string "log(string,uint256,uint256,uint256)"
               Source: "\"log(string,uint256,uint256,uint256)\""
            Identifier p0
               Type: string memory
               Source: "p0"
            Identifier p1
               Type: uint256
               Source: "p1"
            Identifier p2
               Type: uint256
               Source: "p2"
            Identifier p3
               Type: uint256
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,string)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(string memory p0, uint256 p1, uint256 p2, string memory p3)"
      VariableDeclaration "p0"
         Type: string memory
         Source: "string memory p0"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p1"
         Type: uint256
         Source: "uint256 p1"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p2"
         Type: uint256
         Source: "uint256 p2"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p3"
         Type: string memory
         Source: "string memory p3"
        ElementaryTypeName string
           Source: "string"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,string)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,string)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,string)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(string,uint256,uint256,string)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(string,uint256,uint256,string)
               Type: literal_string "log(string,uint256,uint256,string)"
               Source: "\"log(string,uint256,uint256,string)\""
            Identifier p0
               Type: string memory
               Source: "p0"
            Identifier p1
               Type: uint256
               Source: "p1"
            Identifier p2
               Type: uint256
               Source: "p2"
            Identifier p3
               Type: string memory
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,bool)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(string memory p0, uint256 p1, uint256 p2, bool p3)"
      VariableDeclaration "p0"
         Type: string memory
         Source: "string memory p0"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p1"
         Type: uint256
         Source: "uint256 p1"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p2"
         Type: uint256
         Source: "uint256 p2"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p3"
         Type: bool
         Source: "bool p3"
        ElementaryTypeName bool
           Source: "bool"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,bool)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,bool)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,bool)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(string,uint256,uint256,bool)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(string,uint256,uint256,bool)
               Type: literal_string "log(string,uint256,uint256,bool)"
               Source: "\"log(string,uint256,uint256,bool)\""
            Identifier p0
               Type: string memory
               Source: "p0"
            Identifier p1
               Type: uint256
               Source: "p1"
            Identifier p2
               Type: uint256
               Source: "p2"
            Identifier p3
               Type: bool
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(string memory p0, uint256 p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,address)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(string memory p0, uint256 p1, uint256 p2, address p3)"
      VariableDeclaration "p0"
         Type: string memory
         Source: "string memory p0"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p1"
         Type: uint256
         Source: "uint256 p1"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p2"
         Type: uint256
         Source: "uint256 p2"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p3"
         Type: address
         Source: "address p3"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,address)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,address)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,address)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(string,uint256,uint256,address)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(string,uint256,uint256,address)
               Type: literal_string "log(string,uint256,uint256,address)"
               Source: "\"log(string,uint256,uint256,address)\""
            Identifier p0
               Type: string memory
               Source: "p0"
            Identifier p1
               Type: uint256
               Source: "p1"
            Identifier p2
               Type: uint256
               Source: "p2"
            Identifier p3
               Type: address
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,uint256)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(string memory p0, uint256 p1, string memory p2, uint256 p3)"
      VariableDeclaration "p0"
         Type: string memory
         Source: "string memory p0"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p1"
         Type: uint256
         Source: "uint256 p1"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p2"
         Type: string memory
         Source: "string memory p2"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p3"
         Type: uint256
         Source: "uint256 p3"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,uint256)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,uint256)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,uint256)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(string,uint256,string,uint256)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(string,uint256,string,uint256)
               Type: literal_string "log(string,uint256,string,uint256)"
               Source: "\"log(string,uint256,string,uint256)\""
            Identifier p0
               Type: string memory
               Source: "p0"
            Identifier p1
               Type: uint256
               Source: "p1"
            Identifier p2
               Type: string memory
               Source: "p2"
            Identifier p3
               Type: uint256
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,string)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(string memory p0, uint256 p1, string memory p2, string memory p3)"
      VariableDeclaration "p0"
         Type: string memory
         Source: "string memory p0"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p1"
         Type: uint256
         Source: "uint256 p1"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p2"
         Type: string memory
         Source: "string memory p2"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p3"
         Type: string memory
         Source: "string memory p3"
        ElementaryTypeName string
           Source: "string"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,string)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,string)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,string)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(string,uint256,string,string)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(string,uint256,string,string)
               Type: literal_string "log(string,uint256,string,string)"
               Source: "\"log(string,uint256,string,string)\""
            Identifier p0
               Type: string memory
               Source: "p0"
            Identifier p1
               Type: uint256
               Source: "p1"
            Identifier p2
               Type: string memory
               Source: "p2"
            Identifier p3
               Type: string memory
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(string memory p0, uint256 p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,bool)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(string memory p0, uint256 p1, string memory p2, bool p3)"
      VariableDeclaration "p0"
         Type: string memory
         Source: "string memory p0"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p1"
         Type: uint256
         Source: "uint256 p1"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p2"
         Type: string memory
         Source: "string memory p2"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p3"
         Type: bool
         Source: "bool p3"
        ElementaryTypeName bool
           Source: "bool"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,bool)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,bool)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,bool)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(string,uint256,string,bool)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(string,uint256,string,bool)
               Type: literal_string "log(string,uint256,string,bool)"
               Source: "\"log(string,uint256,string,bool)\""
            Identifier p0
               Type: string memory
               Source: "p0"
            Identifier p1
               Type: uint256
               Source: "p1"
            Identifier p2
               Type: string memory
               Source: "p2"
            Identifier p3
               Type: bool
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(string memory p0, uint256 p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,address)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(string memory p0, uint256 p1, string memory p2, address p3)"
      VariableDeclaration "p0"
         Type: string memory
         Source: "string memory p0"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p1"
         Type: uint256
         Source: "uint256 p1"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p2"
         Type: string memory
         Source: "string memory p2"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p3"
         Type: address
         Source: "address p3"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,address)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,address)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,address)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(string,uint256,string,address)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(string,uint256,string,address)
               Type: literal_string "log(string,uint256,string,address)"
               Source: "\"log(string,uint256,string,address)\""
            Identifier p0
               Type: string memory
               Source: "p0"
            Identifier p1
               Type: uint256
               Source: "p1"
            Identifier p2
               Type: string memory
               Source: "p2"
            Identifier p3
               Type: address
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,uint256)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(string memory p0, uint256 p1, bool p2, uint256 p3)"
      VariableDeclaration "p0"
         Type: string memory
         Source: "string memory p0"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p1"
         Type: uint256
         Source: "uint256 p1"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p2"
         Type: bool
         Source: "bool p2"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p3"
         Type: uint256
         Source: "uint256 p3"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,uint256)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,uint256)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,uint256)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(string,uint256,bool,uint256)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(string,uint256,bool,uint256)
               Type: literal_string "log(string,uint256,bool,uint256)"
               Source: "\"log(string,uint256,bool,uint256)\""
            Identifier p0
               Type: string memory
               Source: "p0"
            Identifier p1
               Type: uint256
               Source: "p1"
            Identifier p2
               Type: bool
               Source: "p2"
            Identifier p3
               Type: uint256
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(string memory p0, uint256 p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,string)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(string memory p0, uint256 p1, bool p2, string memory p3)"
      VariableDeclaration "p0"
         Type: string memory
         Source: "string memory p0"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p1"
         Type: uint256
         Source: "uint256 p1"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p2"
         Type: bool
         Source: "bool p2"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p3"
         Type: string memory
         Source: "string memory p3"
        ElementaryTypeName string
           Source: "string"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,string)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,string)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,string)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(string,uint256,bool,string)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(string,uint256,bool,string)
               Type: literal_string "log(string,uint256,bool,string)"
               Source: "\"log(string,uint256,bool,string)\""
            Identifier p0
               Type: string memory
               Source: "p0"
            Identifier p1
               Type: uint256
               Source: "p1"
            Identifier p2
               Type: bool
               Source: "p2"
            Identifier p3
               Type: string memory
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(string memory p0, uint256 p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,bool)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(string memory p0, uint256 p1, bool p2, bool p3)"
      VariableDeclaration "p0"
         Type: string memory
         Source: "string memory p0"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p1"
         Type: uint256
         Source: "uint256 p1"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p2"
         Type: bool
         Source: "bool p2"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p3"
         Type: bool
         Source: "bool p3"
        ElementaryTypeName bool
           Source: "bool"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,bool)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,bool)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,bool)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(string,uint256,bool,bool)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(string,uint256,bool,bool)
               Type: literal_string "log(string,uint256,bool,bool)"
               Source: "\"log(string,uint256,bool,bool)\""
            Identifier p0
               Type: string memory
               Source: "p0"
            Identifier p1
               Type: uint256
               Source: "p1"
            Identifier p2
               Type: bool
               Source: "p2"
            Identifier p3
               Type: bool
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(string memory p0, uint256 p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,address)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(string memory p0, uint256 p1, bool p2, address p3)"
      VariableDeclaration "p0"
         Type: string memory
         Source: "string memory p0"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p1"
         Type: uint256
         Source: "uint256 p1"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p2"
         Type: bool
         Source: "bool p2"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p3"
         Type: address
         Source: "address p3"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,address)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,address)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,address)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(string,uint256,bool,address)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(string,uint256,bool,address)
               Type: literal_string "log(string,uint256,bool,address)"
               Source: "\"log(string,uint256,bool,address)\""
            Identifier p0
               Type: string memory
               Source: "p0"
            Identifier p1
               Type: uint256
               Source: "p1"
            Identifier p2
               Type: bool
               Source: "p2"
            Identifier p3
               Type: address
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(string memory p0, uint256 p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,uint256)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(string memory p0, uint256 p1, address p2, uint256 p3)"
      VariableDeclaration "p0"
         Type: string memory
         Source: "string memory p0"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p1"
         Type: uint256
         Source: "uint256 p1"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p2"
         Type: address
         Source: "address p2"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p3"
         Type: uint256
         Source: "uint256 p3"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,uint256)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,uint256)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,uint256)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(string,uint256,address,uint256)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(string,uint256,address,uint256)
               Type: literal_string "log(string,uint256,address,uint256)"
               Source: "\"log(string,uint256,address,uint256)\""
            Identifier p0
               Type: string memory
               Source: "p0"
            Identifier p1
               Type: uint256
               Source: "p1"
            Identifier p2
               Type: address
               Source: "p2"
            Identifier p3
               Type: uint256
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(string memory p0, uint256 p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,string)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(string memory p0, uint256 p1, address p2, string memory p3)"
      VariableDeclaration "p0"
         Type: string memory
         Source: "string memory p0"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p1"
         Type: uint256
         Source: "uint256 p1"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p2"
         Type: address
         Source: "address p2"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p3"
         Type: string memory
         Source: "string memory p3"
        ElementaryTypeName string
           Source: "string"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,string)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,string)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,string)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(string,uint256,address,string)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(string,uint256,address,string)
               Type: literal_string "log(string,uint256,address,string)"
               Source: "\"log(string,uint256,address,string)\""
            Identifier p0
               Type: string memory
               Source: "p0"
            Identifier p1
               Type: uint256
               Source: "p1"
            Identifier p2
               Type: address
               Source: "p2"
            Identifier p3
               Type: string memory
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(string memory p0, uint256 p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,bool)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(string memory p0, uint256 p1, address p2, bool p3)"
      VariableDeclaration "p0"
         Type: string memory
         Source: "string memory p0"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p1"
         Type: uint256
         Source: "uint256 p1"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p2"
         Type: address
         Source: "address p2"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p3"
         Type: bool
         Source: "bool p3"
        ElementaryTypeName bool
           Source: "bool"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,bool)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,bool)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,bool)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(string,uint256,address,bool)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(string,uint256,address,bool)
               Type: literal_string "log(string,uint256,address,bool)"
               Source: "\"log(string,uint256,address,bool)\""
            Identifier p0
               Type: string memory
               Source: "p0"
            Identifier p1
               Type: uint256
               Source: "p1"
            Identifier p2
               Type: address
               Source: "p2"
            Identifier p3
               Type: bool
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(string memory p0, uint256 p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,address)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(string memory p0, uint256 p1, address p2, address p3)"
      VariableDeclaration "p0"
         Type: string memory
         Source: "string memory p0"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p1"
         Type: uint256
         Source: "uint256 p1"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p2"
         Type: address
         Source: "address p2"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p3"
         Type: address
         Source: "address p3"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,address)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,address)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,address)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(string,uint256,address,address)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(string,uint256,address,address)
               Type: literal_string "log(string,uint256,address,address)"
               Source: "\"log(string,uint256,address,address)\""
            Identifier p0
               Type: string memory
               Source: "p0"
            Identifier p1
               Type: uint256
               Source: "p1"
            Identifier p2
               Type: address
               Source: "p2"
            Identifier p3
               Type: address
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,uint256)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(string memory p0, string memory p1, uint256 p2, uint256 p3)"
      VariableDeclaration "p0"
         Type: string memory
         Source: "string memory p0"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p1"
         Type: string memory
         Source: "string memory p1"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p2"
         Type: uint256
         Source: "uint256 p2"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p3"
         Type: uint256
         Source: "uint256 p3"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,uint256)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,uint256)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,uint256)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(string,string,uint256,uint256)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(string,string,uint256,uint256)
               Type: literal_string "log(string,string,uint256,uint256)"
               Source: "\"log(string,string,uint256,uint256)\""
            Identifier p0
               Type: string memory
               Source: "p0"
            Identifier p1
               Type: string memory
               Source: "p1"
            Identifier p2
               Type: uint256
               Source: "p2"
            Identifier p3
               Type: uint256
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,string)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(string memory p0, string memory p1, uint256 p2, string memory p3)"
      VariableDeclaration "p0"
         Type: string memory
         Source: "string memory p0"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p1"
         Type: string memory
         Source: "string memory p1"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p2"
         Type: uint256
         Source: "uint256 p2"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p3"
         Type: string memory
         Source: "string memory p3"
        ElementaryTypeName string
           Source: "string"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,string)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,string)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,string)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(string,string,uint256,string)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(string,string,uint256,string)
               Type: literal_string "log(string,string,uint256,string)"
               Source: "\"log(string,string,uint256,string)\""
            Identifier p0
               Type: string memory
               Source: "p0"
            Identifier p1
               Type: string memory
               Source: "p1"
            Identifier p2
               Type: uint256
               Source: "p2"
            Identifier p3
               Type: string memory
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(string memory p0, string memory p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,bool)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(string memory p0, string memory p1, uint256 p2, bool p3)"
      VariableDeclaration "p0"
         Type: string memory
         Source: "string memory p0"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p1"
         Type: string memory
         Source: "string memory p1"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p2"
         Type: uint256
         Source: "uint256 p2"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p3"
         Type: bool
         Source: "bool p3"
        ElementaryTypeName bool
           Source: "bool"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,bool)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,bool)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,bool)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(string,string,uint256,bool)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(string,string,uint256,bool)
               Type: literal_string "log(string,string,uint256,bool)"
               Source: "\"log(string,string,uint256,bool)\""
            Identifier p0
               Type: string memory
               Source: "p0"
            Identifier p1
               Type: string memory
               Source: "p1"
            Identifier p2
               Type: uint256
               Source: "p2"
            Identifier p3
               Type: bool
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(string memory p0, string memory p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,address)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(string memory p0, string memory p1, uint256 p2, address p3)"
      VariableDeclaration "p0"
         Type: string memory
         Source: "string memory p0"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p1"
         Type: string memory
         Source: "string memory p1"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p2"
         Type: uint256
         Source: "uint256 p2"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p3"
         Type: address
         Source: "address p3"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,address)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,address)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,address)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(string,string,uint256,address)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(string,string,uint256,address)
               Type: literal_string "log(string,string,uint256,address)"
               Source: "\"log(string,string,uint256,address)\""
            Identifier p0
               Type: string memory
               Source: "p0"
            Identifier p1
               Type: string memory
               Source: "p1"
            Identifier p2
               Type: uint256
               Source: "p2"
            Identifier p3
               Type: address
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,uint256)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(string memory p0, string memory p1, string memory p2, uint256 p3)"
      VariableDeclaration "p0"
         Type: string memory
         Source: "string memory p0"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p1"
         Type: string memory
         Source: "string memory p1"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p2"
         Type: string memory
         Source: "string memory p2"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p3"
         Type: uint256
         Source: "uint256 p3"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,uint256)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,uint256)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,uint256)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(string,string,string,uint256)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(string,string,string,uint256)
               Type: literal_string "log(string,string,string,uint256)"
               Source: "\"log(string,string,string,uint256)\""
            Identifier p0
               Type: string memory
               Source: "p0"
            Identifier p1
               Type: string memory
               Source: "p1"
            Identifier p2
               Type: string memory
               Source: "p2"
            Identifier p3
               Type: uint256
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,string)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(string memory p0, string memory p1, string memory p2, string memory p3)"
      VariableDeclaration "p0"
         Type: string memory
         Source: "string memory p0"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p1"
         Type: string memory
         Source: "string memory p1"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p2"
         Type: string memory
         Source: "string memory p2"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p3"
         Type: string memory
         Source: "string memory p3"
        ElementaryTypeName string
           Source: "string"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,string)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,string)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,string)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(string,string,string,string)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(string,string,string,string)
               Type: literal_string "log(string,string,string,string)"
               Source: "\"log(string,string,string,string)\""
            Identifier p0
               Type: string memory
               Source: "p0"
            Identifier p1
               Type: string memory
               Source: "p1"
            Identifier p2
               Type: string memory
               Source: "p2"
            Identifier p3
               Type: string memory
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,bool)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(string memory p0, string memory p1, string memory p2, bool p3)"
      VariableDeclaration "p0"
         Type: string memory
         Source: "string memory p0"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p1"
         Type: string memory
         Source: "string memory p1"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p2"
         Type: string memory
         Source: "string memory p2"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p3"
         Type: bool
         Source: "bool p3"
        ElementaryTypeName bool
           Source: "bool"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,bool)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,bool)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,bool)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(string,string,string,bool)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(string,string,string,bool)
               Type: literal_string "log(string,string,string,bool)"
               Source: "\"log(string,string,string,bool)\""
            Identifier p0
               Type: string memory
               Source: "p0"
            Identifier p1
               Type: string memory
               Source: "p1"
            Identifier p2
               Type: string memory
               Source: "p2"
            Identifier p3
               Type: bool
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(string memory p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,address)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(string memory p0, string memory p1, string memory p2, address p3)"
      VariableDeclaration "p0"
         Type: string memory
         Source: "string memory p0"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p1"
         Type: string memory
         Source: "string memory p1"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p2"
         Type: string memory
         Source: "string memory p2"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p3"
         Type: address
         Source: "address p3"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,address)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,address)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,address)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(string,string,string,address)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(string,string,string,address)
               Type: literal_string "log(string,string,string,address)"
               Source: "\"log(string,string,string,address)\""
            Identifier p0
               Type: string memory
               Source: "p0"
            Identifier p1
               Type: string memory
               Source: "p1"
            Identifier p2
               Type: string memory
               Source: "p2"
            Identifier p3
               Type: address
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(string memory p0, string memory p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,uint256)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(string memory p0, string memory p1, bool p2, uint256 p3)"
      VariableDeclaration "p0"
         Type: string memory
         Source: "string memory p0"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p1"
         Type: string memory
         Source: "string memory p1"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p2"
         Type: bool
         Source: "bool p2"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p3"
         Type: uint256
         Source: "uint256 p3"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,uint256)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,uint256)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,uint256)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(string,string,bool,uint256)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(string,string,bool,uint256)
               Type: literal_string "log(string,string,bool,uint256)"
               Source: "\"log(string,string,bool,uint256)\""
            Identifier p0
               Type: string memory
               Source: "p0"
            Identifier p1
               Type: string memory
               Source: "p1"
            Identifier p2
               Type: bool
               Source: "p2"
            Identifier p3
               Type: uint256
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,string)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(string memory p0, string memory p1, bool p2, string memory p3)"
      VariableDeclaration "p0"
         Type: string memory
         Source: "string memory p0"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p1"
         Type: string memory
         Source: "string memory p1"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p2"
         Type: bool
         Source: "bool p2"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p3"
         Type: string memory
         Source: "string memory p3"
        ElementaryTypeName string
           Source: "string"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,string)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,string)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,string)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(string,string,bool,string)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(string,string,bool,string)
               Type: literal_string "log(string,string,bool,string)"
               Source: "\"log(string,string,bool,string)\""
            Identifier p0
               Type: string memory
               Source: "p0"
            Identifier p1
               Type: string memory
               Source: "p1"
            Identifier p2
               Type: bool
               Source: "p2"
            Identifier p3
               Type: string memory
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(string memory p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,bool)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(string memory p0, string memory p1, bool p2, bool p3)"
      VariableDeclaration "p0"
         Type: string memory
         Source: "string memory p0"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p1"
         Type: string memory
         Source: "string memory p1"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p2"
         Type: bool
         Source: "bool p2"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p3"
         Type: bool
         Source: "bool p3"
        ElementaryTypeName bool
           Source: "bool"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,bool)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,bool)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,bool)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(string,string,bool,bool)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(string,string,bool,bool)
               Type: literal_string "log(string,string,bool,bool)"
               Source: "\"log(string,string,bool,bool)\""
            Identifier p0
               Type: string memory
               Source: "p0"
            Identifier p1
               Type: string memory
               Source: "p1"
            Identifier p2
               Type: bool
               Source: "p2"
            Identifier p3
               Type: bool
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(string memory p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,address)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(string memory p0, string memory p1, bool p2, address p3)"
      VariableDeclaration "p0"
         Type: string memory
         Source: "string memory p0"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p1"
         Type: string memory
         Source: "string memory p1"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p2"
         Type: bool
         Source: "bool p2"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p3"
         Type: address
         Source: "address p3"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,address)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,address)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,address)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(string,string,bool,address)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(string,string,bool,address)
               Type: literal_string "log(string,string,bool,address)"
               Source: "\"log(string,string,bool,address)\""
            Identifier p0
               Type: string memory
               Source: "p0"
            Identifier p1
               Type: string memory
               Source: "p1"
            Identifier p2
               Type: bool
               Source: "p2"
            Identifier p3
               Type: address
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(string memory p0, string memory p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,uint256)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(string memory p0, string memory p1, address p2, uint256 p3)"
      VariableDeclaration "p0"
         Type: string memory
         Source: "string memory p0"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p1"
         Type: string memory
         Source: "string memory p1"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p2"
         Type: address
         Source: "address p2"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p3"
         Type: uint256
         Source: "uint256 p3"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,uint256)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,uint256)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,uint256)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(string,string,address,uint256)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(string,string,address,uint256)
               Type: literal_string "log(string,string,address,uint256)"
               Source: "\"log(string,string,address,uint256)\""
            Identifier p0
               Type: string memory
               Source: "p0"
            Identifier p1
               Type: string memory
               Source: "p1"
            Identifier p2
               Type: address
               Source: "p2"
            Identifier p3
               Type: uint256
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(string memory p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,string)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(string memory p0, string memory p1, address p2, string memory p3)"
      VariableDeclaration "p0"
         Type: string memory
         Source: "string memory p0"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p1"
         Type: string memory
         Source: "string memory p1"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p2"
         Type: address
         Source: "address p2"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p3"
         Type: string memory
         Source: "string memory p3"
        ElementaryTypeName string
           Source: "string"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,string)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,string)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,string)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(string,string,address,string)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(string,string,address,string)
               Type: literal_string "log(string,string,address,string)"
               Source: "\"log(string,string,address,string)\""
            Identifier p0
               Type: string memory
               Source: "p0"
            Identifier p1
               Type: string memory
               Source: "p1"
            Identifier p2
               Type: address
               Source: "p2"
            Identifier p3
               Type: string memory
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(string memory p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,bool)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(string memory p0, string memory p1, address p2, bool p3)"
      VariableDeclaration "p0"
         Type: string memory
         Source: "string memory p0"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p1"
         Type: string memory
         Source: "string memory p1"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p2"
         Type: address
         Source: "address p2"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p3"
         Type: bool
         Source: "bool p3"
        ElementaryTypeName bool
           Source: "bool"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,bool)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,bool)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,bool)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(string,string,address,bool)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(string,string,address,bool)
               Type: literal_string "log(string,string,address,bool)"
               Source: "\"log(string,string,address,bool)\""
            Identifier p0
               Type: string memory
               Source: "p0"
            Identifier p1
               Type: string memory
               Source: "p1"
            Identifier p2
               Type: address
               Source: "p2"
            Identifier p3
               Type: bool
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(string memory p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,address)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(string memory p0, string memory p1, address p2, address p3)"
      VariableDeclaration "p0"
         Type: string memory
         Source: "string memory p0"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p1"
         Type: string memory
         Source: "string memory p1"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p2"
         Type: address
         Source: "address p2"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p3"
         Type: address
         Source: "address p3"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,address)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,address)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,address)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(string,string,address,address)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(string,string,address,address)
               Type: literal_string "log(string,string,address,address)"
               Source: "\"log(string,string,address,address)\""
            Identifier p0
               Type: string memory
               Source: "p0"
            Identifier p1
               Type: string memory
               Source: "p1"
            Identifier p2
               Type: address
               Source: "p2"
            Identifier p3
               Type: address
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,uint256)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(string memory p0, bool p1, uint256 p2, uint256 p3)"
      VariableDeclaration "p0"
         Type: string memory
         Source: "string memory p0"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p1"
         Type: bool
         Source: "bool p1"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p2"
         Type: uint256
         Source: "uint256 p2"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p3"
         Type: uint256
         Source: "uint256 p3"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,uint256)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,uint256)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,uint256)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(string,bool,uint256,uint256)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(string,bool,uint256,uint256)
               Type: literal_string "log(string,bool,uint256,uint256)"
               Source: "\"log(string,bool,uint256,uint256)\""
            Identifier p0
               Type: string memory
               Source: "p0"
            Identifier p1
               Type: bool
               Source: "p1"
            Identifier p2
               Type: uint256
               Source: "p2"
            Identifier p3
               Type: uint256
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(string memory p0, bool p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,string)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(string memory p0, bool p1, uint256 p2, string memory p3)"
      VariableDeclaration "p0"
         Type: string memory
         Source: "string memory p0"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p1"
         Type: bool
         Source: "bool p1"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p2"
         Type: uint256
         Source: "uint256 p2"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p3"
         Type: string memory
         Source: "string memory p3"
        ElementaryTypeName string
           Source: "string"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,string)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,string)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,string)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(string,bool,uint256,string)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(string,bool,uint256,string)
               Type: literal_string "log(string,bool,uint256,string)"
               Source: "\"log(string,bool,uint256,string)\""
            Identifier p0
               Type: string memory
               Source: "p0"
            Identifier p1
               Type: bool
               Source: "p1"
            Identifier p2
               Type: uint256
               Source: "p2"
            Identifier p3
               Type: string memory
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(string memory p0, bool p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,bool)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(string memory p0, bool p1, uint256 p2, bool p3)"
      VariableDeclaration "p0"
         Type: string memory
         Source: "string memory p0"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p1"
         Type: bool
         Source: "bool p1"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p2"
         Type: uint256
         Source: "uint256 p2"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p3"
         Type: bool
         Source: "bool p3"
        ElementaryTypeName bool
           Source: "bool"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,bool)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,bool)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,bool)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(string,bool,uint256,bool)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(string,bool,uint256,bool)
               Type: literal_string "log(string,bool,uint256,bool)"
               Source: "\"log(string,bool,uint256,bool)\""
            Identifier p0
               Type: string memory
               Source: "p0"
            Identifier p1
               Type: bool
               Source: "p1"
            Identifier p2
               Type: uint256
               Source: "p2"
            Identifier p3
               Type: bool
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(string memory p0, bool p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,address)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(string memory p0, bool p1, uint256 p2, address p3)"
      VariableDeclaration "p0"
         Type: string memory
         Source: "string memory p0"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p1"
         Type: bool
         Source: "bool p1"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p2"
         Type: uint256
         Source: "uint256 p2"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p3"
         Type: address
         Source: "address p3"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,address)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,address)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,address)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(string,bool,uint256,address)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(string,bool,uint256,address)
               Type: literal_string "log(string,bool,uint256,address)"
               Source: "\"log(string,bool,uint256,address)\""
            Identifier p0
               Type: string memory
               Source: "p0"
            Identifier p1
               Type: bool
               Source: "p1"
            Identifier p2
               Type: uint256
               Source: "p2"
            Identifier p3
               Type: address
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(string memory p0, bool p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,uint256)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(string memory p0, bool p1, string memory p2, uint256 p3)"
      VariableDeclaration "p0"
         Type: string memory
         Source: "string memory p0"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p1"
         Type: bool
         Source: "bool p1"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p2"
         Type: string memory
         Source: "string memory p2"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p3"
         Type: uint256
         Source: "uint256 p3"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,uint256)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,uint256)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,uint256)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(string,bool,string,uint256)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(string,bool,string,uint256)
               Type: literal_string "log(string,bool,string,uint256)"
               Source: "\"log(string,bool,string,uint256)\""
            Identifier p0
               Type: string memory
               Source: "p0"
            Identifier p1
               Type: bool
               Source: "p1"
            Identifier p2
               Type: string memory
               Source: "p2"
            Identifier p3
               Type: uint256
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,string)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(string memory p0, bool p1, string memory p2, string memory p3)"
      VariableDeclaration "p0"
         Type: string memory
         Source: "string memory p0"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p1"
         Type: bool
         Source: "bool p1"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p2"
         Type: string memory
         Source: "string memory p2"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p3"
         Type: string memory
         Source: "string memory p3"
        ElementaryTypeName string
           Source: "string"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,string)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,string)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,string)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(string,bool,string,string)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(string,bool,string,string)
               Type: literal_string "log(string,bool,string,string)"
               Source: "\"log(string,bool,string,string)\""
            Identifier p0
               Type: string memory
               Source: "p0"
            Identifier p1
               Type: bool
               Source: "p1"
            Identifier p2
               Type: string memory
               Source: "p2"
            Identifier p3
               Type: string memory
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(string memory p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,bool)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(string memory p0, bool p1, string memory p2, bool p3)"
      VariableDeclaration "p0"
         Type: string memory
         Source: "string memory p0"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p1"
         Type: bool
         Source: "bool p1"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p2"
         Type: string memory
         Source: "string memory p2"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p3"
         Type: bool
         Source: "bool p3"
        ElementaryTypeName bool
           Source: "bool"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,bool)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,bool)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,bool)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(string,bool,string,bool)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(string,bool,string,bool)
               Type: literal_string "log(string,bool,string,bool)"
               Source: "\"log(string,bool,string,bool)\""
            Identifier p0
               Type: string memory
               Source: "p0"
            Identifier p1
               Type: bool
               Source: "p1"
            Identifier p2
               Type: string memory
               Source: "p2"
            Identifier p3
               Type: bool
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(string memory p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,address)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(string memory p0, bool p1, string memory p2, address p3)"
      VariableDeclaration "p0"
         Type: string memory
         Source: "string memory p0"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p1"
         Type: bool
         Source: "bool p1"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p2"
         Type: string memory
         Source: "string memory p2"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p3"
         Type: address
         Source: "address p3"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,address)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,address)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,address)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(string,bool,string,address)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(string,bool,string,address)
               Type: literal_string "log(string,bool,string,address)"
               Source: "\"log(string,bool,string,address)\""
            Identifier p0
               Type: string memory
               Source: "p0"
            Identifier p1
               Type: bool
               Source: "p1"
            Identifier p2
               Type: string memory
               Source: "p2"
            Identifier p3
               Type: address
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(string memory p0, bool p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,uint256)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(string memory p0, bool p1, bool p2, uint256 p3)"
      VariableDeclaration "p0"
         Type: string memory
         Source: "string memory p0"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p1"
         Type: bool
         Source: "bool p1"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p2"
         Type: bool
         Source: "bool p2"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p3"
         Type: uint256
         Source: "uint256 p3"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,uint256)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,uint256)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,uint256)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(string,bool,bool,uint256)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(string,bool,bool,uint256)
               Type: literal_string "log(string,bool,bool,uint256)"
               Source: "\"log(string,bool,bool,uint256)\""
            Identifier p0
               Type: string memory
               Source: "p0"
            Identifier p1
               Type: bool
               Source: "p1"
            Identifier p2
               Type: bool
               Source: "p2"
            Identifier p3
               Type: uint256
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(string memory p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,string)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(string memory p0, bool p1, bool p2, string memory p3)"
      VariableDeclaration "p0"
         Type: string memory
         Source: "string memory p0"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p1"
         Type: bool
         Source: "bool p1"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p2"
         Type: bool
         Source: "bool p2"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p3"
         Type: string memory
         Source: "string memory p3"
        ElementaryTypeName string
           Source: "string"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,string)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,string)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,string)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(string,bool,bool,string)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(string,bool,bool,string)
               Type: literal_string "log(string,bool,bool,string)"
               Source: "\"log(string,bool,bool,string)\""
            Identifier p0
               Type: string memory
               Source: "p0"
            Identifier p1
               Type: bool
               Source: "p1"
            Identifier p2
               Type: bool
               Source: "p2"
            Identifier p3
               Type: string memory
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(string memory p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,bool)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(string memory p0, bool p1, bool p2, bool p3)"
      VariableDeclaration "p0"
         Type: string memory
         Source: "string memory p0"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p1"
         Type: bool
         Source: "bool p1"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p2"
         Type: bool
         Source: "bool p2"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p3"
         Type: bool
         Source: "bool p3"
        ElementaryTypeName bool
           Source: "bool"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,bool)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,bool)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,bool)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(string,bool,bool,bool)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(string,bool,bool,bool)
               Type: literal_string "log(string,bool,bool,bool)"
               Source: "\"log(string,bool,bool,bool)\""
            Identifier p0
               Type: string memory
               Source: "p0"
            Identifier p1
               Type: bool
               Source: "p1"
            Identifier p2
               Type: bool
               Source: "p2"
            Identifier p3
               Type: bool
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(string memory p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,address)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(string memory p0, bool p1, bool p2, address p3)"
      VariableDeclaration "p0"
         Type: string memory
         Source: "string memory p0"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p1"
         Type: bool
         Source: "bool p1"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p2"
         Type: bool
         Source: "bool p2"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p3"
         Type: address
         Source: "address p3"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,address)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,address)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,address)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(string,bool,bool,address)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(string,bool,bool,address)
               Type: literal_string "log(string,bool,bool,address)"
               Source: "\"log(string,bool,bool,address)\""
            Identifier p0
               Type: string memory
               Source: "p0"
            Identifier p1
               Type: bool
               Source: "p1"
            Identifier p2
               Type: bool
               Source: "p2"
            Identifier p3
               Type: address
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(string memory p0, bool p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,uint256)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(string memory p0, bool p1, address p2, uint256 p3)"
      VariableDeclaration "p0"
         Type: string memory
         Source: "string memory p0"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p1"
         Type: bool
         Source: "bool p1"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p2"
         Type: address
         Source: "address p2"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p3"
         Type: uint256
         Source: "uint256 p3"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,uint256)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,uint256)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,uint256)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(string,bool,address,uint256)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(string,bool,address,uint256)
               Type: literal_string "log(string,bool,address,uint256)"
               Source: "\"log(string,bool,address,uint256)\""
            Identifier p0
               Type: string memory
               Source: "p0"
            Identifier p1
               Type: bool
               Source: "p1"
            Identifier p2
               Type: address
               Source: "p2"
            Identifier p3
               Type: uint256
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(string memory p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,string)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(string memory p0, bool p1, address p2, string memory p3)"
      VariableDeclaration "p0"
         Type: string memory
         Source: "string memory p0"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p1"
         Type: bool
         Source: "bool p1"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p2"
         Type: address
         Source: "address p2"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p3"
         Type: string memory
         Source: "string memory p3"
        ElementaryTypeName string
           Source: "string"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,string)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,string)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,string)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(string,bool,address,string)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(string,bool,address,string)
               Type: literal_string "log(string,bool,address,string)"
               Source: "\"log(string,bool,address,string)\""
            Identifier p0
               Type: string memory
               Source: "p0"
            Identifier p1
               Type: bool
               Source: "p1"
            Identifier p2
               Type: address
               Source: "p2"
            Identifier p3
               Type: string memory
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(string memory p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,bool)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(string memory p0, bool p1, address p2, bool p3)"
      VariableDeclaration "p0"
         Type: string memory
         Source: "string memory p0"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p1"
         Type: bool
         Source: "bool p1"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p2"
         Type: address
         Source: "address p2"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p3"
         Type: bool
         Source: "bool p3"
        ElementaryTypeName bool
           Source: "bool"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,bool)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,bool)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,bool)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(string,bool,address,bool)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(string,bool,address,bool)
               Type: literal_string "log(string,bool,address,bool)"
               Source: "\"log(string,bool,address,bool)\""
            Identifier p0
               Type: string memory
               Source: "p0"
            Identifier p1
               Type: bool
               Source: "p1"
            Identifier p2
               Type: address
               Source: "p2"
            Identifier p3
               Type: bool
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(string memory p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,address)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(string memory p0, bool p1, address p2, address p3)"
      VariableDeclaration "p0"
         Type: string memory
         Source: "string memory p0"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p1"
         Type: bool
         Source: "bool p1"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p2"
         Type: address
         Source: "address p2"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p3"
         Type: address
         Source: "address p3"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,address)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,address)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,address)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(string,bool,address,address)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(string,bool,address,address)
               Type: literal_string "log(string,bool,address,address)"
               Source: "\"log(string,bool,address,address)\""
            Identifier p0
               Type: string memory
               Source: "p0"
            Identifier p1
               Type: bool
               Source: "p1"
            Identifier p2
               Type: address
               Source: "p2"
            Identifier p3
               Type: address
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(string memory p0, address p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,uint256)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(string memory p0, address p1, uint256 p2, uint256 p3)"
      VariableDeclaration "p0"
         Type: string memory
         Source: "string memory p0"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p1"
         Type: address
         Source: "address p1"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p2"
         Type: uint256
         Source: "uint256 p2"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p3"
         Type: uint256
         Source: "uint256 p3"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,uint256)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,uint256)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,uint256)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(string,address,uint256,uint256)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(string,address,uint256,uint256)
               Type: literal_string "log(string,address,uint256,uint256)"
               Source: "\"log(string,address,uint256,uint256)\""
            Identifier p0
               Type: string memory
               Source: "p0"
            Identifier p1
               Type: address
               Source: "p1"
            Identifier p2
               Type: uint256
               Source: "p2"
            Identifier p3
               Type: uint256
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(string memory p0, address p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,string)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(string memory p0, address p1, uint256 p2, string memory p3)"
      VariableDeclaration "p0"
         Type: string memory
         Source: "string memory p0"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p1"
         Type: address
         Source: "address p1"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p2"
         Type: uint256
         Source: "uint256 p2"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p3"
         Type: string memory
         Source: "string memory p3"
        ElementaryTypeName string
           Source: "string"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,string)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,string)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,string)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(string,address,uint256,string)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(string,address,uint256,string)
               Type: literal_string "log(string,address,uint256,string)"
               Source: "\"log(string,address,uint256,string)\""
            Identifier p0
               Type: string memory
               Source: "p0"
            Identifier p1
               Type: address
               Source: "p1"
            Identifier p2
               Type: uint256
               Source: "p2"
            Identifier p3
               Type: string memory
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(string memory p0, address p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,bool)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(string memory p0, address p1, uint256 p2, bool p3)"
      VariableDeclaration "p0"
         Type: string memory
         Source: "string memory p0"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p1"
         Type: address
         Source: "address p1"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p2"
         Type: uint256
         Source: "uint256 p2"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p3"
         Type: bool
         Source: "bool p3"
        ElementaryTypeName bool
           Source: "bool"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,bool)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,bool)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,bool)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(string,address,uint256,bool)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(string,address,uint256,bool)
               Type: literal_string "log(string,address,uint256,bool)"
               Source: "\"log(string,address,uint256,bool)\""
            Identifier p0
               Type: string memory
               Source: "p0"
            Identifier p1
               Type: address
               Source: "p1"
            Identifier p2
               Type: uint256
               Source: "p2"
            Identifier p3
               Type: bool
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(string memory p0, address p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,address)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(string memory p0, address p1, uint256 p2, address p3)"
      VariableDeclaration "p0"
         Type: string memory
         Source: "string memory p0"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p1"
         Type: address
         Source: "address p1"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p2"
         Type: uint256
         Source: "uint256 p2"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p3"
         Type: address
         Source: "address p3"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,address)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,address)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,address)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(string,address,uint256,address)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(string,address,uint256,address)
               Type: literal_string "log(string,address,uint256,address)"
               Source: "\"log(string,address,uint256,address)\""
            Identifier p0
               Type: string memory
               Source: "p0"
            Identifier p1
               Type: address
               Source: "p1"
            Identifier p2
               Type: uint256
               Source: "p2"
            Identifier p3
               Type: address
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(string memory p0, address p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,uint256)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(string memory p0, address p1, string memory p2, uint256 p3)"
      VariableDeclaration "p0"
         Type: string memory
         Source: "string memory p0"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p1"
         Type: address
         Source: "address p1"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p2"
         Type: string memory
         Source: "string memory p2"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p3"
         Type: uint256
         Source: "uint256 p3"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,uint256)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,uint256)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,uint256)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(string,address,string,uint256)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(string,address,string,uint256)
               Type: literal_string "log(string,address,string,uint256)"
               Source: "\"log(string,address,string,uint256)\""
            Identifier p0
               Type: string memory
               Source: "p0"
            Identifier p1
               Type: address
               Source: "p1"
            Identifier p2
               Type: string memory
               Source: "p2"
            Identifier p3
               Type: uint256
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(string memory p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,string)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(string memory p0, address p1, string memory p2, string memory p3)"
      VariableDeclaration "p0"
         Type: string memory
         Source: "string memory p0"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p1"
         Type: address
         Source: "address p1"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p2"
         Type: string memory
         Source: "string memory p2"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p3"
         Type: string memory
         Source: "string memory p3"
        ElementaryTypeName string
           Source: "string"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,string)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,string)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,string)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(string,address,string,string)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(string,address,string,string)
               Type: literal_string "log(string,address,string,string)"
               Source: "\"log(string,address,string,string)\""
            Identifier p0
               Type: string memory
               Source: "p0"
            Identifier p1
               Type: address
               Source: "p1"
            Identifier p2
               Type: string memory
               Source: "p2"
            Identifier p3
               Type: string memory
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(string memory p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,bool)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(string memory p0, address p1, string memory p2, bool p3)"
      VariableDeclaration "p0"
         Type: string memory
         Source: "string memory p0"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p1"
         Type: address
         Source: "address p1"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p2"
         Type: string memory
         Source: "string memory p2"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p3"
         Type: bool
         Source: "bool p3"
        ElementaryTypeName bool
           Source: "bool"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,bool)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,bool)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,bool)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(string,address,string,bool)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(string,address,string,bool)
               Type: literal_string "log(string,address,string,bool)"
               Source: "\"log(string,address,string,bool)\""
            Identifier p0
               Type: string memory
               Source: "p0"
            Identifier p1
               Type: address
               Source: "p1"
            Identifier p2
               Type: string memory
               Source: "p2"
            Identifier p3
               Type: bool
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(string memory p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,address)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(string memory p0, address p1, string memory p2, address p3)"
      VariableDeclaration "p0"
         Type: string memory
         Source: "string memory p0"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p1"
         Type: address
         Source: "address p1"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p2"
         Type: string memory
         Source: "string memory p2"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p3"
         Type: address
         Source: "address p3"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,address)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,address)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,address)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(string,address,string,address)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(string,address,string,address)
               Type: literal_string "log(string,address,string,address)"
               Source: "\"log(string,address,string,address)\""
            Identifier p0
               Type: string memory
               Source: "p0"
            Identifier p1
               Type: address
               Source: "p1"
            Identifier p2
               Type: string memory
               Source: "p2"
            Identifier p3
               Type: address
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(string memory p0, address p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,uint256)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(string memory p0, address p1, bool p2, uint256 p3)"
      VariableDeclaration "p0"
         Type: string memory
         Source: "string memory p0"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p1"
         Type: address
         Source: "address p1"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p2"
         Type: bool
         Source: "bool p2"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p3"
         Type: uint256
         Source: "uint256 p3"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,uint256)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,uint256)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,uint256)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(string,address,bool,uint256)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(string,address,bool,uint256)
               Type: literal_string "log(string,address,bool,uint256)"
               Source: "\"log(string,address,bool,uint256)\""
            Identifier p0
               Type: string memory
               Source: "p0"
            Identifier p1
               Type: address
               Source: "p1"
            Identifier p2
               Type: bool
               Source: "p2"
            Identifier p3
               Type: uint256
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(string memory p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,string)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(string memory p0, address p1, bool p2, string memory p3)"
      VariableDeclaration "p0"
         Type: string memory
         Source: "string memory p0"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p1"
         Type: address
         Source: "address p1"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p2"
         Type: bool
         Source: "bool p2"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p3"
         Type: string memory
         Source: "string memory p3"
        ElementaryTypeName string
           Source: "string"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,string)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,string)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,string)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(string,address,bool,string)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(string,address,bool,string)
               Type: literal_string "log(string,address,bool,string)"
               Source: "\"log(string,address,bool,string)\""
            Identifier p0
               Type: string memory
               Source: "p0"
            Identifier p1
               Type: address
               Source: "p1"
            Identifier p2
               Type: bool
               Source: "p2"
            Identifier p3
               Type: string memory
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(string memory p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,bool)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(string memory p0, address p1, bool p2, bool p3)"
      VariableDeclaration "p0"
         Type: string memory
         Source: "string memory p0"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p1"
         Type: address
         Source: "address p1"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p2"
         Type: bool
         Source: "bool p2"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p3"
         Type: bool
         Source: "bool p3"
        ElementaryTypeName bool
           Source: "bool"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,bool)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,bool)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,bool)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(string,address,bool,bool)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(string,address,bool,bool)
               Type: literal_string "log(string,address,bool,bool)"
               Source: "\"log(string,address,bool,bool)\""
            Identifier p0
               Type: string memory
               Source: "p0"
            Identifier p1
               Type: address
               Source: "p1"
            Identifier p2
               Type: bool
               Source: "p2"
            Identifier p3
               Type: bool
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(string memory p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,address)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(string memory p0, address p1, bool p2, address p3)"
      VariableDeclaration "p0"
         Type: string memory
         Source: "string memory p0"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p1"
         Type: address
         Source: "address p1"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p2"
         Type: bool
         Source: "bool p2"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p3"
         Type: address
         Source: "address p3"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,address)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,address)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,address)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(string,address,bool,address)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(string,address,bool,address)
               Type: literal_string "log(string,address,bool,address)"
               Source: "\"log(string,address,bool,address)\""
            Identifier p0
               Type: string memory
               Source: "p0"
            Identifier p1
               Type: address
               Source: "p1"
            Identifier p2
               Type: bool
               Source: "p2"
            Identifier p3
               Type: address
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(string memory p0, address p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,uint256)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(string memory p0, address p1, address p2, uint256 p3)"
      VariableDeclaration "p0"
         Type: string memory
         Source: "string memory p0"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p1"
         Type: address
         Source: "address p1"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p2"
         Type: address
         Source: "address p2"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p3"
         Type: uint256
         Source: "uint256 p3"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,uint256)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,uint256)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,uint256)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(string,address,address,uint256)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(string,address,address,uint256)
               Type: literal_string "log(string,address,address,uint256)"
               Source: "\"log(string,address,address,uint256)\""
            Identifier p0
               Type: string memory
               Source: "p0"
            Identifier p1
               Type: address
               Source: "p1"
            Identifier p2
               Type: address
               Source: "p2"
            Identifier p3
               Type: uint256
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(string memory p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,string)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(string memory p0, address p1, address p2, string memory p3)"
      VariableDeclaration "p0"
         Type: string memory
         Source: "string memory p0"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p1"
         Type: address
         Source: "address p1"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p2"
         Type: address
         Source: "address p2"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p3"
         Type: string memory
         Source: "string memory p3"
        ElementaryTypeName string
           Source: "string"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,string)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,string)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,string)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(string,address,address,string)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(string,address,address,string)
               Type: literal_string "log(string,address,address,string)"
               Source: "\"log(string,address,address,string)\""
            Identifier p0
               Type: string memory
               Source: "p0"
            Identifier p1
               Type: address
               Source: "p1"
            Identifier p2
               Type: address
               Source: "p2"
            Identifier p3
               Type: string memory
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(string memory p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,bool)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(string memory p0, address p1, address p2, bool p3)"
      VariableDeclaration "p0"
         Type: string memory
         Source: "string memory p0"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p1"
         Type: address
         Source: "address p1"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p2"
         Type: address
         Source: "address p2"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p3"
         Type: bool
         Source: "bool p3"
        ElementaryTypeName bool
           Source: "bool"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,bool)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,bool)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,bool)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(string,address,address,bool)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(string,address,address,bool)
               Type: literal_string "log(string,address,address,bool)"
               Source: "\"log(string,address,address,bool)\""
            Identifier p0
               Type: string memory
               Source: "p0"
            Identifier p1
               Type: address
               Source: "p1"
            Identifier p2
               Type: address
               Source: "p2"
            Identifier p3
               Type: bool
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(string memory p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,address)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(string memory p0, address p1, address p2, address p3)"
      VariableDeclaration "p0"
         Type: string memory
         Source: "string memory p0"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p1"
         Type: address
         Source: "address p1"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p2"
         Type: address
         Source: "address p2"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p3"
         Type: address
         Source: "address p3"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,address)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,address)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,address)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(string,address,address,address)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(string,address,address,address)
               Type: literal_string "log(string,address,address,address)"
               Source: "\"log(string,address,address,address)\""
            Identifier p0
               Type: string memory
               Source: "p0"
            Identifier p1
               Type: address
               Source: "p1"
            Identifier p2
               Type: address
               Source: "p2"
            Identifier p3
               Type: address
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,uint256)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(bool p0, uint256 p1, uint256 p2, uint256 p3)"
      VariableDeclaration "p0"
         Type: bool
         Source: "bool p0"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p1"
         Type: uint256
         Source: "uint256 p1"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p2"
         Type: uint256
         Source: "uint256 p2"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p3"
         Type: uint256
         Source: "uint256 p3"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,uint256)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,uint256)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,uint256)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(bool,uint256,uint256,uint256)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(bool,uint256,uint256,uint256)
               Type: literal_string "log(bool,uint256,uint256,uint256)"
               Source: "\"log(bool,uint256,uint256,uint256)\""
            Identifier p0
               Type: bool
               Source: "p0"
            Identifier p1
               Type: uint256
               Source: "p1"
            Identifier p2
               Type: uint256
               Source: "p2"
            Identifier p3
               Type: uint256
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,string)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(bool p0, uint256 p1, uint256 p2, string memory p3)"
      VariableDeclaration "p0"
         Type: bool
         Source: "bool p0"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p1"
         Type: uint256
         Source: "uint256 p1"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p2"
         Type: uint256
         Source: "uint256 p2"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p3"
         Type: string memory
         Source: "string memory p3"
        ElementaryTypeName string
           Source: "string"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,string)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,string)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,string)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(bool,uint256,uint256,string)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(bool,uint256,uint256,string)
               Type: literal_string "log(bool,uint256,uint256,string)"
               Source: "\"log(bool,uint256,uint256,string)\""
            Identifier p0
               Type: bool
               Source: "p0"
            Identifier p1
               Type: uint256
               Source: "p1"
            Identifier p2
               Type: uint256
               Source: "p2"
            Identifier p3
               Type: string memory
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(bool p0, uint256 p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,bool)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(bool p0, uint256 p1, uint256 p2, bool p3)"
      VariableDeclaration "p0"
         Type: bool
         Source: "bool p0"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p1"
         Type: uint256
         Source: "uint256 p1"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p2"
         Type: uint256
         Source: "uint256 p2"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p3"
         Type: bool
         Source: "bool p3"
        ElementaryTypeName bool
           Source: "bool"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,bool)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,bool)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,bool)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(bool,uint256,uint256,bool)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(bool,uint256,uint256,bool)
               Type: literal_string "log(bool,uint256,uint256,bool)"
               Source: "\"log(bool,uint256,uint256,bool)\""
            Identifier p0
               Type: bool
               Source: "p0"
            Identifier p1
               Type: uint256
               Source: "p1"
            Identifier p2
               Type: uint256
               Source: "p2"
            Identifier p3
               Type: bool
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(bool p0, uint256 p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,address)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(bool p0, uint256 p1, uint256 p2, address p3)"
      VariableDeclaration "p0"
         Type: bool
         Source: "bool p0"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p1"
         Type: uint256
         Source: "uint256 p1"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p2"
         Type: uint256
         Source: "uint256 p2"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p3"
         Type: address
         Source: "address p3"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,address)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,address)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,address)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(bool,uint256,uint256,address)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(bool,uint256,uint256,address)
               Type: literal_string "log(bool,uint256,uint256,address)"
               Source: "\"log(bool,uint256,uint256,address)\""
            Identifier p0
               Type: bool
               Source: "p0"
            Identifier p1
               Type: uint256
               Source: "p1"
            Identifier p2
               Type: uint256
               Source: "p2"
            Identifier p3
               Type: address
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,uint256)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(bool p0, uint256 p1, string memory p2, uint256 p3)"
      VariableDeclaration "p0"
         Type: bool
         Source: "bool p0"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p1"
         Type: uint256
         Source: "uint256 p1"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p2"
         Type: string memory
         Source: "string memory p2"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p3"
         Type: uint256
         Source: "uint256 p3"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,uint256)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,uint256)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,uint256)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(bool,uint256,string,uint256)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(bool,uint256,string,uint256)
               Type: literal_string "log(bool,uint256,string,uint256)"
               Source: "\"log(bool,uint256,string,uint256)\""
            Identifier p0
               Type: bool
               Source: "p0"
            Identifier p1
               Type: uint256
               Source: "p1"
            Identifier p2
               Type: string memory
               Source: "p2"
            Identifier p3
               Type: uint256
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(bool p0, uint256 p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,string)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(bool p0, uint256 p1, string memory p2, string memory p3)"
      VariableDeclaration "p0"
         Type: bool
         Source: "bool p0"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p1"
         Type: uint256
         Source: "uint256 p1"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p2"
         Type: string memory
         Source: "string memory p2"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p3"
         Type: string memory
         Source: "string memory p3"
        ElementaryTypeName string
           Source: "string"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,string)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,string)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,string)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(bool,uint256,string,string)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(bool,uint256,string,string)
               Type: literal_string "log(bool,uint256,string,string)"
               Source: "\"log(bool,uint256,string,string)\""
            Identifier p0
               Type: bool
               Source: "p0"
            Identifier p1
               Type: uint256
               Source: "p1"
            Identifier p2
               Type: string memory
               Source: "p2"
            Identifier p3
               Type: string memory
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(bool p0, uint256 p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,bool)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(bool p0, uint256 p1, string memory p2, bool p3)"
      VariableDeclaration "p0"
         Type: bool
         Source: "bool p0"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p1"
         Type: uint256
         Source: "uint256 p1"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p2"
         Type: string memory
         Source: "string memory p2"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p3"
         Type: bool
         Source: "bool p3"
        ElementaryTypeName bool
           Source: "bool"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,bool)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,bool)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,bool)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(bool,uint256,string,bool)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(bool,uint256,string,bool)
               Type: literal_string "log(bool,uint256,string,bool)"
               Source: "\"log(bool,uint256,string,bool)\""
            Identifier p0
               Type: bool
               Source: "p0"
            Identifier p1
               Type: uint256
               Source: "p1"
            Identifier p2
               Type: string memory
               Source: "p2"
            Identifier p3
               Type: bool
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(bool p0, uint256 p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,address)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(bool p0, uint256 p1, string memory p2, address p3)"
      VariableDeclaration "p0"
         Type: bool
         Source: "bool p0"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p1"
         Type: uint256
         Source: "uint256 p1"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p2"
         Type: string memory
         Source: "string memory p2"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p3"
         Type: address
         Source: "address p3"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,address)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,address)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,address)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(bool,uint256,string,address)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(bool,uint256,string,address)
               Type: literal_string "log(bool,uint256,string,address)"
               Source: "\"log(bool,uint256,string,address)\""
            Identifier p0
               Type: bool
               Source: "p0"
            Identifier p1
               Type: uint256
               Source: "p1"
            Identifier p2
               Type: string memory
               Source: "p2"
            Identifier p3
               Type: address
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(bool p0, uint256 p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,uint256)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(bool p0, uint256 p1, bool p2, uint256 p3)"
      VariableDeclaration "p0"
         Type: bool
         Source: "bool p0"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p1"
         Type: uint256
         Source: "uint256 p1"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p2"
         Type: bool
         Source: "bool p2"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p3"
         Type: uint256
         Source: "uint256 p3"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,uint256)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,uint256)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,uint256)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(bool,uint256,bool,uint256)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(bool,uint256,bool,uint256)
               Type: literal_string "log(bool,uint256,bool,uint256)"
               Source: "\"log(bool,uint256,bool,uint256)\""
            Identifier p0
               Type: bool
               Source: "p0"
            Identifier p1
               Type: uint256
               Source: "p1"
            Identifier p2
               Type: bool
               Source: "p2"
            Identifier p3
               Type: uint256
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(bool p0, uint256 p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,string)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(bool p0, uint256 p1, bool p2, string memory p3)"
      VariableDeclaration "p0"
         Type: bool
         Source: "bool p0"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p1"
         Type: uint256
         Source: "uint256 p1"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p2"
         Type: bool
         Source: "bool p2"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p3"
         Type: string memory
         Source: "string memory p3"
        ElementaryTypeName string
           Source: "string"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,string)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,string)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,string)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(bool,uint256,bool,string)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(bool,uint256,bool,string)
               Type: literal_string "log(bool,uint256,bool,string)"
               Source: "\"log(bool,uint256,bool,string)\""
            Identifier p0
               Type: bool
               Source: "p0"
            Identifier p1
               Type: uint256
               Source: "p1"
            Identifier p2
               Type: bool
               Source: "p2"
            Identifier p3
               Type: string memory
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(bool p0, uint256 p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,bool)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(bool p0, uint256 p1, bool p2, bool p3)"
      VariableDeclaration "p0"
         Type: bool
         Source: "bool p0"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p1"
         Type: uint256
         Source: "uint256 p1"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p2"
         Type: bool
         Source: "bool p2"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p3"
         Type: bool
         Source: "bool p3"
        ElementaryTypeName bool
           Source: "bool"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,bool)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,bool)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,bool)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(bool,uint256,bool,bool)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(bool,uint256,bool,bool)
               Type: literal_string "log(bool,uint256,bool,bool)"
               Source: "\"log(bool,uint256,bool,bool)\""
            Identifier p0
               Type: bool
               Source: "p0"
            Identifier p1
               Type: uint256
               Source: "p1"
            Identifier p2
               Type: bool
               Source: "p2"
            Identifier p3
               Type: bool
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(bool p0, uint256 p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,address)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(bool p0, uint256 p1, bool p2, address p3)"
      VariableDeclaration "p0"
         Type: bool
         Source: "bool p0"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p1"
         Type: uint256
         Source: "uint256 p1"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p2"
         Type: bool
         Source: "bool p2"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p3"
         Type: address
         Source: "address p3"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,address)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,address)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,address)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(bool,uint256,bool,address)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(bool,uint256,bool,address)
               Type: literal_string "log(bool,uint256,bool,address)"
               Source: "\"log(bool,uint256,bool,address)\""
            Identifier p0
               Type: bool
               Source: "p0"
            Identifier p1
               Type: uint256
               Source: "p1"
            Identifier p2
               Type: bool
               Source: "p2"
            Identifier p3
               Type: address
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(bool p0, uint256 p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,uint256)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(bool p0, uint256 p1, address p2, uint256 p3)"
      VariableDeclaration "p0"
         Type: bool
         Source: "bool p0"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p1"
         Type: uint256
         Source: "uint256 p1"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p2"
         Type: address
         Source: "address p2"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p3"
         Type: uint256
         Source: "uint256 p3"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,uint256)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,uint256)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,uint256)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(bool,uint256,address,uint256)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(bool,uint256,address,uint256)
               Type: literal_string "log(bool,uint256,address,uint256)"
               Source: "\"log(bool,uint256,address,uint256)\""
            Identifier p0
               Type: bool
               Source: "p0"
            Identifier p1
               Type: uint256
               Source: "p1"
            Identifier p2
               Type: address
               Source: "p2"
            Identifier p3
               Type: uint256
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(bool p0, uint256 p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,string)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(bool p0, uint256 p1, address p2, string memory p3)"
      VariableDeclaration "p0"
         Type: bool
         Source: "bool p0"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p1"
         Type: uint256
         Source: "uint256 p1"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p2"
         Type: address
         Source: "address p2"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p3"
         Type: string memory
         Source: "string memory p3"
        ElementaryTypeName string
           Source: "string"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,string)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,string)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,string)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(bool,uint256,address,string)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(bool,uint256,address,string)
               Type: literal_string "log(bool,uint256,address,string)"
               Source: "\"log(bool,uint256,address,string)\""
            Identifier p0
               Type: bool
               Source: "p0"
            Identifier p1
               Type: uint256
               Source: "p1"
            Identifier p2
               Type: address
               Source: "p2"
            Identifier p3
               Type: string memory
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(bool p0, uint256 p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,bool)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(bool p0, uint256 p1, address p2, bool p3)"
      VariableDeclaration "p0"
         Type: bool
         Source: "bool p0"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p1"
         Type: uint256
         Source: "uint256 p1"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p2"
         Type: address
         Source: "address p2"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p3"
         Type: bool
         Source: "bool p3"
        ElementaryTypeName bool
           Source: "bool"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,bool)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,bool)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,bool)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(bool,uint256,address,bool)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(bool,uint256,address,bool)
               Type: literal_string "log(bool,uint256,address,bool)"
               Source: "\"log(bool,uint256,address,bool)\""
            Identifier p0
               Type: bool
               Source: "p0"
            Identifier p1
               Type: uint256
               Source: "p1"
            Identifier p2
               Type: address
               Source: "p2"
            Identifier p3
               Type: bool
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(bool p0, uint256 p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,address)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(bool p0, uint256 p1, address p2, address p3)"
      VariableDeclaration "p0"
         Type: bool
         Source: "bool p0"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p1"
         Type: uint256
         Source: "uint256 p1"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p2"
         Type: address
         Source: "address p2"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p3"
         Type: address
         Source: "address p3"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,address)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,address)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,address)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(bool,uint256,address,address)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(bool,uint256,address,address)
               Type: literal_string "log(bool,uint256,address,address)"
               Source: "\"log(bool,uint256,address,address)\""
            Identifier p0
               Type: bool
               Source: "p0"
            Identifier p1
               Type: uint256
               Source: "p1"
            Identifier p2
               Type: address
               Source: "p2"
            Identifier p3
               Type: address
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,uint256)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(bool p0, string memory p1, uint256 p2, uint256 p3)"
      VariableDeclaration "p0"
         Type: bool
         Source: "bool p0"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p1"
         Type: string memory
         Source: "string memory p1"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p2"
         Type: uint256
         Source: "uint256 p2"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p3"
         Type: uint256
         Source: "uint256 p3"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,uint256)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,uint256)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,uint256)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(bool,string,uint256,uint256)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(bool,string,uint256,uint256)
               Type: literal_string "log(bool,string,uint256,uint256)"
               Source: "\"log(bool,string,uint256,uint256)\""
            Identifier p0
               Type: bool
               Source: "p0"
            Identifier p1
               Type: string memory
               Source: "p1"
            Identifier p2
               Type: uint256
               Source: "p2"
            Identifier p3
               Type: uint256
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(bool p0, string memory p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,string)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(bool p0, string memory p1, uint256 p2, string memory p3)"
      VariableDeclaration "p0"
         Type: bool
         Source: "bool p0"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p1"
         Type: string memory
         Source: "string memory p1"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p2"
         Type: uint256
         Source: "uint256 p2"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p3"
         Type: string memory
         Source: "string memory p3"
        ElementaryTypeName string
           Source: "string"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,string)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,string)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,string)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(bool,string,uint256,string)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(bool,string,uint256,string)
               Type: literal_string "log(bool,string,uint256,string)"
               Source: "\"log(bool,string,uint256,string)\""
            Identifier p0
               Type: bool
               Source: "p0"
            Identifier p1
               Type: string memory
               Source: "p1"
            Identifier p2
               Type: uint256
               Source: "p2"
            Identifier p3
               Type: string memory
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(bool p0, string memory p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,bool)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(bool p0, string memory p1, uint256 p2, bool p3)"
      VariableDeclaration "p0"
         Type: bool
         Source: "bool p0"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p1"
         Type: string memory
         Source: "string memory p1"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p2"
         Type: uint256
         Source: "uint256 p2"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p3"
         Type: bool
         Source: "bool p3"
        ElementaryTypeName bool
           Source: "bool"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,bool)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,bool)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,bool)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(bool,string,uint256,bool)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(bool,string,uint256,bool)
               Type: literal_string "log(bool,string,uint256,bool)"
               Source: "\"log(bool,string,uint256,bool)\""
            Identifier p0
               Type: bool
               Source: "p0"
            Identifier p1
               Type: string memory
               Source: "p1"
            Identifier p2
               Type: uint256
               Source: "p2"
            Identifier p3
               Type: bool
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(bool p0, string memory p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,address)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(bool p0, string memory p1, uint256 p2, address p3)"
      VariableDeclaration "p0"
         Type: bool
         Source: "bool p0"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p1"
         Type: string memory
         Source: "string memory p1"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p2"
         Type: uint256
         Source: "uint256 p2"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p3"
         Type: address
         Source: "address p3"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,address)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,address)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,address)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(bool,string,uint256,address)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(bool,string,uint256,address)
               Type: literal_string "log(bool,string,uint256,address)"
               Source: "\"log(bool,string,uint256,address)\""
            Identifier p0
               Type: bool
               Source: "p0"
            Identifier p1
               Type: string memory
               Source: "p1"
            Identifier p2
               Type: uint256
               Source: "p2"
            Identifier p3
               Type: address
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(bool p0, string memory p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,uint256)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(bool p0, string memory p1, string memory p2, uint256 p3)"
      VariableDeclaration "p0"
         Type: bool
         Source: "bool p0"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p1"
         Type: string memory
         Source: "string memory p1"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p2"
         Type: string memory
         Source: "string memory p2"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p3"
         Type: uint256
         Source: "uint256 p3"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,uint256)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,uint256)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,uint256)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(bool,string,string,uint256)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(bool,string,string,uint256)
               Type: literal_string "log(bool,string,string,uint256)"
               Source: "\"log(bool,string,string,uint256)\""
            Identifier p0
               Type: bool
               Source: "p0"
            Identifier p1
               Type: string memory
               Source: "p1"
            Identifier p2
               Type: string memory
               Source: "p2"
            Identifier p3
               Type: uint256
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,string)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(bool p0, string memory p1, string memory p2, string memory p3)"
      VariableDeclaration "p0"
         Type: bool
         Source: "bool p0"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p1"
         Type: string memory
         Source: "string memory p1"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p2"
         Type: string memory
         Source: "string memory p2"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p3"
         Type: string memory
         Source: "string memory p3"
        ElementaryTypeName string
           Source: "string"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,string)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,string)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,string)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(bool,string,string,string)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(bool,string,string,string)
               Type: literal_string "log(bool,string,string,string)"
               Source: "\"log(bool,string,string,string)\""
            Identifier p0
               Type: bool
               Source: "p0"
            Identifier p1
               Type: string memory
               Source: "p1"
            Identifier p2
               Type: string memory
               Source: "p2"
            Identifier p3
               Type: string memory
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(bool p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,bool)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(bool p0, string memory p1, string memory p2, bool p3)"
      VariableDeclaration "p0"
         Type: bool
         Source: "bool p0"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p1"
         Type: string memory
         Source: "string memory p1"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p2"
         Type: string memory
         Source: "string memory p2"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p3"
         Type: bool
         Source: "bool p3"
        ElementaryTypeName bool
           Source: "bool"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,bool)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,bool)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,bool)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(bool,string,string,bool)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(bool,string,string,bool)
               Type: literal_string "log(bool,string,string,bool)"
               Source: "\"log(bool,string,string,bool)\""
            Identifier p0
               Type: bool
               Source: "p0"
            Identifier p1
               Type: string memory
               Source: "p1"
            Identifier p2
               Type: string memory
               Source: "p2"
            Identifier p3
               Type: bool
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(bool p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,address)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(bool p0, string memory p1, string memory p2, address p3)"
      VariableDeclaration "p0"
         Type: bool
         Source: "bool p0"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p1"
         Type: string memory
         Source: "string memory p1"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p2"
         Type: string memory
         Source: "string memory p2"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p3"
         Type: address
         Source: "address p3"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,address)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,address)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,address)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(bool,string,string,address)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(bool,string,string,address)
               Type: literal_string "log(bool,string,string,address)"
               Source: "\"log(bool,string,string,address)\""
            Identifier p0
               Type: bool
               Source: "p0"
            Identifier p1
               Type: string memory
               Source: "p1"
            Identifier p2
               Type: string memory
               Source: "p2"
            Identifier p3
               Type: address
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(bool p0, string memory p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,uint256)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(bool p0, string memory p1, bool p2, uint256 p3)"
      VariableDeclaration "p0"
         Type: bool
         Source: "bool p0"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p1"
         Type: string memory
         Source: "string memory p1"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p2"
         Type: bool
         Source: "bool p2"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p3"
         Type: uint256
         Source: "uint256 p3"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,uint256)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,uint256)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,uint256)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(bool,string,bool,uint256)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(bool,string,bool,uint256)
               Type: literal_string "log(bool,string,bool,uint256)"
               Source: "\"log(bool,string,bool,uint256)\""
            Identifier p0
               Type: bool
               Source: "p0"
            Identifier p1
               Type: string memory
               Source: "p1"
            Identifier p2
               Type: bool
               Source: "p2"
            Identifier p3
               Type: uint256
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(bool p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,string)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(bool p0, string memory p1, bool p2, string memory p3)"
      VariableDeclaration "p0"
         Type: bool
         Source: "bool p0"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p1"
         Type: string memory
         Source: "string memory p1"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p2"
         Type: bool
         Source: "bool p2"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p3"
         Type: string memory
         Source: "string memory p3"
        ElementaryTypeName string
           Source: "string"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,string)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,string)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,string)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(bool,string,bool,string)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(bool,string,bool,string)
               Type: literal_string "log(bool,string,bool,string)"
               Source: "\"log(bool,string,bool,string)\""
            Identifier p0
               Type: bool
               Source: "p0"
            Identifier p1
               Type: string memory
               Source: "p1"
            Identifier p2
               Type: bool
               Source: "p2"
            Identifier p3
               Type: string memory
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(bool p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,bool)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(bool p0, string memory p1, bool p2, bool p3)"
      VariableDeclaration "p0"
         Type: bool
         Source: "bool p0"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p1"
         Type: string memory
         Source: "string memory p1"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p2"
         Type: bool
         Source: "bool p2"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p3"
         Type: bool
         Source: "bool p3"
        ElementaryTypeName bool
           Source: "bool"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,bool)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,bool)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,bool)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(bool,string,bool,bool)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(bool,string,bool,bool)
               Type: literal_string "log(bool,string,bool,bool)"
               Source: "\"log(bool,string,bool,bool)\""
            Identifier p0
               Type: bool
               Source: "p0"
            Identifier p1
               Type: string memory
               Source: "p1"
            Identifier p2
               Type: bool
               Source: "p2"
            Identifier p3
               Type: bool
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(bool p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,address)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(bool p0, string memory p1, bool p2, address p3)"
      VariableDeclaration "p0"
         Type: bool
         Source: "bool p0"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p1"
         Type: string memory
         Source: "string memory p1"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p2"
         Type: bool
         Source: "bool p2"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p3"
         Type: address
         Source: "address p3"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,address)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,address)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,address)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(bool,string,bool,address)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(bool,string,bool,address)
               Type: literal_string "log(bool,string,bool,address)"
               Source: "\"log(bool,string,bool,address)\""
            Identifier p0
               Type: bool
               Source: "p0"
            Identifier p1
               Type: string memory
               Source: "p1"
            Identifier p2
               Type: bool
               Source: "p2"
            Identifier p3
               Type: address
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(bool p0, string memory p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,uint256)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(bool p0, string memory p1, address p2, uint256 p3)"
      VariableDeclaration "p0"
         Type: bool
         Source: "bool p0"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p1"
         Type: string memory
         Source: "string memory p1"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p2"
         Type: address
         Source: "address p2"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p3"
         Type: uint256
         Source: "uint256 p3"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,uint256)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,uint256)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,uint256)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(bool,string,address,uint256)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(bool,string,address,uint256)
               Type: literal_string "log(bool,string,address,uint256)"
               Source: "\"log(bool,string,address,uint256)\""
            Identifier p0
               Type: bool
               Source: "p0"
            Identifier p1
               Type: string memory
               Source: "p1"
            Identifier p2
               Type: address
               Source: "p2"
            Identifier p3
               Type: uint256
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(bool p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,string)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(bool p0, string memory p1, address p2, string memory p3)"
      VariableDeclaration "p0"
         Type: bool
         Source: "bool p0"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p1"
         Type: string memory
         Source: "string memory p1"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p2"
         Type: address
         Source: "address p2"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p3"
         Type: string memory
         Source: "string memory p3"
        ElementaryTypeName string
           Source: "string"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,string)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,string)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,string)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(bool,string,address,string)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(bool,string,address,string)
               Type: literal_string "log(bool,string,address,string)"
               Source: "\"log(bool,string,address,string)\""
            Identifier p0
               Type: bool
               Source: "p0"
            Identifier p1
               Type: string memory
               Source: "p1"
            Identifier p2
               Type: address
               Source: "p2"
            Identifier p3
               Type: string memory
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(bool p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,bool)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(bool p0, string memory p1, address p2, bool p3)"
      VariableDeclaration "p0"
         Type: bool
         Source: "bool p0"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p1"
         Type: string memory
         Source: "string memory p1"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p2"
         Type: address
         Source: "address p2"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p3"
         Type: bool
         Source: "bool p3"
        ElementaryTypeName bool
           Source: "bool"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,bool)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,bool)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,bool)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(bool,string,address,bool)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(bool,string,address,bool)
               Type: literal_string "log(bool,string,address,bool)"
               Source: "\"log(bool,string,address,bool)\""
            Identifier p0
               Type: bool
               Source: "p0"
            Identifier p1
               Type: string memory
               Source: "p1"
            Identifier p2
               Type: address
               Source: "p2"
            Identifier p3
               Type: bool
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(bool p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,address)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(bool p0, string memory p1, address p2, address p3)"
      VariableDeclaration "p0"
         Type: bool
         Source: "bool p0"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p1"
         Type: string memory
         Source: "string memory p1"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p2"
         Type: address
         Source: "address p2"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p3"
         Type: address
         Source: "address p3"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,address)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,address)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,address)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(bool,string,address,address)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(bool,string,address,address)
               Type: literal_string "log(bool,string,address,address)"
               Source: "\"log(bool,string,address,address)\""
            Identifier p0
               Type: bool
               Source: "p0"
            Identifier p1
               Type: string memory
               Source: "p1"
            Identifier p2
               Type: address
               Source: "p2"
            Identifier p3
               Type: address
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(bool p0, bool p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,uint256)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(bool p0, bool p1, uint256 p2, uint256 p3)"
      VariableDeclaration "p0"
         Type: bool
         Source: "bool p0"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p1"
         Type: bool
         Source: "bool p1"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p2"
         Type: uint256
         Source: "uint256 p2"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p3"
         Type: uint256
         Source: "uint256 p3"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,uint256)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,uint256)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,uint256)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(bool,bool,uint256,uint256)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(bool,bool,uint256,uint256)
               Type: literal_string "log(bool,bool,uint256,uint256)"
               Source: "\"log(bool,bool,uint256,uint256)\""
            Identifier p0
               Type: bool
               Source: "p0"
            Identifier p1
               Type: bool
               Source: "p1"
            Identifier p2
               Type: uint256
               Source: "p2"
            Identifier p3
               Type: uint256
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(bool p0, bool p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,string)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(bool p0, bool p1, uint256 p2, string memory p3)"
      VariableDeclaration "p0"
         Type: bool
         Source: "bool p0"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p1"
         Type: bool
         Source: "bool p1"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p2"
         Type: uint256
         Source: "uint256 p2"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p3"
         Type: string memory
         Source: "string memory p3"
        ElementaryTypeName string
           Source: "string"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,string)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,string)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,string)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(bool,bool,uint256,string)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(bool,bool,uint256,string)
               Type: literal_string "log(bool,bool,uint256,string)"
               Source: "\"log(bool,bool,uint256,string)\""
            Identifier p0
               Type: bool
               Source: "p0"
            Identifier p1
               Type: bool
               Source: "p1"
            Identifier p2
               Type: uint256
               Source: "p2"
            Identifier p3
               Type: string memory
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(bool p0, bool p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,bool)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(bool p0, bool p1, uint256 p2, bool p3)"
      VariableDeclaration "p0"
         Type: bool
         Source: "bool p0"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p1"
         Type: bool
         Source: "bool p1"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p2"
         Type: uint256
         Source: "uint256 p2"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p3"
         Type: bool
         Source: "bool p3"
        ElementaryTypeName bool
           Source: "bool"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,bool)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,bool)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,bool)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(bool,bool,uint256,bool)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(bool,bool,uint256,bool)
               Type: literal_string "log(bool,bool,uint256,bool)"
               Source: "\"log(bool,bool,uint256,bool)\""
            Identifier p0
               Type: bool
               Source: "p0"
            Identifier p1
               Type: bool
               Source: "p1"
            Identifier p2
               Type: uint256
               Source: "p2"
            Identifier p3
               Type: bool
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(bool p0, bool p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,address)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(bool p0, bool p1, uint256 p2, address p3)"
      VariableDeclaration "p0"
         Type: bool
         Source: "bool p0"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p1"
         Type: bool
         Source: "bool p1"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p2"
         Type: uint256
         Source: "uint256 p2"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p3"
         Type: address
         Source: "address p3"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,address)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,address)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,address)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(bool,bool,uint256,address)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(bool,bool,uint256,address)
               Type: literal_string "log(bool,bool,uint256,address)"
               Source: "\"log(bool,bool,uint256,address)\""
            Identifier p0
               Type: bool
               Source: "p0"
            Identifier p1
               Type: bool
               Source: "p1"
            Identifier p2
               Type: uint256
               Source: "p2"
            Identifier p3
               Type: address
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(bool p0, bool p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,uint256)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(bool p0, bool p1, string memory p2, uint256 p3)"
      VariableDeclaration "p0"
         Type: bool
         Source: "bool p0"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p1"
         Type: bool
         Source: "bool p1"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p2"
         Type: string memory
         Source: "string memory p2"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p3"
         Type: uint256
         Source: "uint256 p3"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,uint256)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,uint256)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,uint256)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(bool,bool,string,uint256)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(bool,bool,string,uint256)
               Type: literal_string "log(bool,bool,string,uint256)"
               Source: "\"log(bool,bool,string,uint256)\""
            Identifier p0
               Type: bool
               Source: "p0"
            Identifier p1
               Type: bool
               Source: "p1"
            Identifier p2
               Type: string memory
               Source: "p2"
            Identifier p3
               Type: uint256
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(bool p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,string)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(bool p0, bool p1, string memory p2, string memory p3)"
      VariableDeclaration "p0"
         Type: bool
         Source: "bool p0"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p1"
         Type: bool
         Source: "bool p1"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p2"
         Type: string memory
         Source: "string memory p2"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p3"
         Type: string memory
         Source: "string memory p3"
        ElementaryTypeName string
           Source: "string"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,string)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,string)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,string)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(bool,bool,string,string)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(bool,bool,string,string)
               Type: literal_string "log(bool,bool,string,string)"
               Source: "\"log(bool,bool,string,string)\""
            Identifier p0
               Type: bool
               Source: "p0"
            Identifier p1
               Type: bool
               Source: "p1"
            Identifier p2
               Type: string memory
               Source: "p2"
            Identifier p3
               Type: string memory
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(bool p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,bool)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(bool p0, bool p1, string memory p2, bool p3)"
      VariableDeclaration "p0"
         Type: bool
         Source: "bool p0"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p1"
         Type: bool
         Source: "bool p1"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p2"
         Type: string memory
         Source: "string memory p2"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p3"
         Type: bool
         Source: "bool p3"
        ElementaryTypeName bool
           Source: "bool"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,bool)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,bool)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,bool)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(bool,bool,string,bool)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(bool,bool,string,bool)
               Type: literal_string "log(bool,bool,string,bool)"
               Source: "\"log(bool,bool,string,bool)\""
            Identifier p0
               Type: bool
               Source: "p0"
            Identifier p1
               Type: bool
               Source: "p1"
            Identifier p2
               Type: string memory
               Source: "p2"
            Identifier p3
               Type: bool
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(bool p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,address)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(bool p0, bool p1, string memory p2, address p3)"
      VariableDeclaration "p0"
         Type: bool
         Source: "bool p0"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p1"
         Type: bool
         Source: "bool p1"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p2"
         Type: string memory
         Source: "string memory p2"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p3"
         Type: address
         Source: "address p3"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,address)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,address)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,address)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(bool,bool,string,address)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(bool,bool,string,address)
               Type: literal_string "log(bool,bool,string,address)"
               Source: "\"log(bool,bool,string,address)\""
            Identifier p0
               Type: bool
               Source: "p0"
            Identifier p1
               Type: bool
               Source: "p1"
            Identifier p2
               Type: string memory
               Source: "p2"
            Identifier p3
               Type: address
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(bool p0, bool p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,uint256)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(bool p0, bool p1, bool p2, uint256 p3)"
      VariableDeclaration "p0"
         Type: bool
         Source: "bool p0"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p1"
         Type: bool
         Source: "bool p1"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p2"
         Type: bool
         Source: "bool p2"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p3"
         Type: uint256
         Source: "uint256 p3"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,uint256)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,uint256)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,uint256)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(bool,bool,bool,uint256)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(bool,bool,bool,uint256)
               Type: literal_string "log(bool,bool,bool,uint256)"
               Source: "\"log(bool,bool,bool,uint256)\""
            Identifier p0
               Type: bool
               Source: "p0"
            Identifier p1
               Type: bool
               Source: "p1"
            Identifier p2
               Type: bool
               Source: "p2"
            Identifier p3
               Type: uint256
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(bool p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,string)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(bool p0, bool p1, bool p2, string memory p3)"
      VariableDeclaration "p0"
         Type: bool
         Source: "bool p0"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p1"
         Type: bool
         Source: "bool p1"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p2"
         Type: bool
         Source: "bool p2"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p3"
         Type: string memory
         Source: "string memory p3"
        ElementaryTypeName string
           Source: "string"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,string)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,string)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,string)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(bool,bool,bool,string)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(bool,bool,bool,string)
               Type: literal_string "log(bool,bool,bool,string)"
               Source: "\"log(bool,bool,bool,string)\""
            Identifier p0
               Type: bool
               Source: "p0"
            Identifier p1
               Type: bool
               Source: "p1"
            Identifier p2
               Type: bool
               Source: "p2"
            Identifier p3
               Type: string memory
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(bool p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,bool)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(bool p0, bool p1, bool p2, bool p3)"
      VariableDeclaration "p0"
         Type: bool
         Source: "bool p0"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p1"
         Type: bool
         Source: "bool p1"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p2"
         Type: bool
         Source: "bool p2"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p3"
         Type: bool
         Source: "bool p3"
        ElementaryTypeName bool
           Source: "bool"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,bool)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,bool)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,bool)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(bool,bool,bool,bool)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(bool,bool,bool,bool)
               Type: literal_string "log(bool,bool,bool,bool)"
               Source: "\"log(bool,bool,bool,bool)\""
            Identifier p0
               Type: bool
               Source: "p0"
            Identifier p1
               Type: bool
               Source: "p1"
            Identifier p2
               Type: bool
               Source: "p2"
            Identifier p3
               Type: bool
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(bool p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,address)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(bool p0, bool p1, bool p2, address p3)"
      VariableDeclaration "p0"
         Type: bool
         Source: "bool p0"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p1"
         Type: bool
         Source: "bool p1"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p2"
         Type: bool
         Source: "bool p2"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p3"
         Type: address
         Source: "address p3"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,address)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,address)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,address)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(bool,bool,bool,address)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(bool,bool,bool,address)
               Type: literal_string "log(bool,bool,bool,address)"
               Source: "\"log(bool,bool,bool,address)\""
            Identifier p0
               Type: bool
               Source: "p0"
            Identifier p1
               Type: bool
               Source: "p1"
            Identifier p2
               Type: bool
               Source: "p2"
            Identifier p3
               Type: address
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(bool p0, bool p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,uint256)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(bool p0, bool p1, address p2, uint256 p3)"
      VariableDeclaration "p0"
         Type: bool
         Source: "bool p0"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p1"
         Type: bool
         Source: "bool p1"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p2"
         Type: address
         Source: "address p2"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p3"
         Type: uint256
         Source: "uint256 p3"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,uint256)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,uint256)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,uint256)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(bool,bool,address,uint256)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(bool,bool,address,uint256)
               Type: literal_string "log(bool,bool,address,uint256)"
               Source: "\"log(bool,bool,address,uint256)\""
            Identifier p0
               Type: bool
               Source: "p0"
            Identifier p1
               Type: bool
               Source: "p1"
            Identifier p2
               Type: address
               Source: "p2"
            Identifier p3
               Type: uint256
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(bool p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,string)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(bool p0, bool p1, address p2, string memory p3)"
      VariableDeclaration "p0"
         Type: bool
         Source: "bool p0"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p1"
         Type: bool
         Source: "bool p1"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p2"
         Type: address
         Source: "address p2"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p3"
         Type: string memory
         Source: "string memory p3"
        ElementaryTypeName string
           Source: "string"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,string)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,string)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,string)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(bool,bool,address,string)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(bool,bool,address,string)
               Type: literal_string "log(bool,bool,address,string)"
               Source: "\"log(bool,bool,address,string)\""
            Identifier p0
               Type: bool
               Source: "p0"
            Identifier p1
               Type: bool
               Source: "p1"
            Identifier p2
               Type: address
               Source: "p2"
            Identifier p3
               Type: string memory
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(bool p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,bool)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(bool p0, bool p1, address p2, bool p3)"
      VariableDeclaration "p0"
         Type: bool
         Source: "bool p0"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p1"
         Type: bool
         Source: "bool p1"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p2"
         Type: address
         Source: "address p2"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p3"
         Type: bool
         Source: "bool p3"
        ElementaryTypeName bool
           Source: "bool"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,bool)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,bool)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,bool)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(bool,bool,address,bool)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(bool,bool,address,bool)
               Type: literal_string "log(bool,bool,address,bool)"
               Source: "\"log(bool,bool,address,bool)\""
            Identifier p0
               Type: bool
               Source: "p0"
            Identifier p1
               Type: bool
               Source: "p1"
            Identifier p2
               Type: address
               Source: "p2"
            Identifier p3
               Type: bool
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(bool p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,address)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(bool p0, bool p1, address p2, address p3)"
      VariableDeclaration "p0"
         Type: bool
         Source: "bool p0"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p1"
         Type: bool
         Source: "bool p1"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p2"
         Type: address
         Source: "address p2"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p3"
         Type: address
         Source: "address p3"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,address)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,address)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,address)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(bool,bool,address,address)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(bool,bool,address,address)
               Type: literal_string "log(bool,bool,address,address)"
               Source: "\"log(bool,bool,address,address)\""
            Identifier p0
               Type: bool
               Source: "p0"
            Identifier p1
               Type: bool
               Source: "p1"
            Identifier p2
               Type: address
               Source: "p2"
            Identifier p3
               Type: address
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(bool p0, address p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,uint256)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(bool p0, address p1, uint256 p2, uint256 p3)"
      VariableDeclaration "p0"
         Type: bool
         Source: "bool p0"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p1"
         Type: address
         Source: "address p1"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p2"
         Type: uint256
         Source: "uint256 p2"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p3"
         Type: uint256
         Source: "uint256 p3"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,uint256)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,uint256)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,uint256)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(bool,address,uint256,uint256)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(bool,address,uint256,uint256)
               Type: literal_string "log(bool,address,uint256,uint256)"
               Source: "\"log(bool,address,uint256,uint256)\""
            Identifier p0
               Type: bool
               Source: "p0"
            Identifier p1
               Type: address
               Source: "p1"
            Identifier p2
               Type: uint256
               Source: "p2"
            Identifier p3
               Type: uint256
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(bool p0, address p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,string)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(bool p0, address p1, uint256 p2, string memory p3)"
      VariableDeclaration "p0"
         Type: bool
         Source: "bool p0"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p1"
         Type: address
         Source: "address p1"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p2"
         Type: uint256
         Source: "uint256 p2"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p3"
         Type: string memory
         Source: "string memory p3"
        ElementaryTypeName string
           Source: "string"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,string)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,string)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,string)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(bool,address,uint256,string)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(bool,address,uint256,string)
               Type: literal_string "log(bool,address,uint256,string)"
               Source: "\"log(bool,address,uint256,string)\""
            Identifier p0
               Type: bool
               Source: "p0"
            Identifier p1
               Type: address
               Source: "p1"
            Identifier p2
               Type: uint256
               Source: "p2"
            Identifier p3
               Type: string memory
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(bool p0, address p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,bool)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(bool p0, address p1, uint256 p2, bool p3)"
      VariableDeclaration "p0"
         Type: bool
         Source: "bool p0"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p1"
         Type: address
         Source: "address p1"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p2"
         Type: uint256
         Source: "uint256 p2"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p3"
         Type: bool
         Source: "bool p3"
        ElementaryTypeName bool
           Source: "bool"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,bool)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,bool)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,bool)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(bool,address,uint256,bool)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(bool,address,uint256,bool)
               Type: literal_string "log(bool,address,uint256,bool)"
               Source: "\"log(bool,address,uint256,bool)\""
            Identifier p0
               Type: bool
               Source: "p0"
            Identifier p1
               Type: address
               Source: "p1"
            Identifier p2
               Type: uint256
               Source: "p2"
            Identifier p3
               Type: bool
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(bool p0, address p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,address)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(bool p0, address p1, uint256 p2, address p3)"
      VariableDeclaration "p0"
         Type: bool
         Source: "bool p0"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p1"
         Type: address
         Source: "address p1"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p2"
         Type: uint256
         Source: "uint256 p2"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p3"
         Type: address
         Source: "address p3"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,address)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,address)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,address)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(bool,address,uint256,address)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(bool,address,uint256,address)
               Type: literal_string "log(bool,address,uint256,address)"
               Source: "\"log(bool,address,uint256,address)\""
            Identifier p0
               Type: bool
               Source: "p0"
            Identifier p1
               Type: address
               Source: "p1"
            Identifier p2
               Type: uint256
               Source: "p2"
            Identifier p3
               Type: address
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(bool p0, address p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,uint256)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(bool p0, address p1, string memory p2, uint256 p3)"
      VariableDeclaration "p0"
         Type: bool
         Source: "bool p0"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p1"
         Type: address
         Source: "address p1"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p2"
         Type: string memory
         Source: "string memory p2"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p3"
         Type: uint256
         Source: "uint256 p3"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,uint256)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,uint256)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,uint256)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(bool,address,string,uint256)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(bool,address,string,uint256)
               Type: literal_string "log(bool,address,string,uint256)"
               Source: "\"log(bool,address,string,uint256)\""
            Identifier p0
               Type: bool
               Source: "p0"
            Identifier p1
               Type: address
               Source: "p1"
            Identifier p2
               Type: string memory
               Source: "p2"
            Identifier p3
               Type: uint256
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(bool p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,string)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(bool p0, address p1, string memory p2, string memory p3)"
      VariableDeclaration "p0"
         Type: bool
         Source: "bool p0"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p1"
         Type: address
         Source: "address p1"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p2"
         Type: string memory
         Source: "string memory p2"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p3"
         Type: string memory
         Source: "string memory p3"
        ElementaryTypeName string
           Source: "string"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,string)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,string)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,string)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(bool,address,string,string)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(bool,address,string,string)
               Type: literal_string "log(bool,address,string,string)"
               Source: "\"log(bool,address,string,string)\""
            Identifier p0
               Type: bool
               Source: "p0"
            Identifier p1
               Type: address
               Source: "p1"
            Identifier p2
               Type: string memory
               Source: "p2"
            Identifier p3
               Type: string memory
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(bool p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,bool)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(bool p0, address p1, string memory p2, bool p3)"
      VariableDeclaration "p0"
         Type: bool
         Source: "bool p0"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p1"
         Type: address
         Source: "address p1"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p2"
         Type: string memory
         Source: "string memory p2"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p3"
         Type: bool
         Source: "bool p3"
        ElementaryTypeName bool
           Source: "bool"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,bool)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,bool)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,bool)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(bool,address,string,bool)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(bool,address,string,bool)
               Type: literal_string "log(bool,address,string,bool)"
               Source: "\"log(bool,address,string,bool)\""
            Identifier p0
               Type: bool
               Source: "p0"
            Identifier p1
               Type: address
               Source: "p1"
            Identifier p2
               Type: string memory
               Source: "p2"
            Identifier p3
               Type: bool
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(bool p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,address)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(bool p0, address p1, string memory p2, address p3)"
      VariableDeclaration "p0"
         Type: bool
         Source: "bool p0"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p1"
         Type: address
         Source: "address p1"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p2"
         Type: string memory
         Source: "string memory p2"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p3"
         Type: address
         Source: "address p3"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,address)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,address)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,address)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(bool,address,string,address)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(bool,address,string,address)
               Type: literal_string "log(bool,address,string,address)"
               Source: "\"log(bool,address,string,address)\""
            Identifier p0
               Type: bool
               Source: "p0"
            Identifier p1
               Type: address
               Source: "p1"
            Identifier p2
               Type: string memory
               Source: "p2"
            Identifier p3
               Type: address
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(bool p0, address p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,uint256)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(bool p0, address p1, bool p2, uint256 p3)"
      VariableDeclaration "p0"
         Type: bool
         Source: "bool p0"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p1"
         Type: address
         Source: "address p1"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p2"
         Type: bool
         Source: "bool p2"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p3"
         Type: uint256
         Source: "uint256 p3"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,uint256)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,uint256)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,uint256)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(bool,address,bool,uint256)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(bool,address,bool,uint256)
               Type: literal_string "log(bool,address,bool,uint256)"
               Source: "\"log(bool,address,bool,uint256)\""
            Identifier p0
               Type: bool
               Source: "p0"
            Identifier p1
               Type: address
               Source: "p1"
            Identifier p2
               Type: bool
               Source: "p2"
            Identifier p3
               Type: uint256
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(bool p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,string)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(bool p0, address p1, bool p2, string memory p3)"
      VariableDeclaration "p0"
         Type: bool
         Source: "bool p0"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p1"
         Type: address
         Source: "address p1"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p2"
         Type: bool
         Source: "bool p2"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p3"
         Type: string memory
         Source: "string memory p3"
        ElementaryTypeName string
           Source: "string"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,string)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,string)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,string)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(bool,address,bool,string)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(bool,address,bool,string)
               Type: literal_string "log(bool,address,bool,string)"
               Source: "\"log(bool,address,bool,string)\""
            Identifier p0
               Type: bool
               Source: "p0"
            Identifier p1
               Type: address
               Source: "p1"
            Identifier p2
               Type: bool
               Source: "p2"
            Identifier p3
               Type: string memory
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(bool p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,bool)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(bool p0, address p1, bool p2, bool p3)"
      VariableDeclaration "p0"
         Type: bool
         Source: "bool p0"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p1"
         Type: address
         Source: "address p1"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p2"
         Type: bool
         Source: "bool p2"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p3"
         Type: bool
         Source: "bool p3"
        ElementaryTypeName bool
           Source: "bool"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,bool)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,bool)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,bool)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(bool,address,bool,bool)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(bool,address,bool,bool)
               Type: literal_string "log(bool,address,bool,bool)"
               Source: "\"log(bool,address,bool,bool)\""
            Identifier p0
               Type: bool
               Source: "p0"
            Identifier p1
               Type: address
               Source: "p1"
            Identifier p2
               Type: bool
               Source: "p2"
            Identifier p3
               Type: bool
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(bool p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,address)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(bool p0, address p1, bool p2, address p3)"
      VariableDeclaration "p0"
         Type: bool
         Source: "bool p0"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p1"
         Type: address
         Source: "address p1"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p2"
         Type: bool
         Source: "bool p2"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p3"
         Type: address
         Source: "address p3"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,address)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,address)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,address)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(bool,address,bool,address)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(bool,address,bool,address)
               Type: literal_string "log(bool,address,bool,address)"
               Source: "\"log(bool,address,bool,address)\""
            Identifier p0
               Type: bool
               Source: "p0"
            Identifier p1
               Type: address
               Source: "p1"
            Identifier p2
               Type: bool
               Source: "p2"
            Identifier p3
               Type: address
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(bool p0, address p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,uint256)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(bool p0, address p1, address p2, uint256 p3)"
      VariableDeclaration "p0"
         Type: bool
         Source: "bool p0"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p1"
         Type: address
         Source: "address p1"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p2"
         Type: address
         Source: "address p2"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p3"
         Type: uint256
         Source: "uint256 p3"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,uint256)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,uint256)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,uint256)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(bool,address,address,uint256)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(bool,address,address,uint256)
               Type: literal_string "log(bool,address,address,uint256)"
               Source: "\"log(bool,address,address,uint256)\""
            Identifier p0
               Type: bool
               Source: "p0"
            Identifier p1
               Type: address
               Source: "p1"
            Identifier p2
               Type: address
               Source: "p2"
            Identifier p3
               Type: uint256
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(bool p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,string)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(bool p0, address p1, address p2, string memory p3)"
      VariableDeclaration "p0"
         Type: bool
         Source: "bool p0"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p1"
         Type: address
         Source: "address p1"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p2"
         Type: address
         Source: "address p2"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p3"
         Type: string memory
         Source: "string memory p3"
        ElementaryTypeName string
           Source: "string"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,string)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,string)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,string)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(bool,address,address,string)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(bool,address,address,string)
               Type: literal_string "log(bool,address,address,string)"
               Source: "\"log(bool,address,address,string)\""
            Identifier p0
               Type: bool
               Source: "p0"
            Identifier p1
               Type: address
               Source: "p1"
            Identifier p2
               Type: address
               Source: "p2"
            Identifier p3
               Type: string memory
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(bool p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,bool)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(bool p0, address p1, address p2, bool p3)"
      VariableDeclaration "p0"
         Type: bool
         Source: "bool p0"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p1"
         Type: address
         Source: "address p1"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p2"
         Type: address
         Source: "address p2"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p3"
         Type: bool
         Source: "bool p3"
        ElementaryTypeName bool
           Source: "bool"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,bool)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,bool)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,bool)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(bool,address,address,bool)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(bool,address,address,bool)
               Type: literal_string "log(bool,address,address,bool)"
               Source: "\"log(bool,address,address,bool)\""
            Identifier p0
               Type: bool
               Source: "p0"
            Identifier p1
               Type: address
               Source: "p1"
            Identifier p2
               Type: address
               Source: "p2"
            Identifier p3
               Type: bool
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(bool p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,address)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(bool p0, address p1, address p2, address p3)"
      VariableDeclaration "p0"
         Type: bool
         Source: "bool p0"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p1"
         Type: address
         Source: "address p1"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p2"
         Type: address
         Source: "address p2"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p3"
         Type: address
         Source: "address p3"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,address)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,address)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,address)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(bool,address,address,address)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(bool,address,address,address)
               Type: literal_string "log(bool,address,address,address)"
               Source: "\"log(bool,address,address,address)\""
            Identifier p0
               Type: bool
               Source: "p0"
            Identifier p1
               Type: address
               Source: "p1"
            Identifier p2
               Type: address
               Source: "p2"
            Identifier p3
               Type: address
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,uint256)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(address p0, uint256 p1, uint256 p2, uint256 p3)"
      VariableDeclaration "p0"
         Type: address
         Source: "address p0"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p1"
         Type: uint256
         Source: "uint256 p1"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p2"
         Type: uint256
         Source: "uint256 p2"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p3"
         Type: uint256
         Source: "uint256 p3"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,uint256)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,uint256)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,uint256)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(address,uint256,uint256,uint256)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(address,uint256,uint256,uint256)
               Type: literal_string "log(address,uint256,uint256,uint256)"
               Source: "\"log(address,uint256,uint256,uint256)\""
            Identifier p0
               Type: address
               Source: "p0"
            Identifier p1
               Type: uint256
               Source: "p1"
            Identifier p2
               Type: uint256
               Source: "p2"
            Identifier p3
               Type: uint256
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(address p0, uint256 p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,string)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(address p0, uint256 p1, uint256 p2, string memory p3)"
      VariableDeclaration "p0"
         Type: address
         Source: "address p0"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p1"
         Type: uint256
         Source: "uint256 p1"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p2"
         Type: uint256
         Source: "uint256 p2"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p3"
         Type: string memory
         Source: "string memory p3"
        ElementaryTypeName string
           Source: "string"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,string)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,string)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,string)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(address,uint256,uint256,string)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(address,uint256,uint256,string)
               Type: literal_string "log(address,uint256,uint256,string)"
               Source: "\"log(address,uint256,uint256,string)\""
            Identifier p0
               Type: address
               Source: "p0"
            Identifier p1
               Type: uint256
               Source: "p1"
            Identifier p2
               Type: uint256
               Source: "p2"
            Identifier p3
               Type: string memory
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(address p0, uint256 p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,bool)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(address p0, uint256 p1, uint256 p2, bool p3)"
      VariableDeclaration "p0"
         Type: address
         Source: "address p0"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p1"
         Type: uint256
         Source: "uint256 p1"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p2"
         Type: uint256
         Source: "uint256 p2"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p3"
         Type: bool
         Source: "bool p3"
        ElementaryTypeName bool
           Source: "bool"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,bool)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,bool)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,bool)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(address,uint256,uint256,bool)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(address,uint256,uint256,bool)
               Type: literal_string "log(address,uint256,uint256,bool)"
               Source: "\"log(address,uint256,uint256,bool)\""
            Identifier p0
               Type: address
               Source: "p0"
            Identifier p1
               Type: uint256
               Source: "p1"
            Identifier p2
               Type: uint256
               Source: "p2"
            Identifier p3
               Type: bool
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(address p0, uint256 p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,address)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(address p0, uint256 p1, uint256 p2, address p3)"
      VariableDeclaration "p0"
         Type: address
         Source: "address p0"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p1"
         Type: uint256
         Source: "uint256 p1"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p2"
         Type: uint256
         Source: "uint256 p2"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p3"
         Type: address
         Source: "address p3"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,address)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,address)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,address)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(address,uint256,uint256,address)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(address,uint256,uint256,address)
               Type: literal_string "log(address,uint256,uint256,address)"
               Source: "\"log(address,uint256,uint256,address)\""
            Identifier p0
               Type: address
               Source: "p0"
            Identifier p1
               Type: uint256
               Source: "p1"
            Identifier p2
               Type: uint256
               Source: "p2"
            Identifier p3
               Type: address
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(address p0, uint256 p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,uint256)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(address p0, uint256 p1, string memory p2, uint256 p3)"
      VariableDeclaration "p0"
         Type: address
         Source: "address p0"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p1"
         Type: uint256
         Source: "uint256 p1"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p2"
         Type: string memory
         Source: "string memory p2"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p3"
         Type: uint256
         Source: "uint256 p3"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,uint256)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,uint256)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,uint256)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(address,uint256,string,uint256)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(address,uint256,string,uint256)
               Type: literal_string "log(address,uint256,string,uint256)"
               Source: "\"log(address,uint256,string,uint256)\""
            Identifier p0
               Type: address
               Source: "p0"
            Identifier p1
               Type: uint256
               Source: "p1"
            Identifier p2
               Type: string memory
               Source: "p2"
            Identifier p3
               Type: uint256
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(address p0, uint256 p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,string)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(address p0, uint256 p1, string memory p2, string memory p3)"
      VariableDeclaration "p0"
         Type: address
         Source: "address p0"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p1"
         Type: uint256
         Source: "uint256 p1"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p2"
         Type: string memory
         Source: "string memory p2"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p3"
         Type: string memory
         Source: "string memory p3"
        ElementaryTypeName string
           Source: "string"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,string)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,string)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,string)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(address,uint256,string,string)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(address,uint256,string,string)
               Type: literal_string "log(address,uint256,string,string)"
               Source: "\"log(address,uint256,string,string)\""
            Identifier p0
               Type: address
               Source: "p0"
            Identifier p1
               Type: uint256
               Source: "p1"
            Identifier p2
               Type: string memory
               Source: "p2"
            Identifier p3
               Type: string memory
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(address p0, uint256 p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,bool)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(address p0, uint256 p1, string memory p2, bool p3)"
      VariableDeclaration "p0"
         Type: address
         Source: "address p0"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p1"
         Type: uint256
         Source: "uint256 p1"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p2"
         Type: string memory
         Source: "string memory p2"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p3"
         Type: bool
         Source: "bool p3"
        ElementaryTypeName bool
           Source: "bool"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,bool)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,bool)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,bool)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(address,uint256,string,bool)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(address,uint256,string,bool)
               Type: literal_string "log(address,uint256,string,bool)"
               Source: "\"log(address,uint256,string,bool)\""
            Identifier p0
               Type: address
               Source: "p0"
            Identifier p1
               Type: uint256
               Source: "p1"
            Identifier p2
               Type: string memory
               Source: "p2"
            Identifier p3
               Type: bool
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(address p0, uint256 p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,address)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(address p0, uint256 p1, string memory p2, address p3)"
      VariableDeclaration "p0"
         Type: address
         Source: "address p0"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p1"
         Type: uint256
         Source: "uint256 p1"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p2"
         Type: string memory
         Source: "string memory p2"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p3"
         Type: address
         Source: "address p3"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,address)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,address)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,address)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(address,uint256,string,address)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(address,uint256,string,address)
               Type: literal_string "log(address,uint256,string,address)"
               Source: "\"log(address,uint256,string,address)\""
            Identifier p0
               Type: address
               Source: "p0"
            Identifier p1
               Type: uint256
               Source: "p1"
            Identifier p2
               Type: string memory
               Source: "p2"
            Identifier p3
               Type: address
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(address p0, uint256 p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,uint256)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(address p0, uint256 p1, bool p2, uint256 p3)"
      VariableDeclaration "p0"
         Type: address
         Source: "address p0"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p1"
         Type: uint256
         Source: "uint256 p1"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p2"
         Type: bool
         Source: "bool p2"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p3"
         Type: uint256
         Source: "uint256 p3"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,uint256)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,uint256)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,uint256)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(address,uint256,bool,uint256)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(address,uint256,bool,uint256)
               Type: literal_string "log(address,uint256,bool,uint256)"
               Source: "\"log(address,uint256,bool,uint256)\""
            Identifier p0
               Type: address
               Source: "p0"
            Identifier p1
               Type: uint256
               Source: "p1"
            Identifier p2
               Type: bool
               Source: "p2"
            Identifier p3
               Type: uint256
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(address p0, uint256 p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,string)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(address p0, uint256 p1, bool p2, string memory p3)"
      VariableDeclaration "p0"
         Type: address
         Source: "address p0"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p1"
         Type: uint256
         Source: "uint256 p1"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p2"
         Type: bool
         Source: "bool p2"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p3"
         Type: string memory
         Source: "string memory p3"
        ElementaryTypeName string
           Source: "string"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,string)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,string)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,string)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(address,uint256,bool,string)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(address,uint256,bool,string)
               Type: literal_string "log(address,uint256,bool,string)"
               Source: "\"log(address,uint256,bool,string)\""
            Identifier p0
               Type: address
               Source: "p0"
            Identifier p1
               Type: uint256
               Source: "p1"
            Identifier p2
               Type: bool
               Source: "p2"
            Identifier p3
               Type: string memory
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(address p0, uint256 p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,bool)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(address p0, uint256 p1, bool p2, bool p3)"
      VariableDeclaration "p0"
         Type: address
         Source: "address p0"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p1"
         Type: uint256
         Source: "uint256 p1"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p2"
         Type: bool
         Source: "bool p2"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p3"
         Type: bool
         Source: "bool p3"
        ElementaryTypeName bool
           Source: "bool"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,bool)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,bool)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,bool)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(address,uint256,bool,bool)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(address,uint256,bool,bool)
               Type: literal_string "log(address,uint256,bool,bool)"
               Source: "\"log(address,uint256,bool,bool)\""
            Identifier p0
               Type: address
               Source: "p0"
            Identifier p1
               Type: uint256
               Source: "p1"
            Identifier p2
               Type: bool
               Source: "p2"
            Identifier p3
               Type: bool
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(address p0, uint256 p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,address)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(address p0, uint256 p1, bool p2, address p3)"
      VariableDeclaration "p0"
         Type: address
         Source: "address p0"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p1"
         Type: uint256
         Source: "uint256 p1"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p2"
         Type: bool
         Source: "bool p2"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p3"
         Type: address
         Source: "address p3"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,address)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,address)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,address)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(address,uint256,bool,address)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(address,uint256,bool,address)
               Type: literal_string "log(address,uint256,bool,address)"
               Source: "\"log(address,uint256,bool,address)\""
            Identifier p0
               Type: address
               Source: "p0"
            Identifier p1
               Type: uint256
               Source: "p1"
            Identifier p2
               Type: bool
               Source: "p2"
            Identifier p3
               Type: address
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(address p0, uint256 p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,uint256)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(address p0, uint256 p1, address p2, uint256 p3)"
      VariableDeclaration "p0"
         Type: address
         Source: "address p0"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p1"
         Type: uint256
         Source: "uint256 p1"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p2"
         Type: address
         Source: "address p2"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p3"
         Type: uint256
         Source: "uint256 p3"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,uint256)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,uint256)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,uint256)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(address,uint256,address,uint256)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(address,uint256,address,uint256)
               Type: literal_string "log(address,uint256,address,uint256)"
               Source: "\"log(address,uint256,address,uint256)\""
            Identifier p0
               Type: address
               Source: "p0"
            Identifier p1
               Type: uint256
               Source: "p1"
            Identifier p2
               Type: address
               Source: "p2"
            Identifier p3
               Type: uint256
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(address p0, uint256 p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,string)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(address p0, uint256 p1, address p2, string memory p3)"
      VariableDeclaration "p0"
         Type: address
         Source: "address p0"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p1"
         Type: uint256
         Source: "uint256 p1"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p2"
         Type: address
         Source: "address p2"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p3"
         Type: string memory
         Source: "string memory p3"
        ElementaryTypeName string
           Source: "string"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,string)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,string)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,string)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(address,uint256,address,string)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(address,uint256,address,string)
               Type: literal_string "log(address,uint256,address,string)"
               Source: "\"log(address,uint256,address,string)\""
            Identifier p0
               Type: address
               Source: "p0"
            Identifier p1
               Type: uint256
               Source: "p1"
            Identifier p2
               Type: address
               Source: "p2"
            Identifier p3
               Type: string memory
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(address p0, uint256 p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,bool)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(address p0, uint256 p1, address p2, bool p3)"
      VariableDeclaration "p0"
         Type: address
         Source: "address p0"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p1"
         Type: uint256
         Source: "uint256 p1"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p2"
         Type: address
         Source: "address p2"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p3"
         Type: bool
         Source: "bool p3"
        ElementaryTypeName bool
           Source: "bool"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,bool)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,bool)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,bool)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(address,uint256,address,bool)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(address,uint256,address,bool)
               Type: literal_string "log(address,uint256,address,bool)"
               Source: "\"log(address,uint256,address,bool)\""
            Identifier p0
               Type: address
               Source: "p0"
            Identifier p1
               Type: uint256
               Source: "p1"
            Identifier p2
               Type: address
               Source: "p2"
            Identifier p3
               Type: bool
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(address p0, uint256 p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,address)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(address p0, uint256 p1, address p2, address p3)"
      VariableDeclaration "p0"
         Type: address
         Source: "address p0"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p1"
         Type: uint256
         Source: "uint256 p1"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p2"
         Type: address
         Source: "address p2"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p3"
         Type: address
         Source: "address p3"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,address)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,address)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,address)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(address,uint256,address,address)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(address,uint256,address,address)
               Type: literal_string "log(address,uint256,address,address)"
               Source: "\"log(address,uint256,address,address)\""
            Identifier p0
               Type: address
               Source: "p0"
            Identifier p1
               Type: uint256
               Source: "p1"
            Identifier p2
               Type: address
               Source: "p2"
            Identifier p3
               Type: address
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(address p0, string memory p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,uint256)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(address p0, string memory p1, uint256 p2, uint256 p3)"
      VariableDeclaration "p0"
         Type: address
         Source: "address p0"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p1"
         Type: string memory
         Source: "string memory p1"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p2"
         Type: uint256
         Source: "uint256 p2"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p3"
         Type: uint256
         Source: "uint256 p3"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,uint256)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,uint256)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,uint256)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(address,string,uint256,uint256)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(address,string,uint256,uint256)
               Type: literal_string "log(address,string,uint256,uint256)"
               Source: "\"log(address,string,uint256,uint256)\""
            Identifier p0
               Type: address
               Source: "p0"
            Identifier p1
               Type: string memory
               Source: "p1"
            Identifier p2
               Type: uint256
               Source: "p2"
            Identifier p3
               Type: uint256
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(address p0, string memory p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,string)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(address p0, string memory p1, uint256 p2, string memory p3)"
      VariableDeclaration "p0"
         Type: address
         Source: "address p0"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p1"
         Type: string memory
         Source: "string memory p1"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p2"
         Type: uint256
         Source: "uint256 p2"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p3"
         Type: string memory
         Source: "string memory p3"
        ElementaryTypeName string
           Source: "string"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,string)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,string)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,string)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(address,string,uint256,string)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(address,string,uint256,string)
               Type: literal_string "log(address,string,uint256,string)"
               Source: "\"log(address,string,uint256,string)\""
            Identifier p0
               Type: address
               Source: "p0"
            Identifier p1
               Type: string memory
               Source: "p1"
            Identifier p2
               Type: uint256
               Source: "p2"
            Identifier p3
               Type: string memory
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(address p0, string memory p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,bool)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(address p0, string memory p1, uint256 p2, bool p3)"
      VariableDeclaration "p0"
         Type: address
         Source: "address p0"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p1"
         Type: string memory
         Source: "string memory p1"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p2"
         Type: uint256
         Source: "uint256 p2"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p3"
         Type: bool
         Source: "bool p3"
        ElementaryTypeName bool
           Source: "bool"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,bool)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,bool)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,bool)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(address,string,uint256,bool)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(address,string,uint256,bool)
               Type: literal_string "log(address,string,uint256,bool)"
               Source: "\"log(address,string,uint256,bool)\""
            Identifier p0
               Type: address
               Source: "p0"
            Identifier p1
               Type: string memory
               Source: "p1"
            Identifier p2
               Type: uint256
               Source: "p2"
            Identifier p3
               Type: bool
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(address p0, string memory p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,address)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(address p0, string memory p1, uint256 p2, address p3)"
      VariableDeclaration "p0"
         Type: address
         Source: "address p0"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p1"
         Type: string memory
         Source: "string memory p1"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p2"
         Type: uint256
         Source: "uint256 p2"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p3"
         Type: address
         Source: "address p3"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,address)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,address)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,address)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(address,string,uint256,address)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(address,string,uint256,address)
               Type: literal_string "log(address,string,uint256,address)"
               Source: "\"log(address,string,uint256,address)\""
            Identifier p0
               Type: address
               Source: "p0"
            Identifier p1
               Type: string memory
               Source: "p1"
            Identifier p2
               Type: uint256
               Source: "p2"
            Identifier p3
               Type: address
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(address p0, string memory p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,uint256)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(address p0, string memory p1, string memory p2, uint256 p3)"
      VariableDeclaration "p0"
         Type: address
         Source: "address p0"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p1"
         Type: string memory
         Source: "string memory p1"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p2"
         Type: string memory
         Source: "string memory p2"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p3"
         Type: uint256
         Source: "uint256 p3"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,uint256)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,uint256)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,uint256)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(address,string,string,uint256)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(address,string,string,uint256)
               Type: literal_string "log(address,string,string,uint256)"
               Source: "\"log(address,string,string,uint256)\""
            Identifier p0
               Type: address
               Source: "p0"
            Identifier p1
               Type: string memory
               Source: "p1"
            Identifier p2
               Type: string memory
               Source: "p2"
            Identifier p3
               Type: uint256
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(address p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,string)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(address p0, string memory p1, string memory p2, string memory p3)"
      VariableDeclaration "p0"
         Type: address
         Source: "address p0"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p1"
         Type: string memory
         Source: "string memory p1"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p2"
         Type: string memory
         Source: "string memory p2"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p3"
         Type: string memory
         Source: "string memory p3"
        ElementaryTypeName string
           Source: "string"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,string)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,string)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,string)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(address,string,string,string)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(address,string,string,string)
               Type: literal_string "log(address,string,string,string)"
               Source: "\"log(address,string,string,string)\""
            Identifier p0
               Type: address
               Source: "p0"
            Identifier p1
               Type: string memory
               Source: "p1"
            Identifier p2
               Type: string memory
               Source: "p2"
            Identifier p3
               Type: string memory
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(address p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,bool)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(address p0, string memory p1, string memory p2, bool p3)"
      VariableDeclaration "p0"
         Type: address
         Source: "address p0"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p1"
         Type: string memory
         Source: "string memory p1"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p2"
         Type: string memory
         Source: "string memory p2"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p3"
         Type: bool
         Source: "bool p3"
        ElementaryTypeName bool
           Source: "bool"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,bool)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,bool)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,bool)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(address,string,string,bool)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(address,string,string,bool)
               Type: literal_string "log(address,string,string,bool)"
               Source: "\"log(address,string,string,bool)\""
            Identifier p0
               Type: address
               Source: "p0"
            Identifier p1
               Type: string memory
               Source: "p1"
            Identifier p2
               Type: string memory
               Source: "p2"
            Identifier p3
               Type: bool
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(address p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,address)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(address p0, string memory p1, string memory p2, address p3)"
      VariableDeclaration "p0"
         Type: address
         Source: "address p0"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p1"
         Type: string memory
         Source: "string memory p1"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p2"
         Type: string memory
         Source: "string memory p2"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p3"
         Type: address
         Source: "address p3"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,address)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,address)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,address)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(address,string,string,address)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(address,string,string,address)
               Type: literal_string "log(address,string,string,address)"
               Source: "\"log(address,string,string,address)\""
            Identifier p0
               Type: address
               Source: "p0"
            Identifier p1
               Type: string memory
               Source: "p1"
            Identifier p2
               Type: string memory
               Source: "p2"
            Identifier p3
               Type: address
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(address p0, string memory p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,uint256)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(address p0, string memory p1, bool p2, uint256 p3)"
      VariableDeclaration "p0"
         Type: address
         Source: "address p0"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p1"
         Type: string memory
         Source: "string memory p1"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p2"
         Type: bool
         Source: "bool p2"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p3"
         Type: uint256
         Source: "uint256 p3"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,uint256)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,uint256)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,uint256)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(address,string,bool,uint256)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(address,string,bool,uint256)
               Type: literal_string "log(address,string,bool,uint256)"
               Source: "\"log(address,string,bool,uint256)\""
            Identifier p0
               Type: address
               Source: "p0"
            Identifier p1
               Type: string memory
               Source: "p1"
            Identifier p2
               Type: bool
               Source: "p2"
            Identifier p3
               Type: uint256
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(address p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,string)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(address p0, string memory p1, bool p2, string memory p3)"
      VariableDeclaration "p0"
         Type: address
         Source: "address p0"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p1"
         Type: string memory
         Source: "string memory p1"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p2"
         Type: bool
         Source: "bool p2"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p3"
         Type: string memory
         Source: "string memory p3"
        ElementaryTypeName string
           Source: "string"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,string)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,string)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,string)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(address,string,bool,string)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(address,string,bool,string)
               Type: literal_string "log(address,string,bool,string)"
               Source: "\"log(address,string,bool,string)\""
            Identifier p0
               Type: address
               Source: "p0"
            Identifier p1
               Type: string memory
               Source: "p1"
            Identifier p2
               Type: bool
               Source: "p2"
            Identifier p3
               Type: string memory
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(address p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,bool)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(address p0, string memory p1, bool p2, bool p3)"
      VariableDeclaration "p0"
         Type: address
         Source: "address p0"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p1"
         Type: string memory
         Source: "string memory p1"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p2"
         Type: bool
         Source: "bool p2"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p3"
         Type: bool
         Source: "bool p3"
        ElementaryTypeName bool
           Source: "bool"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,bool)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,bool)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,bool)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(address,string,bool,bool)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(address,string,bool,bool)
               Type: literal_string "log(address,string,bool,bool)"
               Source: "\"log(address,string,bool,bool)\""
            Identifier p0
               Type: address
               Source: "p0"
            Identifier p1
               Type: string memory
               Source: "p1"
            Identifier p2
               Type: bool
               Source: "p2"
            Identifier p3
               Type: bool
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(address p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,address)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(address p0, string memory p1, bool p2, address p3)"
      VariableDeclaration "p0"
         Type: address
         Source: "address p0"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p1"
         Type: string memory
         Source: "string memory p1"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p2"
         Type: bool
         Source: "bool p2"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p3"
         Type: address
         Source: "address p3"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,address)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,address)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,address)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(address,string,bool,address)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(address,string,bool,address)
               Type: literal_string "log(address,string,bool,address)"
               Source: "\"log(address,string,bool,address)\""
            Identifier p0
               Type: address
               Source: "p0"
            Identifier p1
               Type: string memory
               Source: "p1"
            Identifier p2
               Type: bool
               Source: "p2"
            Identifier p3
               Type: address
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(address p0, string memory p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,uint256)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(address p0, string memory p1, address p2, uint256 p3)"
      VariableDeclaration "p0"
         Type: address
         Source: "address p0"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p1"
         Type: string memory
         Source: "string memory p1"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p2"
         Type: address
         Source: "address p2"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p3"
         Type: uint256
         Source: "uint256 p3"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,uint256)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,uint256)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,uint256)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(address,string,address,uint256)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(address,string,address,uint256)
               Type: literal_string "log(address,string,address,uint256)"
               Source: "\"log(address,string,address,uint256)\""
            Identifier p0
               Type: address
               Source: "p0"
            Identifier p1
               Type: string memory
               Source: "p1"
            Identifier p2
               Type: address
               Source: "p2"
            Identifier p3
               Type: uint256
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(address p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,string)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(address p0, string memory p1, address p2, string memory p3)"
      VariableDeclaration "p0"
         Type: address
         Source: "address p0"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p1"
         Type: string memory
         Source: "string memory p1"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p2"
         Type: address
         Source: "address p2"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p3"
         Type: string memory
         Source: "string memory p3"
        ElementaryTypeName string
           Source: "string"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,string)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,string)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,string)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(address,string,address,string)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(address,string,address,string)
               Type: literal_string "log(address,string,address,string)"
               Source: "\"log(address,string,address,string)\""
            Identifier p0
               Type: address
               Source: "p0"
            Identifier p1
               Type: string memory
               Source: "p1"
            Identifier p2
               Type: address
               Source: "p2"
            Identifier p3
               Type: string memory
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(address p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,bool)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(address p0, string memory p1, address p2, bool p3)"
      VariableDeclaration "p0"
         Type: address
         Source: "address p0"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p1"
         Type: string memory
         Source: "string memory p1"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p2"
         Type: address
         Source: "address p2"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p3"
         Type: bool
         Source: "bool p3"
        ElementaryTypeName bool
           Source: "bool"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,bool)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,bool)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,bool)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(address,string,address,bool)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(address,string,address,bool)
               Type: literal_string "log(address,string,address,bool)"
               Source: "\"log(address,string,address,bool)\""
            Identifier p0
               Type: address
               Source: "p0"
            Identifier p1
               Type: string memory
               Source: "p1"
            Identifier p2
               Type: address
               Source: "p2"
            Identifier p3
               Type: bool
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(address p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,address)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(address p0, string memory p1, address p2, address p3)"
      VariableDeclaration "p0"
         Type: address
         Source: "address p0"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p1"
         Type: string memory
         Source: "string memory p1"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p2"
         Type: address
         Source: "address p2"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p3"
         Type: address
         Source: "address p3"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,address)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,address)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,address)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(address,string,address,address)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(address,string,address,address)
               Type: literal_string "log(address,string,address,address)"
               Source: "\"log(address,string,address,address)\""
            Identifier p0
               Type: address
               Source: "p0"
            Identifier p1
               Type: string memory
               Source: "p1"
            Identifier p2
               Type: address
               Source: "p2"
            Identifier p3
               Type: address
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(address p0, bool p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,uint256)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(address p0, bool p1, uint256 p2, uint256 p3)"
      VariableDeclaration "p0"
         Type: address
         Source: "address p0"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p1"
         Type: bool
         Source: "bool p1"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p2"
         Type: uint256
         Source: "uint256 p2"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p3"
         Type: uint256
         Source: "uint256 p3"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,uint256)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,uint256)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,uint256)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(address,bool,uint256,uint256)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(address,bool,uint256,uint256)
               Type: literal_string "log(address,bool,uint256,uint256)"
               Source: "\"log(address,bool,uint256,uint256)\""
            Identifier p0
               Type: address
               Source: "p0"
            Identifier p1
               Type: bool
               Source: "p1"
            Identifier p2
               Type: uint256
               Source: "p2"
            Identifier p3
               Type: uint256
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(address p0, bool p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,string)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(address p0, bool p1, uint256 p2, string memory p3)"
      VariableDeclaration "p0"
         Type: address
         Source: "address p0"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p1"
         Type: bool
         Source: "bool p1"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p2"
         Type: uint256
         Source: "uint256 p2"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p3"
         Type: string memory
         Source: "string memory p3"
        ElementaryTypeName string
           Source: "string"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,string)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,string)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,string)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(address,bool,uint256,string)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(address,bool,uint256,string)
               Type: literal_string "log(address,bool,uint256,string)"
               Source: "\"log(address,bool,uint256,string)\""
            Identifier p0
               Type: address
               Source: "p0"
            Identifier p1
               Type: bool
               Source: "p1"
            Identifier p2
               Type: uint256
               Source: "p2"
            Identifier p3
               Type: string memory
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(address p0, bool p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,bool)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(address p0, bool p1, uint256 p2, bool p3)"
      VariableDeclaration "p0"
         Type: address
         Source: "address p0"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p1"
         Type: bool
         Source: "bool p1"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p2"
         Type: uint256
         Source: "uint256 p2"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p3"
         Type: bool
         Source: "bool p3"
        ElementaryTypeName bool
           Source: "bool"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,bool)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,bool)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,bool)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(address,bool,uint256,bool)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(address,bool,uint256,bool)
               Type: literal_string "log(address,bool,uint256,bool)"
               Source: "\"log(address,bool,uint256,bool)\""
            Identifier p0
               Type: address
               Source: "p0"
            Identifier p1
               Type: bool
               Source: "p1"
            Identifier p2
               Type: uint256
               Source: "p2"
            Identifier p3
               Type: bool
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(address p0, bool p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,address)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(address p0, bool p1, uint256 p2, address p3)"
      VariableDeclaration "p0"
         Type: address
         Source: "address p0"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p1"
         Type: bool
         Source: "bool p1"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p2"
         Type: uint256
         Source: "uint256 p2"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p3"
         Type: address
         Source: "address p3"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,address)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,address)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,address)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(address,bool,uint256,address)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(address,bool,uint256,address)
               Type: literal_string "log(address,bool,uint256,address)"
               Source: "\"log(address,bool,uint256,address)\""
            Identifier p0
               Type: address
               Source: "p0"
            Identifier p1
               Type: bool
               Source: "p1"
            Identifier p2
               Type: uint256
               Source: "p2"
            Identifier p3
               Type: address
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(address p0, bool p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,uint256)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(address p0, bool p1, string memory p2, uint256 p3)"
      VariableDeclaration "p0"
         Type: address
         Source: "address p0"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p1"
         Type: bool
         Source: "bool p1"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p2"
         Type: string memory
         Source: "string memory p2"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p3"
         Type: uint256
         Source: "uint256 p3"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,uint256)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,uint256)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,uint256)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(address,bool,string,uint256)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(address,bool,string,uint256)
               Type: literal_string "log(address,bool,string,uint256)"
               Source: "\"log(address,bool,string,uint256)\""
            Identifier p0
               Type: address
               Source: "p0"
            Identifier p1
               Type: bool
               Source: "p1"
            Identifier p2
               Type: string memory
               Source: "p2"
            Identifier p3
               Type: uint256
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(address p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,string)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(address p0, bool p1, string memory p2, string memory p3)"
      VariableDeclaration "p0"
         Type: address
         Source: "address p0"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p1"
         Type: bool
         Source: "bool p1"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p2"
         Type: string memory
         Source: "string memory p2"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p3"
         Type: string memory
         Source: "string memory p3"
        ElementaryTypeName string
           Source: "string"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,string)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,string)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,string)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(address,bool,string,string)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(address,bool,string,string)
               Type: literal_string "log(address,bool,string,string)"
               Source: "\"log(address,bool,string,string)\""
            Identifier p0
               Type: address
               Source: "p0"
            Identifier p1
               Type: bool
               Source: "p1"
            Identifier p2
               Type: string memory
               Source: "p2"
            Identifier p3
               Type: string memory
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(address p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,bool)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(address p0, bool p1, string memory p2, bool p3)"
      VariableDeclaration "p0"
         Type: address
         Source: "address p0"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p1"
         Type: bool
         Source: "bool p1"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p2"
         Type: string memory
         Source: "string memory p2"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p3"
         Type: bool
         Source: "bool p3"
        ElementaryTypeName bool
           Source: "bool"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,bool)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,bool)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,bool)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(address,bool,string,bool)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(address,bool,string,bool)
               Type: literal_string "log(address,bool,string,bool)"
               Source: "\"log(address,bool,string,bool)\""
            Identifier p0
               Type: address
               Source: "p0"
            Identifier p1
               Type: bool
               Source: "p1"
            Identifier p2
               Type: string memory
               Source: "p2"
            Identifier p3
               Type: bool
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(address p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,address)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(address p0, bool p1, string memory p2, address p3)"
      VariableDeclaration "p0"
         Type: address
         Source: "address p0"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p1"
         Type: bool
         Source: "bool p1"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p2"
         Type: string memory
         Source: "string memory p2"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p3"
         Type: address
         Source: "address p3"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,address)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,address)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,address)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(address,bool,string,address)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(address,bool,string,address)
               Type: literal_string "log(address,bool,string,address)"
               Source: "\"log(address,bool,string,address)\""
            Identifier p0
               Type: address
               Source: "p0"
            Identifier p1
               Type: bool
               Source: "p1"
            Identifier p2
               Type: string memory
               Source: "p2"
            Identifier p3
               Type: address
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(address p0, bool p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,uint256)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(address p0, bool p1, bool p2, uint256 p3)"
      VariableDeclaration "p0"
         Type: address
         Source: "address p0"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p1"
         Type: bool
         Source: "bool p1"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p2"
         Type: bool
         Source: "bool p2"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p3"
         Type: uint256
         Source: "uint256 p3"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,uint256)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,uint256)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,uint256)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(address,bool,bool,uint256)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(address,bool,bool,uint256)
               Type: literal_string "log(address,bool,bool,uint256)"
               Source: "\"log(address,bool,bool,uint256)\""
            Identifier p0
               Type: address
               Source: "p0"
            Identifier p1
               Type: bool
               Source: "p1"
            Identifier p2
               Type: bool
               Source: "p2"
            Identifier p3
               Type: uint256
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(address p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,string)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(address p0, bool p1, bool p2, string memory p3)"
      VariableDeclaration "p0"
         Type: address
         Source: "address p0"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p1"
         Type: bool
         Source: "bool p1"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p2"
         Type: bool
         Source: "bool p2"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p3"
         Type: string memory
         Source: "string memory p3"
        ElementaryTypeName string
           Source: "string"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,string)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,string)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,string)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(address,bool,bool,string)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(address,bool,bool,string)
               Type: literal_string "log(address,bool,bool,string)"
               Source: "\"log(address,bool,bool,string)\""
            Identifier p0
               Type: address
               Source: "p0"
            Identifier p1
               Type: bool
               Source: "p1"
            Identifier p2
               Type: bool
               Source: "p2"
            Identifier p3
               Type: string memory
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(address p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,bool)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(address p0, bool p1, bool p2, bool p3)"
      VariableDeclaration "p0"
         Type: address
         Source: "address p0"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p1"
         Type: bool
         Source: "bool p1"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p2"
         Type: bool
         Source: "bool p2"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p3"
         Type: bool
         Source: "bool p3"
        ElementaryTypeName bool
           Source: "bool"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,bool)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,bool)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,bool)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(address,bool,bool,bool)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(address,bool,bool,bool)
               Type: literal_string "log(address,bool,bool,bool)"
               Source: "\"log(address,bool,bool,bool)\""
            Identifier p0
               Type: address
               Source: "p0"
            Identifier p1
               Type: bool
               Source: "p1"
            Identifier p2
               Type: bool
               Source: "p2"
            Identifier p3
               Type: bool
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(address p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,address)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(address p0, bool p1, bool p2, address p3)"
      VariableDeclaration "p0"
         Type: address
         Source: "address p0"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p1"
         Type: bool
         Source: "bool p1"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p2"
         Type: bool
         Source: "bool p2"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p3"
         Type: address
         Source: "address p3"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,address)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,address)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,address)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(address,bool,bool,address)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(address,bool,bool,address)
               Type: literal_string "log(address,bool,bool,address)"
               Source: "\"log(address,bool,bool,address)\""
            Identifier p0
               Type: address
               Source: "p0"
            Identifier p1
               Type: bool
               Source: "p1"
            Identifier p2
               Type: bool
               Source: "p2"
            Identifier p3
               Type: address
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(address p0, bool p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,uint256)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(address p0, bool p1, address p2, uint256 p3)"
      VariableDeclaration "p0"
         Type: address
         Source: "address p0"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p1"
         Type: bool
         Source: "bool p1"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p2"
         Type: address
         Source: "address p2"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p3"
         Type: uint256
         Source: "uint256 p3"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,uint256)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,uint256)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,uint256)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(address,bool,address,uint256)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(address,bool,address,uint256)
               Type: literal_string "log(address,bool,address,uint256)"
               Source: "\"log(address,bool,address,uint256)\""
            Identifier p0
               Type: address
               Source: "p0"
            Identifier p1
               Type: bool
               Source: "p1"
            Identifier p2
               Type: address
               Source: "p2"
            Identifier p3
               Type: uint256
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(address p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,string)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(address p0, bool p1, address p2, string memory p3)"
      VariableDeclaration "p0"
         Type: address
         Source: "address p0"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p1"
         Type: bool
         Source: "bool p1"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p2"
         Type: address
         Source: "address p2"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p3"
         Type: string memory
         Source: "string memory p3"
        ElementaryTypeName string
           Source: "string"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,string)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,string)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,string)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(address,bool,address,string)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(address,bool,address,string)
               Type: literal_string "log(address,bool,address,string)"
               Source: "\"log(address,bool,address,string)\""
            Identifier p0
               Type: address
               Source: "p0"
            Identifier p1
               Type: bool
               Source: "p1"
            Identifier p2
               Type: address
               Source: "p2"
            Identifier p3
               Type: string memory
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(address p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,bool)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(address p0, bool p1, address p2, bool p3)"
      VariableDeclaration "p0"
         Type: address
         Source: "address p0"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p1"
         Type: bool
         Source: "bool p1"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p2"
         Type: address
         Source: "address p2"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p3"
         Type: bool
         Source: "bool p3"
        ElementaryTypeName bool
           Source: "bool"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,bool)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,bool)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,bool)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(address,bool,address,bool)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(address,bool,address,bool)
               Type: literal_string "log(address,bool,address,bool)"
               Source: "\"log(address,bool,address,bool)\""
            Identifier p0
               Type: address
               Source: "p0"
            Identifier p1
               Type: bool
               Source: "p1"
            Identifier p2
               Type: address
               Source: "p2"
            Identifier p3
               Type: bool
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(address p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,address)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(address p0, bool p1, address p2, address p3)"
      VariableDeclaration "p0"
         Type: address
         Source: "address p0"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p1"
         Type: bool
         Source: "bool p1"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p2"
         Type: address
         Source: "address p2"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p3"
         Type: address
         Source: "address p3"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,address)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,address)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,address)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(address,bool,address,address)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(address,bool,address,address)
               Type: literal_string "log(address,bool,address,address)"
               Source: "\"log(address,bool,address,address)\""
            Identifier p0
               Type: address
               Source: "p0"
            Identifier p1
               Type: bool
               Source: "p1"
            Identifier p2
               Type: address
               Source: "p2"
            Identifier p3
               Type: address
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(address p0, address p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,uint256)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(address p0, address p1, uint256 p2, uint256 p3)"
      VariableDeclaration "p0"
         Type: address
         Source: "address p0"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p1"
         Type: address
         Source: "address p1"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p2"
         Type: uint256
         Source: "uint256 p2"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p3"
         Type: uint256
         Source: "uint256 p3"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,uint256)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,uint256)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,uint256)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(address,address,uint256,uint256)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(address,address,uint256,uint256)
               Type: literal_string "log(address,address,uint256,uint256)"
               Source: "\"log(address,address,uint256,uint256)\""
            Identifier p0
               Type: address
               Source: "p0"
            Identifier p1
               Type: address
               Source: "p1"
            Identifier p2
               Type: uint256
               Source: "p2"
            Identifier p3
               Type: uint256
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(address p0, address p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,string)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(address p0, address p1, uint256 p2, string memory p3)"
      VariableDeclaration "p0"
         Type: address
         Source: "address p0"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p1"
         Type: address
         Source: "address p1"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p2"
         Type: uint256
         Source: "uint256 p2"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p3"
         Type: string memory
         Source: "string memory p3"
        ElementaryTypeName string
           Source: "string"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,string)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,string)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,string)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(address,address,uint256,string)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(address,address,uint256,string)
               Type: literal_string "log(address,address,uint256,string)"
               Source: "\"log(address,address,uint256,string)\""
            Identifier p0
               Type: address
               Source: "p0"
            Identifier p1
               Type: address
               Source: "p1"
            Identifier p2
               Type: uint256
               Source: "p2"
            Identifier p3
               Type: string memory
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(address p0, address p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,bool)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(address p0, address p1, uint256 p2, bool p3)"
      VariableDeclaration "p0"
         Type: address
         Source: "address p0"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p1"
         Type: address
         Source: "address p1"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p2"
         Type: uint256
         Source: "uint256 p2"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p3"
         Type: bool
         Source: "bool p3"
        ElementaryTypeName bool
           Source: "bool"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,bool)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,bool)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,bool)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(address,address,uint256,bool)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(address,address,uint256,bool)
               Type: literal_string "log(address,address,uint256,bool)"
               Source: "\"log(address,address,uint256,bool)\""
            Identifier p0
               Type: address
               Source: "p0"
            Identifier p1
               Type: address
               Source: "p1"
            Identifier p2
               Type: uint256
               Source: "p2"
            Identifier p3
               Type: bool
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(address p0, address p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,address)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(address p0, address p1, uint256 p2, address p3)"
      VariableDeclaration "p0"
         Type: address
         Source: "address p0"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p1"
         Type: address
         Source: "address p1"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p2"
         Type: uint256
         Source: "uint256 p2"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "p3"
         Type: address
         Source: "address p3"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,address)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,address)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,address)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(address,address,uint256,address)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(address,address,uint256,address)
               Type: literal_string "log(address,address,uint256,address)"
               Source: "\"log(address,address,uint256,address)\""
            Identifier p0
               Type: address
               Source: "p0"
            Identifier p1
               Type: address
               Source: "p1"
            Identifier p2
               Type: uint256
               Source: "p2"
            Identifier p3
               Type: address
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(address p0, address p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,uint256)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(address p0, address p1, string memory p2, uint256 p3)"
      VariableDeclaration "p0"
         Type: address
         Source: "address p0"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p1"
         Type: address
         Source: "address p1"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p2"
         Type: string memory
         Source: "string memory p2"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p3"
         Type: uint256
         Source: "uint256 p3"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,uint256)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,uint256)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,uint256)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(address,address,string,uint256)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(address,address,string,uint256)
               Type: literal_string "log(address,address,string,uint256)"
               Source: "\"log(address,address,string,uint256)\""
            Identifier p0
               Type: address
               Source: "p0"
            Identifier p1
               Type: address
               Source: "p1"
            Identifier p2
               Type: string memory
               Source: "p2"
            Identifier p3
               Type: uint256
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(address p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,string)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(address p0, address p1, string memory p2, string memory p3)"
      VariableDeclaration "p0"
         Type: address
         Source: "address p0"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p1"
         Type: address
         Source: "address p1"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p2"
         Type: string memory
         Source: "string memory p2"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p3"
         Type: string memory
         Source: "string memory p3"
        ElementaryTypeName string
           Source: "string"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,string)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,string)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,string)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(address,address,string,string)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(address,address,string,string)
               Type: literal_string "log(address,address,string,string)"
               Source: "\"log(address,address,string,string)\""
            Identifier p0
               Type: address
               Source: "p0"
            Identifier p1
               Type: address
               Source: "p1"
            Identifier p2
               Type: string memory
               Source: "p2"
            Identifier p3
               Type: string memory
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(address p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,bool)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(address p0, address p1, string memory p2, bool p3)"
      VariableDeclaration "p0"
         Type: address
         Source: "address p0"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p1"
         Type: address
         Source: "address p1"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p2"
         Type: string memory
         Source: "string memory p2"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p3"
         Type: bool
         Source: "bool p3"
        ElementaryTypeName bool
           Source: "bool"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,bool)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,bool)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,bool)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(address,address,string,bool)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(address,address,string,bool)
               Type: literal_string "log(address,address,string,bool)"
               Source: "\"log(address,address,string,bool)\""
            Identifier p0
               Type: address
               Source: "p0"
            Identifier p1
               Type: address
               Source: "p1"
            Identifier p2
               Type: string memory
               Source: "p2"
            Identifier p3
               Type: bool
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(address p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,address)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(address p0, address p1, string memory p2, address p3)"
      VariableDeclaration "p0"
         Type: address
         Source: "address p0"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p1"
         Type: address
         Source: "address p1"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p2"
         Type: string memory
         Source: "string memory p2"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "p3"
         Type: address
         Source: "address p3"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,address)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,address)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,address)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(address,address,string,address)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(address,address,string,address)
               Type: literal_string "log(address,address,string,address)"
               Source: "\"log(address,address,string,address)\""
            Identifier p0
               Type: address
               Source: "p0"
            Identifier p1
               Type: address
               Source: "p1"
            Identifier p2
               Type: string memory
               Source: "p2"
            Identifier p3
               Type: address
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(address p0, address p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,uint256)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(address p0, address p1, bool p2, uint256 p3)"
      VariableDeclaration "p0"
         Type: address
         Source: "address p0"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p1"
         Type: address
         Source: "address p1"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p2"
         Type: bool
         Source: "bool p2"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p3"
         Type: uint256
         Source: "uint256 p3"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,uint256)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,uint256)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,uint256)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(address,address,bool,uint256)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(address,address,bool,uint256)
               Type: literal_string "log(address,address,bool,uint256)"
               Source: "\"log(address,address,bool,uint256)\""
            Identifier p0
               Type: address
               Source: "p0"
            Identifier p1
               Type: address
               Source: "p1"
            Identifier p2
               Type: bool
               Source: "p2"
            Identifier p3
               Type: uint256
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(address p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,string)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(address p0, address p1, bool p2, string memory p3)"
      VariableDeclaration "p0"
         Type: address
         Source: "address p0"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p1"
         Type: address
         Source: "address p1"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p2"
         Type: bool
         Source: "bool p2"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p3"
         Type: string memory
         Source: "string memory p3"
        ElementaryTypeName string
           Source: "string"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,string)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,string)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,string)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(address,address,bool,string)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(address,address,bool,string)
               Type: literal_string "log(address,address,bool,string)"
               Source: "\"log(address,address,bool,string)\""
            Identifier p0
               Type: address
               Source: "p0"
            Identifier p1
               Type: address
               Source: "p1"
            Identifier p2
               Type: bool
               Source: "p2"
            Identifier p3
               Type: string memory
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(address p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,bool)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(address p0, address p1, bool p2, bool p3)"
      VariableDeclaration "p0"
         Type: address
         Source: "address p0"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p1"
         Type: address
         Source: "address p1"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p2"
         Type: bool
         Source: "bool p2"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p3"
         Type: bool
         Source: "bool p3"
        ElementaryTypeName bool
           Source: "bool"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,bool)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,bool)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,bool)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(address,address,bool,bool)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(address,address,bool,bool)
               Type: literal_string "log(address,address,bool,bool)"
               Source: "\"log(address,address,bool,bool)\""
            Identifier p0
               Type: address
               Source: "p0"
            Identifier p1
               Type: address
               Source: "p1"
            Identifier p2
               Type: bool
               Source: "p2"
            Identifier p3
               Type: bool
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(address p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,address)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(address p0, address p1, bool p2, address p3)"
      VariableDeclaration "p0"
         Type: address
         Source: "address p0"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p1"
         Type: address
         Source: "address p1"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p2"
         Type: bool
         Source: "bool p2"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "p3"
         Type: address
         Source: "address p3"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,address)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,address)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,address)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(address,address,bool,address)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(address,address,bool,address)
               Type: literal_string "log(address,address,bool,address)"
               Source: "\"log(address,address,bool,address)\""
            Identifier p0
               Type: address
               Source: "p0"
            Identifier p1
               Type: address
               Source: "p1"
            Identifier p2
               Type: bool
               Source: "p2"
            Identifier p3
               Type: address
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(address p0, address p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,uint256)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(address p0, address p1, address p2, uint256 p3)"
      VariableDeclaration "p0"
         Type: address
         Source: "address p0"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p1"
         Type: address
         Source: "address p1"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p2"
         Type: address
         Source: "address p2"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p3"
         Type: uint256
         Source: "uint256 p3"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,uint256)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,uint256)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,uint256)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(address,address,address,uint256)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(address,address,address,uint256)
               Type: literal_string "log(address,address,address,uint256)"
               Source: "\"log(address,address,address,uint256)\""
            Identifier p0
               Type: address
               Source: "p0"
            Identifier p1
               Type: address
               Source: "p1"
            Identifier p2
               Type: address
               Source: "p2"
            Identifier p3
               Type: uint256
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(address p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,string)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(address p0, address p1, address p2, string memory p3)"
      VariableDeclaration "p0"
         Type: address
         Source: "address p0"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p1"
         Type: address
         Source: "address p1"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p2"
         Type: address
         Source: "address p2"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p3"
         Type: string memory
         Source: "string memory p3"
        ElementaryTypeName string
           Source: "string"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,string)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,string)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,string)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(address,address,address,string)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(address,address,address,string)
               Type: literal_string "log(address,address,address,string)"
               Source: "\"log(address,address,address,string)\""
            Identifier p0
               Type: address
               Source: "p0"
            Identifier p1
               Type: address
               Source: "p1"
            Identifier p2
               Type: address
               Source: "p2"
            Identifier p3
               Type: string memory
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(address p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,bool)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(address p0, address p1, address p2, bool p3)"
      VariableDeclaration "p0"
         Type: address
         Source: "address p0"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p1"
         Type: address
         Source: "address p1"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p2"
         Type: address
         Source: "address p2"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p3"
         Type: bool
         Source: "bool p3"
        ElementaryTypeName bool
           Source: "bool"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,bool)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,bool)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,bool)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(address,address,address,bool)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(address,address,address,bool)
               Type: literal_string "log(address,address,address,bool)"
               Source: "\"log(address,address,address,bool)\""
            Identifier p0
               Type: address
               Source: "p0"
            Identifier p1
               Type: address
               Source: "p1"
            Identifier p2
               Type: address
               Source: "p2"
            Identifier p3
               Type: bool
               Source: "p3"
  FunctionDefinition "log" - const
     Source: "function log(address p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,address)\", p0, p1, p2, p3));\n\t}"
    ParameterList
       Source: "(address p0, address p1, address p2, address p3)"
      VariableDeclaration "p0"
         Type: address
         Source: "address p0"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p1"
         Type: address
         Source: "address p1"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p2"
         Type: address
         Source: "address p2"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "p3"
         Type: address
         Source: "address p3"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: ""
    Block
       Source: "{\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,address)\", p0, p1, p2, p3));\n\t}"
      ExpressionStatement
         Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,address)\", p0, p1, p2, p3))"
        FunctionCall
           Type: tuple()
           Source: "_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,address)\", p0, p1, p2, p3))"
          Identifier _sendLogPayload
             Type: function (bytes memory) view
             Source: "_sendLogPayload"
          FunctionCall
             Type: bytes memory
             Source: "abi.encodeWithSignature(\"log(address,address,address,address)\", p0, p1, p2, p3)"
            MemberAccess to member encodeWithSignature
               Type: function (string memory) pure returns (bytes memory)
               Source: "abi.encodeWithSignature"
              Identifier abi
                 Type: abi
                 Source: "abi"
            Literal, token: [no token] value: log(address,address,address,address)
               Type: literal_string "log(address,address,address,address)"
               Source: "\"log(address,address,address,address)\""
            Identifier p0
               Type: address
               Source: "p0"
            Identifier p1
               Type: address
               Source: "p1"
            Identifier p2
               Type: address
               Source: "p2"
            Identifier p3
               Type: address
               Source: "p3"
