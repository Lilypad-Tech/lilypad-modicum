PragmaDirective
   Source: "pragma solidity ^0.4.25;"
ContractDefinition "Modicum"
   Source: "contract Modicum {\n\n    uint256 penaltyRate;\n    address owner = msg.sender;\n    uint256 reactionDeadline;\n\n    modifier administrative {\n        if (msg.sender == owner)\n            _;\n        else\n            revert('You cannot call me!');\n        // _;\n    }\n\n    enum Architecture {\n        amd64,\n        armv7\n    }\n\n    struct JobCreator {\n        address[] trustedMediators;\n        uint256 itShouldntBeHere; //If I don't add it, I cannot make array of JC public\n    }\n\n    struct ResourceProvider {\n        address[] trustedMediators;\n        address[] trustedDirectories;\n        uint256[] supportedFirstLayers;\n        Architecture arch;\n        uint256 timePerInstruction;\n    }\n\n    struct Mediator {\n        Architecture arch;\n\n        uint256 instructionPrice;\n        uint256 bandwidthPrice;\n        address[] trustedDirectories;\n        uint256[] supportedFirstLayers;\n\n        uint256 availabilityValue;\n\n        uint256 verificationCount;\n    }\n\n    struct JobOfferPartOne {\n        address jobCreator;\n        uint256 depositValue;\n\n        uint256 instructionLimit;\n        uint256 bandwidthLimit;\n\n        uint256 instructionMaxPrice;\n        uint256 bandwidthMaxPrice;\n\n        uint256 completionDeadline;\n\n        uint256 matchIncentive;\n    }\n\n    struct JobOfferPartTwo {\n        address jobCreator;\n        uint256 firstLayerHash;\n        uint256 ramLimit;\n        uint256 localStorageLimit;\n        bytes32 uri;\n        address directory;\n        uint256 jobHash;\n        Architecture arch;\n    }\n\n    struct ResourceOffer {\n\n        address resProvider;\n        uint256 depositValue;\n\n        uint256 instructionPrice;\n        uint256 instructionCap;\n\n        uint256 memoryCap;\n        uint256 localStorageCap;\n\n        uint256 bandwidthCap;\n        uint256 bandwidthPrice;\n\n        uint256 matchIncentive;\n\n        uint256 verificationCount;\n    }\n\n    enum ResultStatus {\n        Completed,\n        Declined,\n        JobDescriptionError,\n        JobNotFound,\n        MemoryExceeded,\n        StorageExceeded,\n        InstructionsExceeded,\n        BandwidthExceeded,\n        ExceptionOccured,\n        DirectoryUnavailable\n//        LayerSizeExceeded,\n//        ResultNotFound\n    }\n\n    struct Match {\n        uint256 resourceOffer;\n        uint256 jobOffer;\n        address mediator;\n    }\n\n    struct JobResult {\n        ResultStatus status;\n        bytes32 uri;\n\n        uint256 matchId;\n\n        uint256 hash;\n\n        uint256 instructionCount;\n        uint256 bandwidthUsage;\n\n        Reaction reacted;\n        uint256 timestamp;\n    }\n\n    struct MediatorResult {\n        ResultStatus status;\n        bytes32 uri;\n\n        uint256 matchId;\n\n        uint256 hash;\n\n        uint256 instructionCount;\n        uint256 bandwidthUsage;\n\n        Verdict verdict;\n        Party faultyParty;\n    }\n\n    enum Party {\n        ResourceProvider,\n        JobCreator\n    }\n\n    enum Verdict {\n        ResultNotFound,\n        TooMuchCost,\n        WrongResults,\n        CorrectResults,\n        InvalidResultStatus\n    }\n\n    enum Reaction {\n        Accepted,\n        Rejected,\n        None\n    }\n\n    enum EtherTransferCause {\n        PostJobOffer,\n        PostResourceOffer,\n        CancelJobOffer,\n        CancelResOffer,\n        Punishment,\n        Mediation,\n        FinishingJob,\n        FinishingResource,\n        PostMatch,\n        MediatorAvailability\n    }\n\n    event Debug(uint64 value);\n    event DebugArch(Architecture arch);\n    event DebugUint(uint256 value);\n    event DebugString(bytes32 str);\n    event penaltyRateSet(uint256 penaltyRate);\n    event reactionDeadlineSet(uint256 reactionDeadline);\n\n    event ResultReaction(address addr, uint256 resultId, uint256 matchId, uint256 ResultReaction);\n    event ResultPosted(address addr, uint256 resultId, uint256 matchId, ResultStatus status, bytes32 uri,\n                       uint256 hash, uint256 instructionCount, uint256 bandwidthUsage);\n    event Matched(address addr, uint256 matchId, uint256 jobOfferId, uint256 resourceOfferId, address mediator); //the same as job assigned.\n\n    event JobOfferPostedPartOne(uint256 offerId, uint256 ijoid, address addr, uint256 instructionLimit,\n                                uint256 bandwidthLimit, uint256 instructionMaxPrice, uint256 bandwidthMaxPrice, uint256 completionDeadline, uint256 deposit, uint256 matchIncentive);\n\n    event JobOfferPostedPartTwo(uint256 offerId, address addr, uint256 hash, uint256 firstLayerHash, bytes32 uri,\n                                address directory, Architecture arch, uint256 ramLimit, uint256 localStorageLimit);\n\n    event ResourceOfferPosted(uint256 offerId, address addr, uint256 instructionPrice,\n                              uint256 instructionCap, uint256 memoryCap, uint256 localStorageCap,\n                              uint256 bandwidthCap, uint256 bandwidthPrice, uint256 deposit,uint256 iroid);\n\n    event JobOfferCanceled(uint256 offerId);\n    event ResourceOfferCanceled(uint256 resOfferId);\n    event JobAssignedForMediation(address addr, uint256 matchId);\n\n    event MediatorRegistered(address addr, Architecture arch, uint256 instructionPrice, uint256 bandwidthPrice,\n                             uint256 availabilityValue, uint256 verificationCount);\n\n    event MediatorAddedSupportedFirstLayer(address addr, uint256 firstLayerHash);\n\n    event ResourceProviderRegistered(address addr, Architecture arch, uint256 timePerInstruction, uint256 penaltyRate);\n    event ResourceProviderAddedTrustedMediator(address addr, address mediator);\n    event JobCreatorRegistered(address addr, uint256 penaltyRate);\n    event JobCreatorAddedTrustedMediator(address addr, address mediator);\n    event MediatorAddedTrustedDirectory(address addr, address directory);\n    event ResourceProviderAddedTrustedDirectory(address addr, address directory);\n    event ResourceProviderAddedSupportedFirstLayer(address addr, uint256 firstLayer);\n\n    event MediationResultPosted(uint256 matchId, address addr, uint256 result, Party faultyParty, Verdict verdict, ResultStatus status,\n                                bytes32 uri, uint256 hash, uint256 instructionCount, uint256 mediationCost);\n\n    event MatchClosed(uint256 matchId, uint256 cost);\n\n    event EtherTransferred(address _from, address to, uint256 value, EtherTransferCause cause);\n\n    mapping(address => Mediator) public mediators;\n    // mapping(uint256 => address) public mediator_index;\n    // uint mediator_count;\n    // address[] mediator_index;\n\n    mapping(address => ResourceProvider) resourceProviders;\n    mapping(address => JobCreator) jobCreators;\n\n    ResourceOffer[] resourceOffers;\n    uint256 joIndex = 1;\n    mapping(uint256 => JobOfferPartOne) jobOffersPartOne;\n    mapping(uint256 => JobOfferPartTwo) jobOffersPartTwo;\n    mapping(address => mapping(uint256 => uint256)) findJOIndex; // findJOIndex[addressOfJC][jcInternalOfferId]\n\n    Match[] matches;\n    JobResult[] results;\n    MediatorResult[] mediatorResults;\n\n    mapping(uint256 => bool) jobOfferPartOnePosted;\n    mapping(uint256 => bool) jobOfferPartTwoPosted;\n\n    mapping(uint256 => bool) mediationRequested;\n    mapping(uint256 => bool) mediated;\n    mapping(uint256 => uint256) matchToResult;\n    mapping(uint256 => bool) resultAvailable;\n\n    mapping(uint256 => bool) jobOfferMatched;\n    mapping(uint256 => bool) resOfferMatched;\n\n    mapping(uint256 => bool) isJobOfferCanceled;\n    mapping(uint256 => bool) isResOfferCanceled;\n    mapping(uint256 => bool) isMatchClosed;\n\n    function () external payable {\n        revert(\"Why are you calling me?\");\n    }\n\n    function test(uint256 value) public{\n      require(value > 0,\n      \"This should be greater than 0\");\n      emit DebugUint(value);\n    }\n\n    function check(Architecture arch) public{\n        //Architecture arch = Architecture.amd64;\n        emit Debug(5);\n        emit DebugArch(arch);\n        emit DebugUint(1);\n    }\n\n    function setPenaltyRate(uint256 _penaltyRate) public administrative {\n        penaltyRate = _penaltyRate;\n        emit penaltyRateSet(penaltyRate);\n    }\n\n    function setReactionDeadline(uint256 _reactionDeadline) public administrative {\n        reactionDeadline = _reactionDeadline;\n        emit reactionDeadlineSet(_reactionDeadline);\n    }\n\n\n    function registerMediator(\n        Architecture arch,\n        uint256 instructionPrice,\n        uint256 bandwidthPrice,\n        uint256 availabilityValue,\n        uint256 verificationCount\n    ) public {\n        address[] memory trustedDirectories;\n        uint256[] memory supportedFirstLayers;\n        mediators[msg.sender] = Mediator({\n            arch: arch,\n            instructionPrice: instructionPrice,\n            supportedFirstLayers: supportedFirstLayers,\n            bandwidthPrice: bandwidthPrice,\n            trustedDirectories: trustedDirectories,\n            availabilityValue: availabilityValue,\n            verificationCount: verificationCount\n            });\n        emit MediatorRegistered(msg.sender,\n            arch,\n            instructionPrice,\n            bandwidthPrice,\n            availabilityValue,\n            verificationCount\n        );\n    }\n\n    function mediatorAddTrustedDirectory(address directory) public {\n        mediators[msg.sender].trustedDirectories.push(directory);\n        emit MediatorAddedTrustedDirectory(msg.sender, directory);\n    }\n\n    function mediatorAddSupportedFirstLayer(uint256 firstLayerHash) public {\n        mediators[msg.sender].supportedFirstLayers.push(firstLayerHash);\n        emit MediatorAddedSupportedFirstLayer(msg.sender, firstLayerHash);\n    }\n\n    // function getMediatorTrustedDirectories(address mediator) public view returns (address[] memory) {\n    //     return mediators[mediator].trustedDirectories;\n    // }\n\n    function registerResourceProvider(\n        Architecture arch,\n        uint256 timePerInstruction\n    ) public {\n        address[] memory trustedMediators;\n        address[] memory trustedDirectories;\n        uint256[] memory supportedFirstLayers;\n        resourceProviders[msg.sender] = ResourceProvider({\n            trustedMediators: trustedMediators,\n            supportedFirstLayers: supportedFirstLayers,\n            arch: arch,\n            timePerInstruction: timePerInstruction,\n            trustedDirectories: trustedDirectories\n        });\n        emit ResourceProviderRegistered(msg.sender,\n            arch,\n            timePerInstruction,\n            penaltyRate\n        );\n    }\n\n    function resourceProviderAddTrustedMediator(address mediator) public {\n        resourceProviders[msg.sender].trustedMediators.push(mediator);\n        emit ResourceProviderAddedTrustedMediator(msg.sender, mediator);\n    }\n\n    function resourceProviderAddTrustedDirectory(address directory) public {\n        resourceProviders[msg.sender].trustedDirectories.push(directory);\n        emit ResourceProviderAddedTrustedDirectory(msg.sender, directory);\n    }\n\n    function resourceProviderAddSupportedFirstLayer(uint256 firstLayerHash) public {\n        resourceProviders[msg.sender].supportedFirstLayers.push(firstLayerHash);\n        emit ResourceProviderAddedSupportedFirstLayer(msg.sender, firstLayerHash);\n    }\n\n    // function getResourceProviderTrustedMediators(address rp) public view returns (address[] memory) {\n    //     return resourceProviders[rp].trustedMediators;\n    // }\n\n    // function getResourceProviderTrustedDirectories(address rp) public view returns(address[] memory) {\n    //     return resourceProviders[rp].trustedDirectories;\n    // }\n\n    function registerJobCreator(\n    ) public {\n        address[] memory trustedMediators;\n        jobCreators[msg.sender] = JobCreator({\n            trustedMediators: trustedMediators,\n            itShouldntBeHere: 0\n        });\n        emit JobCreatorRegistered(msg.sender, penaltyRate);\n    }\n\n    // function getJobCreatorTrustedMediators(address jc) public view returns (address[] memory) {\n    //     return jobCreators[jc].trustedMediators;\n    // }\n    function jobCreatorAddTrustedMediator(address mediator) public {\n        jobCreators[msg.sender].trustedMediators.push(mediator);\n        emit JobCreatorAddedTrustedMediator(msg.sender, mediator);\n    }\n\n    function postResOffer(\n        uint256 instructionPrice,\n        uint256 instructionCap,\n\n        uint256 memoryCap,\n        uint256 localStorageCap,\n\n        uint256 bandwidthCap,\n        uint256 bandwidthPrice,\n\n        uint256 matchIncentive,\n\n        uint256 verificationCount,\n\n        uint256 misc\n    ) public payable {\n        // require(resourceProviders[msg.sender].trustedMediators.length != 0,\n        //     \"You are not registered as a ResourceProvider\");\n\n        if (resourceProviders[msg.sender].trustedMediators.length == 0){\n            emit DebugString(\"trustedMediators==0\");\n        }\n\n        uint256 depositValue = (instructionPrice * instructionCap +\n            bandwidthCap * bandwidthPrice) * penaltyRate;\n\n        if (msg.value <= depositValue){\n            emit DebugString(\"msg.value <= depositValue\");\n            emit DebugUint(msg.value);\n            emit DebugUint(depositValue);\n        }\n\n        // require(msg.value >= depositValue,\n        //    \"You need to deposit more money to offer this resource\");\n\n        uint256 index = resourceOffers.push(ResourceOffer({\n            resProvider: msg.sender,\n            instructionPrice: instructionPrice,\n            instructionCap: instructionCap,\n            memoryCap: memoryCap,\n            localStorageCap: localStorageCap,\n            bandwidthCap: bandwidthCap,\n            bandwidthPrice: bandwidthPrice,\n            depositValue: msg.value,\n            matchIncentive: matchIncentive,\n            verificationCount: verificationCount\n            })) - 1;\n\n        uint256 iroid = misc;\n        emit ResourceOfferPosted(index,\n\n            msg.sender,\n\n            instructionPrice,\n            instructionCap,\n\n            memoryCap,\n            localStorageCap,\n\n            bandwidthCap,\n            bandwidthPrice,\n\n            msg.value,\n\n            iroid\n        );\n\n        emit EtherTransferred(msg.sender, address(this), msg.value, EtherTransferCause.PostResourceOffer);\n    }\n\n    function postJobOfferPartOne(\n        uint256 ijoid,\n        uint256 instructionLimit,\n        uint256 bandwidthLimit,\n        uint256 instructionMaxPrice,\n        uint256 bandwidthMaxPrice,\n        uint256 completionDeadline,\n        uint256 matchIncentive\n    ) public payable {\n        // require(jobCreators[msg.sender].trustedMediators.length != 0,\n        //    \"You are not registered as a JobCreator\");\n\n        // require(msg.value >= (instructionLimit * instructionMaxPrice +\n        //    bandwidthLimit * bandwidthMaxPrice) * penaltyRate,\n        //    \"You need to deposit more money to request this job.\");\n\n        uint256 index = findJOIndex[msg.sender][ijoid];\n        if (index == 0) {\n            index = joIndex;\n            joIndex++;\n            findJOIndex[msg.sender][ijoid] = index;\n        }\n\n        // require(jobOfferPartOnePosted[index] == false, \"You have already posted a part one for this ijoid.\");\n\n        JobOfferPartOne memory joPOne = JobOfferPartOne({\n            jobCreator: msg.sender,\n            depositValue: msg.value,\n            instructionLimit: instructionLimit,\n            bandwidthLimit: bandwidthLimit,\n            instructionMaxPrice: instructionMaxPrice,\n            bandwidthMaxPrice: bandwidthMaxPrice,\n            completionDeadline: completionDeadline,\n            matchIncentive: matchIncentive\n        });\n\n        jobOffersPartOne[index] = joPOne;\n        jobOfferPartOnePosted[index] = true;\n\n        emit JobOfferPostedPartOne(\n            index,\n            ijoid,\n            msg.sender,\n            instructionLimit,\n            bandwidthLimit,\n            instructionMaxPrice,\n            bandwidthMaxPrice,\n            completionDeadline,\n            msg.value,\n            matchIncentive\n        );\n\n        emit EtherTransferred(msg.sender, address(this), msg.value, EtherTransferCause.PostJobOffer);\n    }\n\n    function postJobOfferPartTwo(\n        uint256 ijoid,\n        uint256 firstLayerHash,\n        uint256 ramLimit,\n        uint256 localStorageLimit,\n        bytes32 uri,\n        address directory,\n        uint256 jobHash,\n        Architecture arch\n    ) public {\n\n        // require(jobCreators[msg.sender].trustedMediators.length != 0,\n        //    \"You are not registered as a JobCreator\");\n\n        uint256 index = findJOIndex[msg.sender][ijoid];\n        if (index == 0) {\n            index = joIndex;\n            joIndex++;\n            findJOIndex[msg.sender][ijoid] = index;\n        }\n\n        // require(jobOfferPartTwoPosted[index] == false, \"You have already posted a part two for this ijoid.\");\n\n        JobOfferPartTwo memory joPTwo = JobOfferPartTwo({\n            jobCreator: msg.sender,\n            firstLayerHash: firstLayerHash,\n            ramLimit: ramLimit,\n            localStorageLimit: localStorageLimit,\n            uri: uri,\n            directory: directory,\n            jobHash: jobHash,\n            arch: arch\n        });\n\n        jobOffersPartTwo[index] = joPTwo;\n        jobOfferPartTwoPosted[index] = true;\n\n        emit JobOfferPostedPartTwo(\n            index,\n            msg.sender,\n            jobHash,\n            firstLayerHash,\n            uri,\n            directory,\n            arch,\n            ramLimit,\n            localStorageLimit\n        );\n    }\n\n    function cancelJobOffer(uint256 offerId) public {\n        // require(jobOffersPartOne[offerId].jobCreator == msg.sender, \"This offer is not yours.\");\n        // require(jobOfferMatched[offerId] == false, \"You cannot cancel a jop which is running.\");\n\n        //msg.sender.transfer(jobOffersPartOne[offerId].depositValue);\n        jobOffersPartOne[offerId].depositValue = 0;\n\n        isJobOfferCanceled[offerId] = true;\n\n        emit JobOfferCanceled(offerId);\n        emit EtherTransferred(address(this), msg.sender, jobOffersPartOne[offerId].depositValue, EtherTransferCause.CancelJobOffer);\n    }\n\n    function cancelResOffer(uint256 offerId) public {\n        // require(resourceOffers[offerId].resProvider == msg.sender, \"This offer is not yours.\");\n        // require(resOfferMatched[offerId] == false, \"You cannot cancel a jop which is running.\");\n\n        //msg.sender.transfer(resourceOffers[offerId].depositValue);\n        resourceOffers[offerId].depositValue = 0;\n\n        isResOfferCanceled[offerId] = true;\n\n        emit ResourceOfferCanceled(offerId);\n        emit EtherTransferred(address(this), msg.sender, resourceOffers[offerId].depositValue, EtherTransferCause.CancelResOffer);\n    }\n\n    function postMatch(\n        uint256 jobOfferId,\n        uint256 resourceOfferId,\n        address mediator\n    ) public returns (uint256){\n        // require(solvers[msg.sender] == true, \"You are not a trusted solver\");\n        // require(isJobOfferCanceled[jobOfferId] == false,\n        //     \"Job offer is already canceled.\");\n\n        // require(isResOfferCanceled[resourceOfferId] == false,\n        //     \"Resource offer is already canceled.\");\n\n        // require(jobOfferMatched[jobOfferId] == false,\n        //     \"Job offer is already matched\");\n\n        // require(resOfferMatched[resourceOfferId] == false,\n        //     \"Resource offer is already matched\");\n\n        // require(jobOfferPartOnePosted[jobOfferId] == true,\n        //     \"The job offer was not completed\");\n        // require(jobOfferPartTwoPosted[jobOfferId] == true,\n        //     \"The job offer was not completed\");\n        // bool RPTrustM = false;\n        // bool JCTrustM = false;\n        // bool RPTrustD = false;\n        // bool MTrustD  = false;\n        // bool RPSupportFirstLayer = false;\n        // bool MSupportFirstLayer = false;\n\n        // uint i = 0;\n\n        // for (i = 0; i < resourceProviders[resourceOffers[resourceOfferId].resProvider].trustedMediators.length; i++)\n        //     if (resourceProviders[resourceOffers[resourceOfferId].resProvider].trustedMediators[i] == mediator)\n        //         RPTrustM = true;\n\n        // for (i = 0; i < jobCreators[jobOffersPartOne[jobOfferId].jobCreator].trustedMediators.length; i++)\n        //     if (jobCreators[jobOffersPartOne[jobOfferId].jobCreator].trustedMediators[i] == mediator)\n        //         JCTrustM = true;\n\n        // for (i = 0; i < resourceProviders[resourceOffers[resourceOfferId].resProvider].trustedDirectories.length; i++)\n        //     if (resourceProviders[resourceOffers[resourceOfferId].resProvider].trustedDirectories[i] == jobOffersPartTwo[jobOfferId].directory)\n        //         RPTrustD = true;\n\n        // for (i = 0; i < mediators[mediator].trustedDirectories.length; i++)\n        //     if (mediators[mediator].trustedDirectories[i] == jobOffersPartTwo[jobOfferId].directory)\n        //         RPTrustD = true;\n\n        // for (i = 0; i < resourceProviders[resourceOffers[resourceOfferId].resProvider].supportedFirstLayers.length; i++)\n        //     if (resourceProviders[resourceOffers[resourceOfferId].resProvider].supportedFirstLayers[i] == jobOffersPartTwo[jobOfferId].firstLayerHash)\n        //         RPSupportFirstLayer = true;\n\n        // for (i = 0; i < mediators[mediator].supportedFirstLayers.length; i++)\n        //     if (mediators[mediator].supportedFirstLayers[i] == jobOffersPartTwo[jobOfferId].firstLayerHash)\n        //         MSupportFirstLayer = true;\n\n\n        // require(\n        //     resourceOffers[resourceOfferId].instructionCap >= jobOffersPartOne[jobOfferId].instructionLimit &&\n        //     resourceOffers[resourceOfferId].memoryCap >= jobOffersPartTwo[jobOfferId].ramLimit &&\n        //     resourceOffers[resourceOfferId].localStorageCap >= jobOffersPartTwo[jobOfferId].localStorageLimit &&\n        //     resourceOffers[resourceOfferId].instructionPrice <= jobOffersPartOne[jobOfferId].instructionMaxPrice &&\n        //     resourceProviders[resourceOffers[resourceOfferId].resProvider].arch == jobOffersPartTwo[jobOfferId].arch && mediators[mediator].arch == resourceProviders[resourceOffers[resourceOfferId].resProvider].arch &&\n        //     resourceOffers[resourceOfferId].verificationCount <= mediators[mediator].verificationCount &&\n        //     now + resourceProviders[resourceOffers[resourceOfferId].resProvider].timePerInstruction * jobOffersPartOne[jobOfferId].instructionLimit <= jobOffersPartOne[jobOfferId].completionDeadline &&\n        //     RPTrustD && RPTrustM && JCTrustM && MTrustD && RPSupportFirstLayer && MSupportFirstLayer,\n        //     \"The offers cannot be matched\"\n        // );\n\n\n        uint256 index = matches.push(Match({\n            resourceOffer: resourceOfferId,\n            jobOffer: jobOfferId,\n            mediator: mediator\n        })) - 1;\n\n        jobOfferMatched[jobOfferId] = true;\n        resOfferMatched[resourceOfferId] = true;\n\n        uint256 matchIncentive = jobOffersPartOne[jobOfferId].matchIncentive +\n                resourceOffers[resourceOfferId].matchIncentive;\n\n        //msg.sender.transfer(matchIncentive);\n\n        emit EtherTransferred(address(this), msg.sender, matchIncentive, EtherTransferCause.PostMatch);\n\n        emit Matched(msg.sender, index, jobOfferId, resourceOfferId, mediator);\n\n        return index;\n    }\n\n    function postResult(\n        uint256 matchId,\n        uint256 jobOfferId,\n        ResultStatus status,\n        bytes32 uri,\n        uint256 hash,\n        uint256 instructionCount,\n        uint256 bandwidthUsage\n    ) public returns (uint256) {\n        // require (resourceOffers[matches[matchId].resourceOffer].resProvider == msg.sender,\n        //     \"You are not supposed to publish result for this match.\");\n\n        // require(isMatchClosed[matchId] == false,\n        //     \"This match is already closed.\");\n\n        uint256 index = results.push(JobResult({\n            status: status,\n            matchId: matchId,\n            uri: uri,\n            instructionCount: instructionCount,\n            bandwidthUsage: bandwidthUsage,\n            hash: hash,\n            reacted: Reaction.None,\n            timestamp: now\n            })) - 1;\n\n        matchToResult[matchId] = index;\n        resultAvailable[matchId] = true;\n\n        emit ResultPosted(\n            msg.sender,\n            index,\n            matchId,\n            status,\n            uri,\n            hash,\n            instructionCount,\n            bandwidthUsage\n        );\n\n        return index;\n    }\n\n    function rejectResult(uint256 resultId, uint256 jobOfferId) public {\n        // require(jobOffersPartOne[matches[results[resultId].matchId].jobOffer].jobCreator == msg.sender,\n        //     \"You cannot reject a result which is not yours.\");\n        // require(results[resultId].reacted == Reaction.None,\n        //     \"You have already reacted to this result\");\n        // require(isMatchClosed[results[resultId].matchId] == false,\n        //     \"This match is already closed.\");\n\n        results[resultId].reacted = Reaction.Rejected;\n        mediationRequested[results[resultId].matchId] = true;\n\n        emit ResultReaction(msg.sender, resultId,results[resultId].matchId,  1);\n\n        emit DebugString(\"result rejected\");\n\n        emit JobAssignedForMediation(msg.sender, results[resultId].matchId);\n    }\n\n    function acceptResult(uint256 resultId, uint256 jobOfferId) public returns (uint256) {\n        //require(jobOffers[matches[results[resultId].matchId].jobOffer].jobCreator == msg.sender ||\n        //    (resourceOffers[matches[results[resultId].matchId].resourceOffer].resProvider == msg.sender && results[resultId].timestamp + reactionDeadline > now),\n        //    \"You cannot reject a result which is not yours or deadline has not been missed yet.\");\n        //require(results[resultId].reacted == Reaction.None,\n        //    \"You have already reacted to this result\");\n        //require(isMatchClosed[results[resultId].matchId] == false,\n        //    \"This match is already closed.\");\n\n        results[resultId].reacted = Reaction.Accepted;\n\n        emit ResultReaction(msg.sender, resultId,results[resultId].matchId,  0);\n\n        emit DebugString(\"result accepted\");\n\n        return close(results[resultId].matchId);\n\n    }\n\n\n    function postMediationResult(\n        uint256 matchId,\n        uint256 jobOfferId,\n        ResultStatus status,\n        bytes32 uri,\n\n        uint256 hash,\n\n        uint256 instructionCount,\n        uint256 bandwidthUsage,\n\n        Verdict verdict,\n        Party faultyParty\n    ) public returns (Party) {\n        // require(matches[matchId].mediator == msg.sender, \"You are not this job's mediator\");\n        // require(mediationRequested[matchId] == true, \"JC did not request mediation for this match.\");\n        // require(mediated[matchId] == false, \"You have already mediated this match.\");\n\n        mediated[matchId] = true;\n\n        uint256 index = mediatorResults.push(MediatorResult({\n            status: status,\n            uri: uri,\n            matchId: matchId,\n            hash: hash,\n            instructionCount: instructionCount,\n            bandwidthUsage: bandwidthUsage,\n            verdict: verdict,\n            faultyParty: faultyParty\n        })) - 1;\n\n        uint256 cost = (instructionCount * mediators[msg.sender].instructionPrice +\n                        bandwidthUsage * mediators[msg.sender].bandwidthPrice) *\n                        resourceOffers[matches[matchId].resourceOffer].verificationCount;\n\n        // emit MediationResultPosted( index, faultyParty, verdict, matchId,\n        //                             status, uri, hash, instructionCount, bandwidthUsage, cost);\n\n        emit MediationResultPosted(matchId, msg.sender, index, faultyParty, verdict, status, uri, hash, instructionCount, cost);\n\n        punish(matchId, faultyParty);\n        //msg.sender.transfer(cost);\n        emit EtherTransferred(address(this), msg.sender, cost, EtherTransferCause.Mediation);\n        emit MatchClosed(matchId, cost);\n        return faultyParty;\n    }\n\n    function punish(uint256 matchId, Party faultyParty) private {\n        // require(isMatchClosed[matchId] == false, \"This match is already closed.\");\n        isMatchClosed[matchId] = true;\n\n        ResourceOffer memory ro = resourceOffers[matches[matchId].resourceOffer];\n        JobOfferPartOne memory jo = jobOffersPartOne[matches[matchId].jobOffer];\n\n        uint256 roDeposit = ro.depositValue;\n        uint256 joDeposit = jo.depositValue;\n\n        jo.depositValue = 0;\n        ro.depositValue = 0;\n\n        uint256 joValue = jo.bandwidthLimit * jo.bandwidthMaxPrice + jo.instructionLimit * jo.instructionMaxPrice;\n        uint256 roValue = ro.bandwidthCap * ro.bandwidthPrice + ro.instructionCap * ro.instructionPrice;\n\n        if (faultyParty == Party.JobCreator) {\n\n            //address(uint160(ro.resProvider)).transfer(roDeposit + roValue);\n            emit EtherTransferred(address(this), ro.resProvider, roDeposit + roValue, EtherTransferCause.Punishment);\n\n        } else if (faultyParty == Party.ResourceProvider) {\n\n            //address(uint160(jo.jobCreator)).transfer(joDeposit + joValue);\n            emit EtherTransferred(address(this), jo.jobCreator, joDeposit + joValue, EtherTransferCause.Punishment);\n        }\n    }\n\n    function close(uint256 matchId) private returns (uint256) {\n        //require(results[matchToResult[matchId]].reacted == Reaction.Accepted,\n        //    \"The job is not done yet.\");\n\n        JobResult memory r = results[matchToResult[matchId]];\n        ResourceOffer memory ro = resourceOffers[matches[matchId].resourceOffer];\n        JobOfferPartOne memory jo = jobOffersPartOne[matches[matchId].jobOffer];\n        address m = matches[matchId].mediator;\n\n        //require(isMatchClosed[matchId] == false, \"This match is already closed.\");\n        isMatchClosed[matchId] = true;\n\n        uint256 cost = r.instructionCount * ro.instructionPrice +\n            r.bandwidthUsage * ro.bandwidthPrice;\n\n        uint256 mediatorAvailabilityIncentive = mediators[m].availabilityValue;\n\n        uint256 jo_deposit = jo.depositValue;\n        uint256 ro_deposit = ro.depositValue;\n\n        jo.depositValue = 0;\n        ro.depositValue = 0;\n\n        //address(uint160(jo.jobCreator)).transfer(jo_deposit - cost - jo.matchIncentive - mediatorAvailabilityIncentive);\n        //address(uint160(ro.resProvider)).transfer(jo_deposit + cost - ro.matchIncentive - mediatorAvailabilityIncentive);\n        //address(uint160(m)).transfer(2 * mediatorAvailabilityIncentive);\n\n\n        emit MatchClosed(matchId, cost);\n        emit EtherTransferred(address(this), jo.jobCreator, jo_deposit - cost, EtherTransferCause.FinishingJob);\n        emit EtherTransferred(address(this), ro.resProvider, ro_deposit + cost, EtherTransferCause.FinishingResource);\n        emit EtherTransferred(address(this), m, 2 * mediatorAvailabilityIncentive, EtherTransferCause.MediatorAvailability);\n\n        return cost;\n    }\n\n    function timeout(uint256 matchId, uint256 jobOfferId) public {\n        // require(jobOffersPartOne[matches[matchId].jobOffer].jobCreator == msg.sender,\n        //     \"You cannot make a timeout on this offer\");\n        // require(jobOffersPartOne[matches[matchId].jobOffer].completionDeadline < now,\n        //     \"RP has more time to finish this job\");\n        // require(isMatchClosed[matchId] == false,\n        //     \"This match is closed.\");\n\n        punish(matchId, Party.ResourceProvider);\n    }\n\n    function receiveValues(address toAccount, uint256 amount) public administrative {\n        address(uint160(toAccount)).transfer(amount);\n    }\n\n}"
  VariableDeclaration "penaltyRate"
     Type: uint256
     Source: "uint256 penaltyRate"
    ElementaryTypeName uint256
       Source: "uint256"
  VariableDeclaration "owner"
     Type: address
     Source: "address owner = msg.sender"
    ElementaryTypeName address
       Source: "address"
    MemberAccess to member sender
       Type: address
       Source: "msg.sender"
      Identifier msg
         Type: msg
         Source: "msg"
  VariableDeclaration "reactionDeadline"
     Type: uint256
     Source: "uint256 reactionDeadline"
    ElementaryTypeName uint256
       Source: "uint256"
  ModifierDefinition "administrative"
     Source: "modifier administrative {\n        if (msg.sender == owner)\n            _;\n        else\n            revert('You cannot call me!');\n        // _;\n    }"
    ParameterList
       Source: ""
    Block
       Source: "{\n        if (msg.sender == owner)\n            _;\n        else\n            revert('You cannot call me!');\n        // _;\n    }"
      IfStatement
         Source: "if (msg.sender == owner)\n            _;\n        else\n            revert('You cannot call me!')"
        BinaryOperation using operator ==
           Type: bool
           Source: "msg.sender == owner"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          Identifier owner
             Type: address
             Source: "owner"
        PlaceholderStatement
           Source: "_"
        ExpressionStatement
           Source: "revert('You cannot call me!')"
          FunctionCall
             Type: tuple()
             Source: "revert('You cannot call me!')"
            Identifier revert
               Type: function (string memory) pure
               Source: "revert"
            Literal, token: [no token] value: You cannot call me!
               Type: literal_string "You cannot call me!"
               Source: "'You cannot call me!'"
  EnumDefinition "Architecture"
    EnumValue "amd64"
    EnumValue "armv7"
  StructDefinition "JobCreator"
     Source: "struct JobCreator {\n        address[] trustedMediators;\n        uint256 itShouldntBeHere; //If I don't add it, I cannot make array of JC public\n    }"
    VariableDeclaration "trustedMediators"
       Type: address[] storage pointer
       Source: "address[] trustedMediators"
      ArrayTypeName
         Source: "address[]"
        ElementaryTypeName address
           Source: "address"
    VariableDeclaration "itShouldntBeHere"
       Type: uint256
       Source: "uint256 itShouldntBeHere"
      ElementaryTypeName uint256
         Source: "uint256"
  StructDefinition "ResourceProvider"
     Source: "struct ResourceProvider {\n        address[] trustedMediators;\n        address[] trustedDirectories;\n        uint256[] supportedFirstLayers;\n        Architecture arch;\n        uint256 timePerInstruction;\n    }"
    VariableDeclaration "trustedMediators"
       Type: address[] storage pointer
       Source: "address[] trustedMediators"
      ArrayTypeName
         Source: "address[]"
        ElementaryTypeName address
           Source: "address"
    VariableDeclaration "trustedDirectories"
       Type: address[] storage pointer
       Source: "address[] trustedDirectories"
      ArrayTypeName
         Source: "address[]"
        ElementaryTypeName address
           Source: "address"
    VariableDeclaration "supportedFirstLayers"
       Type: uint256[] storage pointer
       Source: "uint256[] supportedFirstLayers"
      ArrayTypeName
         Source: "uint256[]"
        ElementaryTypeName uint256
           Source: "uint256"
    VariableDeclaration "arch"
       Type: enum Modicum.Architecture
       Source: "Architecture arch"
      UserDefinedTypeName "Architecture"
         Source: "Architecture"
    VariableDeclaration "timePerInstruction"
       Type: uint256
       Source: "uint256 timePerInstruction"
      ElementaryTypeName uint256
         Source: "uint256"
  StructDefinition "Mediator"
     Source: "struct Mediator {\n        Architecture arch;\n\n        uint256 instructionPrice;\n        uint256 bandwidthPrice;\n        address[] trustedDirectories;\n        uint256[] supportedFirstLayers;\n\n        uint256 availabilityValue;\n\n        uint256 verificationCount;\n    }"
    VariableDeclaration "arch"
       Type: enum Modicum.Architecture
       Source: "Architecture arch"
      UserDefinedTypeName "Architecture"
         Source: "Architecture"
    VariableDeclaration "instructionPrice"
       Type: uint256
       Source: "uint256 instructionPrice"
      ElementaryTypeName uint256
         Source: "uint256"
    VariableDeclaration "bandwidthPrice"
       Type: uint256
       Source: "uint256 bandwidthPrice"
      ElementaryTypeName uint256
         Source: "uint256"
    VariableDeclaration "trustedDirectories"
       Type: address[] storage pointer
       Source: "address[] trustedDirectories"
      ArrayTypeName
         Source: "address[]"
        ElementaryTypeName address
           Source: "address"
    VariableDeclaration "supportedFirstLayers"
       Type: uint256[] storage pointer
       Source: "uint256[] supportedFirstLayers"
      ArrayTypeName
         Source: "uint256[]"
        ElementaryTypeName uint256
           Source: "uint256"
    VariableDeclaration "availabilityValue"
       Type: uint256
       Source: "uint256 availabilityValue"
      ElementaryTypeName uint256
         Source: "uint256"
    VariableDeclaration "verificationCount"
       Type: uint256
       Source: "uint256 verificationCount"
      ElementaryTypeName uint256
         Source: "uint256"
  StructDefinition "JobOfferPartOne"
     Source: "struct JobOfferPartOne {\n        address jobCreator;\n        uint256 depositValue;\n\n        uint256 instructionLimit;\n        uint256 bandwidthLimit;\n\n        uint256 instructionMaxPrice;\n        uint256 bandwidthMaxPrice;\n\n        uint256 completionDeadline;\n\n        uint256 matchIncentive;\n    }"
    VariableDeclaration "jobCreator"
       Type: address
       Source: "address jobCreator"
      ElementaryTypeName address
         Source: "address"
    VariableDeclaration "depositValue"
       Type: uint256
       Source: "uint256 depositValue"
      ElementaryTypeName uint256
         Source: "uint256"
    VariableDeclaration "instructionLimit"
       Type: uint256
       Source: "uint256 instructionLimit"
      ElementaryTypeName uint256
         Source: "uint256"
    VariableDeclaration "bandwidthLimit"
       Type: uint256
       Source: "uint256 bandwidthLimit"
      ElementaryTypeName uint256
         Source: "uint256"
    VariableDeclaration "instructionMaxPrice"
       Type: uint256
       Source: "uint256 instructionMaxPrice"
      ElementaryTypeName uint256
         Source: "uint256"
    VariableDeclaration "bandwidthMaxPrice"
       Type: uint256
       Source: "uint256 bandwidthMaxPrice"
      ElementaryTypeName uint256
         Source: "uint256"
    VariableDeclaration "completionDeadline"
       Type: uint256
       Source: "uint256 completionDeadline"
      ElementaryTypeName uint256
         Source: "uint256"
    VariableDeclaration "matchIncentive"
       Type: uint256
       Source: "uint256 matchIncentive"
      ElementaryTypeName uint256
         Source: "uint256"
  StructDefinition "JobOfferPartTwo"
     Source: "struct JobOfferPartTwo {\n        address jobCreator;\n        uint256 firstLayerHash;\n        uint256 ramLimit;\n        uint256 localStorageLimit;\n        bytes32 uri;\n        address directory;\n        uint256 jobHash;\n        Architecture arch;\n    }"
    VariableDeclaration "jobCreator"
       Type: address
       Source: "address jobCreator"
      ElementaryTypeName address
         Source: "address"
    VariableDeclaration "firstLayerHash"
       Type: uint256
       Source: "uint256 firstLayerHash"
      ElementaryTypeName uint256
         Source: "uint256"
    VariableDeclaration "ramLimit"
       Type: uint256
       Source: "uint256 ramLimit"
      ElementaryTypeName uint256
         Source: "uint256"
    VariableDeclaration "localStorageLimit"
       Type: uint256
       Source: "uint256 localStorageLimit"
      ElementaryTypeName uint256
         Source: "uint256"
    VariableDeclaration "uri"
       Type: bytes32
       Source: "bytes32 uri"
      ElementaryTypeName bytes32
         Source: "bytes32"
    VariableDeclaration "directory"
       Type: address
       Source: "address directory"
      ElementaryTypeName address
         Source: "address"
    VariableDeclaration "jobHash"
       Type: uint256
       Source: "uint256 jobHash"
      ElementaryTypeName uint256
         Source: "uint256"
    VariableDeclaration "arch"
       Type: enum Modicum.Architecture
       Source: "Architecture arch"
      UserDefinedTypeName "Architecture"
         Source: "Architecture"
  StructDefinition "ResourceOffer"
     Source: "struct ResourceOffer {\n\n        address resProvider;\n        uint256 depositValue;\n\n        uint256 instructionPrice;\n        uint256 instructionCap;\n\n        uint256 memoryCap;\n        uint256 localStorageCap;\n\n        uint256 bandwidthCap;\n        uint256 bandwidthPrice;\n\n        uint256 matchIncentive;\n\n        uint256 verificationCount;\n    }"
    VariableDeclaration "resProvider"
       Type: address
       Source: "address resProvider"
      ElementaryTypeName address
         Source: "address"
    VariableDeclaration "depositValue"
       Type: uint256
       Source: "uint256 depositValue"
      ElementaryTypeName uint256
         Source: "uint256"
    VariableDeclaration "instructionPrice"
       Type: uint256
       Source: "uint256 instructionPrice"
      ElementaryTypeName uint256
         Source: "uint256"
    VariableDeclaration "instructionCap"
       Type: uint256
       Source: "uint256 instructionCap"
      ElementaryTypeName uint256
         Source: "uint256"
    VariableDeclaration "memoryCap"
       Type: uint256
       Source: "uint256 memoryCap"
      ElementaryTypeName uint256
         Source: "uint256"
    VariableDeclaration "localStorageCap"
       Type: uint256
       Source: "uint256 localStorageCap"
      ElementaryTypeName uint256
         Source: "uint256"
    VariableDeclaration "bandwidthCap"
       Type: uint256
       Source: "uint256 bandwidthCap"
      ElementaryTypeName uint256
         Source: "uint256"
    VariableDeclaration "bandwidthPrice"
       Type: uint256
       Source: "uint256 bandwidthPrice"
      ElementaryTypeName uint256
         Source: "uint256"
    VariableDeclaration "matchIncentive"
       Type: uint256
       Source: "uint256 matchIncentive"
      ElementaryTypeName uint256
         Source: "uint256"
    VariableDeclaration "verificationCount"
       Type: uint256
       Source: "uint256 verificationCount"
      ElementaryTypeName uint256
         Source: "uint256"
  EnumDefinition "ResultStatus"
    EnumValue "Completed"
    EnumValue "Declined"
    EnumValue "JobDescriptionError"
    EnumValue "JobNotFound"
    EnumValue "MemoryExceeded"
    EnumValue "StorageExceeded"
    EnumValue "InstructionsExceeded"
    EnumValue "BandwidthExceeded"
    EnumValue "ExceptionOccured"
    EnumValue "DirectoryUnavailable"
  StructDefinition "Match"
     Source: "struct Match {\n        uint256 resourceOffer;\n        uint256 jobOffer;\n        address mediator;\n    }"
    VariableDeclaration "resourceOffer"
       Type: uint256
       Source: "uint256 resourceOffer"
      ElementaryTypeName uint256
         Source: "uint256"
    VariableDeclaration "jobOffer"
       Type: uint256
       Source: "uint256 jobOffer"
      ElementaryTypeName uint256
         Source: "uint256"
    VariableDeclaration "mediator"
       Type: address
       Source: "address mediator"
      ElementaryTypeName address
         Source: "address"
  StructDefinition "JobResult"
     Source: "struct JobResult {\n        ResultStatus status;\n        bytes32 uri;\n\n        uint256 matchId;\n\n        uint256 hash;\n\n        uint256 instructionCount;\n        uint256 bandwidthUsage;\n\n        Reaction reacted;\n        uint256 timestamp;\n    }"
    VariableDeclaration "status"
       Type: enum Modicum.ResultStatus
       Source: "ResultStatus status"
      UserDefinedTypeName "ResultStatus"
         Source: "ResultStatus"
    VariableDeclaration "uri"
       Type: bytes32
       Source: "bytes32 uri"
      ElementaryTypeName bytes32
         Source: "bytes32"
    VariableDeclaration "matchId"
       Type: uint256
       Source: "uint256 matchId"
      ElementaryTypeName uint256
         Source: "uint256"
    VariableDeclaration "hash"
       Type: uint256
       Source: "uint256 hash"
      ElementaryTypeName uint256
         Source: "uint256"
    VariableDeclaration "instructionCount"
       Type: uint256
       Source: "uint256 instructionCount"
      ElementaryTypeName uint256
         Source: "uint256"
    VariableDeclaration "bandwidthUsage"
       Type: uint256
       Source: "uint256 bandwidthUsage"
      ElementaryTypeName uint256
         Source: "uint256"
    VariableDeclaration "reacted"
       Type: enum Modicum.Reaction
       Source: "Reaction reacted"
      UserDefinedTypeName "Reaction"
         Source: "Reaction"
    VariableDeclaration "timestamp"
       Type: uint256
       Source: "uint256 timestamp"
      ElementaryTypeName uint256
         Source: "uint256"
  StructDefinition "MediatorResult"
     Source: "struct MediatorResult {\n        ResultStatus status;\n        bytes32 uri;\n\n        uint256 matchId;\n\n        uint256 hash;\n\n        uint256 instructionCount;\n        uint256 bandwidthUsage;\n\n        Verdict verdict;\n        Party faultyParty;\n    }"
    VariableDeclaration "status"
       Type: enum Modicum.ResultStatus
       Source: "ResultStatus status"
      UserDefinedTypeName "ResultStatus"
         Source: "ResultStatus"
    VariableDeclaration "uri"
       Type: bytes32
       Source: "bytes32 uri"
      ElementaryTypeName bytes32
         Source: "bytes32"
    VariableDeclaration "matchId"
       Type: uint256
       Source: "uint256 matchId"
      ElementaryTypeName uint256
         Source: "uint256"
    VariableDeclaration "hash"
       Type: uint256
       Source: "uint256 hash"
      ElementaryTypeName uint256
         Source: "uint256"
    VariableDeclaration "instructionCount"
       Type: uint256
       Source: "uint256 instructionCount"
      ElementaryTypeName uint256
         Source: "uint256"
    VariableDeclaration "bandwidthUsage"
       Type: uint256
       Source: "uint256 bandwidthUsage"
      ElementaryTypeName uint256
         Source: "uint256"
    VariableDeclaration "verdict"
       Type: enum Modicum.Verdict
       Source: "Verdict verdict"
      UserDefinedTypeName "Verdict"
         Source: "Verdict"
    VariableDeclaration "faultyParty"
       Type: enum Modicum.Party
       Source: "Party faultyParty"
      UserDefinedTypeName "Party"
         Source: "Party"
  EnumDefinition "Party"
    EnumValue "ResourceProvider"
    EnumValue "JobCreator"
  EnumDefinition "Verdict"
    EnumValue "ResultNotFound"
    EnumValue "TooMuchCost"
    EnumValue "WrongResults"
    EnumValue "CorrectResults"
    EnumValue "InvalidResultStatus"
  EnumDefinition "Reaction"
    EnumValue "Accepted"
    EnumValue "Rejected"
    EnumValue "None"
  EnumDefinition "EtherTransferCause"
    EnumValue "PostJobOffer"
    EnumValue "PostResourceOffer"
    EnumValue "CancelJobOffer"
    EnumValue "CancelResOffer"
    EnumValue "Punishment"
    EnumValue "Mediation"
    EnumValue "FinishingJob"
    EnumValue "FinishingResource"
    EnumValue "PostMatch"
    EnumValue "MediatorAvailability"
  EventDefinition "Debug"
     Source: "event Debug(uint64 value);"
    ParameterList
       Source: "(uint64 value)"
      VariableDeclaration "value"
         Type: uint64
         Source: "uint64 value"
        ElementaryTypeName uint64
           Source: "uint64"
  EventDefinition "DebugArch"
     Source: "event DebugArch(Architecture arch);"
    ParameterList
       Source: "(Architecture arch)"
      VariableDeclaration "arch"
         Type: enum Modicum.Architecture
         Source: "Architecture arch"
        UserDefinedTypeName "Architecture"
           Source: "Architecture"
  EventDefinition "DebugUint"
     Source: "event DebugUint(uint256 value);"
    ParameterList
       Source: "(uint256 value)"
      VariableDeclaration "value"
         Type: uint256
         Source: "uint256 value"
        ElementaryTypeName uint256
           Source: "uint256"
  EventDefinition "DebugString"
     Source: "event DebugString(bytes32 str);"
    ParameterList
       Source: "(bytes32 str)"
      VariableDeclaration "str"
         Type: bytes32
         Source: "bytes32 str"
        ElementaryTypeName bytes32
           Source: "bytes32"
  EventDefinition "penaltyRateSet"
     Source: "event penaltyRateSet(uint256 penaltyRate);"
    ParameterList
       Source: "(uint256 penaltyRate)"
      VariableDeclaration "penaltyRate"
         Type: uint256
         Source: "uint256 penaltyRate"
        ElementaryTypeName uint256
           Source: "uint256"
  EventDefinition "reactionDeadlineSet"
     Source: "event reactionDeadlineSet(uint256 reactionDeadline);"
    ParameterList
       Source: "(uint256 reactionDeadline)"
      VariableDeclaration "reactionDeadline"
         Type: uint256
         Source: "uint256 reactionDeadline"
        ElementaryTypeName uint256
           Source: "uint256"
  EventDefinition "ResultReaction"
     Source: "event ResultReaction(address addr, uint256 resultId, uint256 matchId, uint256 ResultReaction);"
    ParameterList
       Source: "(address addr, uint256 resultId, uint256 matchId, uint256 ResultReaction)"
      VariableDeclaration "addr"
         Type: address
         Source: "address addr"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "resultId"
         Type: uint256
         Source: "uint256 resultId"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "matchId"
         Type: uint256
         Source: "uint256 matchId"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "ResultReaction"
         Type: uint256
         Source: "uint256 ResultReaction"
        ElementaryTypeName uint256
           Source: "uint256"
  EventDefinition "ResultPosted"
     Source: "event ResultPosted(address addr, uint256 resultId, uint256 matchId, ResultStatus status, bytes32 uri,\n                       uint256 hash, uint256 instructionCount, uint256 bandwidthUsage);"
    ParameterList
       Source: "(address addr, uint256 resultId, uint256 matchId, ResultStatus status, bytes32 uri,\n                       uint256 hash, uint256 instructionCount, uint256 bandwidthUsage)"
      VariableDeclaration "addr"
         Type: address
         Source: "address addr"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "resultId"
         Type: uint256
         Source: "uint256 resultId"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "matchId"
         Type: uint256
         Source: "uint256 matchId"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "status"
         Type: enum Modicum.ResultStatus
         Source: "ResultStatus status"
        UserDefinedTypeName "ResultStatus"
           Source: "ResultStatus"
      VariableDeclaration "uri"
         Type: bytes32
         Source: "bytes32 uri"
        ElementaryTypeName bytes32
           Source: "bytes32"
      VariableDeclaration "hash"
         Type: uint256
         Source: "uint256 hash"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "instructionCount"
         Type: uint256
         Source: "uint256 instructionCount"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "bandwidthUsage"
         Type: uint256
         Source: "uint256 bandwidthUsage"
        ElementaryTypeName uint256
           Source: "uint256"
  EventDefinition "Matched"
     Source: "event Matched(address addr, uint256 matchId, uint256 jobOfferId, uint256 resourceOfferId, address mediator);"
    ParameterList
       Source: "(address addr, uint256 matchId, uint256 jobOfferId, uint256 resourceOfferId, address mediator)"
      VariableDeclaration "addr"
         Type: address
         Source: "address addr"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "matchId"
         Type: uint256
         Source: "uint256 matchId"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "jobOfferId"
         Type: uint256
         Source: "uint256 jobOfferId"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "resourceOfferId"
         Type: uint256
         Source: "uint256 resourceOfferId"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "mediator"
         Type: address
         Source: "address mediator"
        ElementaryTypeName address
           Source: "address"
  EventDefinition "JobOfferPostedPartOne"
     Source: "event JobOfferPostedPartOne(uint256 offerId, uint256 ijoid, address addr, uint256 instructionLimit,\n                                uint256 bandwidthLimit, uint256 instructionMaxPrice, uint256 bandwidthMaxPrice, uint256 completionDeadline, uint256 deposit, uint256 matchIncentive);"
    ParameterList
       Source: "(uint256 offerId, uint256 ijoid, address addr, uint256 instructionLimit,\n                                uint256 bandwidthLimit, uint256 instructionMaxPrice, uint256 bandwidthMaxPrice, uint256 completionDeadline, uint256 deposit, uint256 matchIncentive)"
      VariableDeclaration "offerId"
         Type: uint256
         Source: "uint256 offerId"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "ijoid"
         Type: uint256
         Source: "uint256 ijoid"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "addr"
         Type: address
         Source: "address addr"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "instructionLimit"
         Type: uint256
         Source: "uint256 instructionLimit"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "bandwidthLimit"
         Type: uint256
         Source: "uint256 bandwidthLimit"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "instructionMaxPrice"
         Type: uint256
         Source: "uint256 instructionMaxPrice"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "bandwidthMaxPrice"
         Type: uint256
         Source: "uint256 bandwidthMaxPrice"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "completionDeadline"
         Type: uint256
         Source: "uint256 completionDeadline"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "deposit"
         Type: uint256
         Source: "uint256 deposit"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "matchIncentive"
         Type: uint256
         Source: "uint256 matchIncentive"
        ElementaryTypeName uint256
           Source: "uint256"
  EventDefinition "JobOfferPostedPartTwo"
     Source: "event JobOfferPostedPartTwo(uint256 offerId, address addr, uint256 hash, uint256 firstLayerHash, bytes32 uri,\n                                address directory, Architecture arch, uint256 ramLimit, uint256 localStorageLimit);"
    ParameterList
       Source: "(uint256 offerId, address addr, uint256 hash, uint256 firstLayerHash, bytes32 uri,\n                                address directory, Architecture arch, uint256 ramLimit, uint256 localStorageLimit)"
      VariableDeclaration "offerId"
         Type: uint256
         Source: "uint256 offerId"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "addr"
         Type: address
         Source: "address addr"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "hash"
         Type: uint256
         Source: "uint256 hash"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "firstLayerHash"
         Type: uint256
         Source: "uint256 firstLayerHash"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "uri"
         Type: bytes32
         Source: "bytes32 uri"
        ElementaryTypeName bytes32
           Source: "bytes32"
      VariableDeclaration "directory"
         Type: address
         Source: "address directory"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "arch"
         Type: enum Modicum.Architecture
         Source: "Architecture arch"
        UserDefinedTypeName "Architecture"
           Source: "Architecture"
      VariableDeclaration "ramLimit"
         Type: uint256
         Source: "uint256 ramLimit"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "localStorageLimit"
         Type: uint256
         Source: "uint256 localStorageLimit"
        ElementaryTypeName uint256
           Source: "uint256"
  EventDefinition "ResourceOfferPosted"
     Source: "event ResourceOfferPosted(uint256 offerId, address addr, uint256 instructionPrice,\n                              uint256 instructionCap, uint256 memoryCap, uint256 localStorageCap,\n                              uint256 bandwidthCap, uint256 bandwidthPrice, uint256 deposit,uint256 iroid);"
    ParameterList
       Source: "(uint256 offerId, address addr, uint256 instructionPrice,\n                              uint256 instructionCap, uint256 memoryCap, uint256 localStorageCap,\n                              uint256 bandwidthCap, uint256 bandwidthPrice, uint256 deposit,uint256 iroid)"
      VariableDeclaration "offerId"
         Type: uint256
         Source: "uint256 offerId"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "addr"
         Type: address
         Source: "address addr"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "instructionPrice"
         Type: uint256
         Source: "uint256 instructionPrice"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "instructionCap"
         Type: uint256
         Source: "uint256 instructionCap"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "memoryCap"
         Type: uint256
         Source: "uint256 memoryCap"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "localStorageCap"
         Type: uint256
         Source: "uint256 localStorageCap"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "bandwidthCap"
         Type: uint256
         Source: "uint256 bandwidthCap"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "bandwidthPrice"
         Type: uint256
         Source: "uint256 bandwidthPrice"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "deposit"
         Type: uint256
         Source: "uint256 deposit"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "iroid"
         Type: uint256
         Source: "uint256 iroid"
        ElementaryTypeName uint256
           Source: "uint256"
  EventDefinition "JobOfferCanceled"
     Source: "event JobOfferCanceled(uint256 offerId);"
    ParameterList
       Source: "(uint256 offerId)"
      VariableDeclaration "offerId"
         Type: uint256
         Source: "uint256 offerId"
        ElementaryTypeName uint256
           Source: "uint256"
  EventDefinition "ResourceOfferCanceled"
     Source: "event ResourceOfferCanceled(uint256 resOfferId);"
    ParameterList
       Source: "(uint256 resOfferId)"
      VariableDeclaration "resOfferId"
         Type: uint256
         Source: "uint256 resOfferId"
        ElementaryTypeName uint256
           Source: "uint256"
  EventDefinition "JobAssignedForMediation"
     Source: "event JobAssignedForMediation(address addr, uint256 matchId);"
    ParameterList
       Source: "(address addr, uint256 matchId)"
      VariableDeclaration "addr"
         Type: address
         Source: "address addr"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "matchId"
         Type: uint256
         Source: "uint256 matchId"
        ElementaryTypeName uint256
           Source: "uint256"
  EventDefinition "MediatorRegistered"
     Source: "event MediatorRegistered(address addr, Architecture arch, uint256 instructionPrice, uint256 bandwidthPrice,\n                             uint256 availabilityValue, uint256 verificationCount);"
    ParameterList
       Source: "(address addr, Architecture arch, uint256 instructionPrice, uint256 bandwidthPrice,\n                             uint256 availabilityValue, uint256 verificationCount)"
      VariableDeclaration "addr"
         Type: address
         Source: "address addr"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "arch"
         Type: enum Modicum.Architecture
         Source: "Architecture arch"
        UserDefinedTypeName "Architecture"
           Source: "Architecture"
      VariableDeclaration "instructionPrice"
         Type: uint256
         Source: "uint256 instructionPrice"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "bandwidthPrice"
         Type: uint256
         Source: "uint256 bandwidthPrice"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "availabilityValue"
         Type: uint256
         Source: "uint256 availabilityValue"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "verificationCount"
         Type: uint256
         Source: "uint256 verificationCount"
        ElementaryTypeName uint256
           Source: "uint256"
  EventDefinition "MediatorAddedSupportedFirstLayer"
     Source: "event MediatorAddedSupportedFirstLayer(address addr, uint256 firstLayerHash);"
    ParameterList
       Source: "(address addr, uint256 firstLayerHash)"
      VariableDeclaration "addr"
         Type: address
         Source: "address addr"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "firstLayerHash"
         Type: uint256
         Source: "uint256 firstLayerHash"
        ElementaryTypeName uint256
           Source: "uint256"
  EventDefinition "ResourceProviderRegistered"
     Source: "event ResourceProviderRegistered(address addr, Architecture arch, uint256 timePerInstruction, uint256 penaltyRate);"
    ParameterList
       Source: "(address addr, Architecture arch, uint256 timePerInstruction, uint256 penaltyRate)"
      VariableDeclaration "addr"
         Type: address
         Source: "address addr"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "arch"
         Type: enum Modicum.Architecture
         Source: "Architecture arch"
        UserDefinedTypeName "Architecture"
           Source: "Architecture"
      VariableDeclaration "timePerInstruction"
         Type: uint256
         Source: "uint256 timePerInstruction"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "penaltyRate"
         Type: uint256
         Source: "uint256 penaltyRate"
        ElementaryTypeName uint256
           Source: "uint256"
  EventDefinition "ResourceProviderAddedTrustedMediator"
     Source: "event ResourceProviderAddedTrustedMediator(address addr, address mediator);"
    ParameterList
       Source: "(address addr, address mediator)"
      VariableDeclaration "addr"
         Type: address
         Source: "address addr"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "mediator"
         Type: address
         Source: "address mediator"
        ElementaryTypeName address
           Source: "address"
  EventDefinition "JobCreatorRegistered"
     Source: "event JobCreatorRegistered(address addr, uint256 penaltyRate);"
    ParameterList
       Source: "(address addr, uint256 penaltyRate)"
      VariableDeclaration "addr"
         Type: address
         Source: "address addr"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "penaltyRate"
         Type: uint256
         Source: "uint256 penaltyRate"
        ElementaryTypeName uint256
           Source: "uint256"
  EventDefinition "JobCreatorAddedTrustedMediator"
     Source: "event JobCreatorAddedTrustedMediator(address addr, address mediator);"
    ParameterList
       Source: "(address addr, address mediator)"
      VariableDeclaration "addr"
         Type: address
         Source: "address addr"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "mediator"
         Type: address
         Source: "address mediator"
        ElementaryTypeName address
           Source: "address"
  EventDefinition "MediatorAddedTrustedDirectory"
     Source: "event MediatorAddedTrustedDirectory(address addr, address directory);"
    ParameterList
       Source: "(address addr, address directory)"
      VariableDeclaration "addr"
         Type: address
         Source: "address addr"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "directory"
         Type: address
         Source: "address directory"
        ElementaryTypeName address
           Source: "address"
  EventDefinition "ResourceProviderAddedTrustedDirectory"
     Source: "event ResourceProviderAddedTrustedDirectory(address addr, address directory);"
    ParameterList
       Source: "(address addr, address directory)"
      VariableDeclaration "addr"
         Type: address
         Source: "address addr"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "directory"
         Type: address
         Source: "address directory"
        ElementaryTypeName address
           Source: "address"
  EventDefinition "ResourceProviderAddedSupportedFirstLayer"
     Source: "event ResourceProviderAddedSupportedFirstLayer(address addr, uint256 firstLayer);"
    ParameterList
       Source: "(address addr, uint256 firstLayer)"
      VariableDeclaration "addr"
         Type: address
         Source: "address addr"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "firstLayer"
         Type: uint256
         Source: "uint256 firstLayer"
        ElementaryTypeName uint256
           Source: "uint256"
  EventDefinition "MediationResultPosted"
     Source: "event MediationResultPosted(uint256 matchId, address addr, uint256 result, Party faultyParty, Verdict verdict, ResultStatus status,\n                                bytes32 uri, uint256 hash, uint256 instructionCount, uint256 mediationCost);"
    ParameterList
       Source: "(uint256 matchId, address addr, uint256 result, Party faultyParty, Verdict verdict, ResultStatus status,\n                                bytes32 uri, uint256 hash, uint256 instructionCount, uint256 mediationCost)"
      VariableDeclaration "matchId"
         Type: uint256
         Source: "uint256 matchId"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "addr"
         Type: address
         Source: "address addr"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "result"
         Type: uint256
         Source: "uint256 result"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "faultyParty"
         Type: enum Modicum.Party
         Source: "Party faultyParty"
        UserDefinedTypeName "Party"
           Source: "Party"
      VariableDeclaration "verdict"
         Type: enum Modicum.Verdict
         Source: "Verdict verdict"
        UserDefinedTypeName "Verdict"
           Source: "Verdict"
      VariableDeclaration "status"
         Type: enum Modicum.ResultStatus
         Source: "ResultStatus status"
        UserDefinedTypeName "ResultStatus"
           Source: "ResultStatus"
      VariableDeclaration "uri"
         Type: bytes32
         Source: "bytes32 uri"
        ElementaryTypeName bytes32
           Source: "bytes32"
      VariableDeclaration "hash"
         Type: uint256
         Source: "uint256 hash"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "instructionCount"
         Type: uint256
         Source: "uint256 instructionCount"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "mediationCost"
         Type: uint256
         Source: "uint256 mediationCost"
        ElementaryTypeName uint256
           Source: "uint256"
  EventDefinition "MatchClosed"
     Source: "event MatchClosed(uint256 matchId, uint256 cost);"
    ParameterList
       Source: "(uint256 matchId, uint256 cost)"
      VariableDeclaration "matchId"
         Type: uint256
         Source: "uint256 matchId"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "cost"
         Type: uint256
         Source: "uint256 cost"
        ElementaryTypeName uint256
           Source: "uint256"
  EventDefinition "EtherTransferred"
     Source: "event EtherTransferred(address _from, address to, uint256 value, EtherTransferCause cause);"
    ParameterList
       Source: "(address _from, address to, uint256 value, EtherTransferCause cause)"
      VariableDeclaration "_from"
         Type: address
         Source: "address _from"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "to"
         Type: address
         Source: "address to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "value"
         Type: uint256
         Source: "uint256 value"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "cause"
         Type: enum Modicum.EtherTransferCause
         Source: "EtherTransferCause cause"
        UserDefinedTypeName "EtherTransferCause"
           Source: "EtherTransferCause"
  VariableDeclaration "mediators"
     Type: mapping(address => struct Modicum.Mediator storage ref)
     Source: "mapping(address => Mediator) public mediators"
    Mapping
       Source: "mapping(address => Mediator)"
      ElementaryTypeName address
         Source: "address"
      UserDefinedTypeName "Mediator"
         Source: "Mediator"
  VariableDeclaration "resourceProviders"
     Type: mapping(address => struct Modicum.ResourceProvider storage ref)
     Source: "mapping(address => ResourceProvider) resourceProviders"
    Mapping
       Source: "mapping(address => ResourceProvider)"
      ElementaryTypeName address
         Source: "address"
      UserDefinedTypeName "ResourceProvider"
         Source: "ResourceProvider"
  VariableDeclaration "jobCreators"
     Type: mapping(address => struct Modicum.JobCreator storage ref)
     Source: "mapping(address => JobCreator) jobCreators"
    Mapping
       Source: "mapping(address => JobCreator)"
      ElementaryTypeName address
         Source: "address"
      UserDefinedTypeName "JobCreator"
         Source: "JobCreator"
  VariableDeclaration "resourceOffers"
     Type: struct Modicum.ResourceOffer storage ref[] storage ref
     Source: "ResourceOffer[] resourceOffers"
    ArrayTypeName
       Source: "ResourceOffer[]"
      UserDefinedTypeName "ResourceOffer"
         Source: "ResourceOffer"
  VariableDeclaration "joIndex"
     Type: uint256
     Source: "uint256 joIndex = 1"
    ElementaryTypeName uint256
       Source: "uint256"
    Literal, token: [no token] value: 1
       Type: int_const 1
       Source: "1"
  VariableDeclaration "jobOffersPartOne"
     Type: mapping(uint256 => struct Modicum.JobOfferPartOne storage ref)
     Source: "mapping(uint256 => JobOfferPartOne) jobOffersPartOne"
    Mapping
       Source: "mapping(uint256 => JobOfferPartOne)"
      ElementaryTypeName uint256
         Source: "uint256"
      UserDefinedTypeName "JobOfferPartOne"
         Source: "JobOfferPartOne"
  VariableDeclaration "jobOffersPartTwo"
     Type: mapping(uint256 => struct Modicum.JobOfferPartTwo storage ref)
     Source: "mapping(uint256 => JobOfferPartTwo) jobOffersPartTwo"
    Mapping
       Source: "mapping(uint256 => JobOfferPartTwo)"
      ElementaryTypeName uint256
         Source: "uint256"
      UserDefinedTypeName "JobOfferPartTwo"
         Source: "JobOfferPartTwo"
  VariableDeclaration "findJOIndex"
     Type: mapping(address => mapping(uint256 => uint256))
     Source: "mapping(address => mapping(uint256 => uint256)) findJOIndex"
    Mapping
       Source: "mapping(address => mapping(uint256 => uint256))"
      ElementaryTypeName address
         Source: "address"
      Mapping
         Source: "mapping(uint256 => uint256)"
        ElementaryTypeName uint256
           Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
  VariableDeclaration "matches"
     Type: struct Modicum.Match storage ref[] storage ref
     Source: "Match[] matches"
    ArrayTypeName
       Source: "Match[]"
      UserDefinedTypeName "Match"
         Source: "Match"
  VariableDeclaration "results"
     Type: struct Modicum.JobResult storage ref[] storage ref
     Source: "JobResult[] results"
    ArrayTypeName
       Source: "JobResult[]"
      UserDefinedTypeName "JobResult"
         Source: "JobResult"
  VariableDeclaration "mediatorResults"
     Type: struct Modicum.MediatorResult storage ref[] storage ref
     Source: "MediatorResult[] mediatorResults"
    ArrayTypeName
       Source: "MediatorResult[]"
      UserDefinedTypeName "MediatorResult"
         Source: "MediatorResult"
  VariableDeclaration "jobOfferPartOnePosted"
     Type: mapping(uint256 => bool)
     Source: "mapping(uint256 => bool) jobOfferPartOnePosted"
    Mapping
       Source: "mapping(uint256 => bool)"
      ElementaryTypeName uint256
         Source: "uint256"
      ElementaryTypeName bool
         Source: "bool"
  VariableDeclaration "jobOfferPartTwoPosted"
     Type: mapping(uint256 => bool)
     Source: "mapping(uint256 => bool) jobOfferPartTwoPosted"
    Mapping
       Source: "mapping(uint256 => bool)"
      ElementaryTypeName uint256
         Source: "uint256"
      ElementaryTypeName bool
         Source: "bool"
  VariableDeclaration "mediationRequested"
     Type: mapping(uint256 => bool)
     Source: "mapping(uint256 => bool) mediationRequested"
    Mapping
       Source: "mapping(uint256 => bool)"
      ElementaryTypeName uint256
         Source: "uint256"
      ElementaryTypeName bool
         Source: "bool"
  VariableDeclaration "mediated"
     Type: mapping(uint256 => bool)
     Source: "mapping(uint256 => bool) mediated"
    Mapping
       Source: "mapping(uint256 => bool)"
      ElementaryTypeName uint256
         Source: "uint256"
      ElementaryTypeName bool
         Source: "bool"
  VariableDeclaration "matchToResult"
     Type: mapping(uint256 => uint256)
     Source: "mapping(uint256 => uint256) matchToResult"
    Mapping
       Source: "mapping(uint256 => uint256)"
      ElementaryTypeName uint256
         Source: "uint256"
      ElementaryTypeName uint256
         Source: "uint256"
  VariableDeclaration "resultAvailable"
     Type: mapping(uint256 => bool)
     Source: "mapping(uint256 => bool) resultAvailable"
    Mapping
       Source: "mapping(uint256 => bool)"
      ElementaryTypeName uint256
         Source: "uint256"
      ElementaryTypeName bool
         Source: "bool"
  VariableDeclaration "jobOfferMatched"
     Type: mapping(uint256 => bool)
     Source: "mapping(uint256 => bool) jobOfferMatched"
    Mapping
       Source: "mapping(uint256 => bool)"
      ElementaryTypeName uint256
         Source: "uint256"
      ElementaryTypeName bool
         Source: "bool"
  VariableDeclaration "resOfferMatched"
     Type: mapping(uint256 => bool)
     Source: "mapping(uint256 => bool) resOfferMatched"
    Mapping
       Source: "mapping(uint256 => bool)"
      ElementaryTypeName uint256
         Source: "uint256"
      ElementaryTypeName bool
         Source: "bool"
  VariableDeclaration "isJobOfferCanceled"
     Type: mapping(uint256 => bool)
     Source: "mapping(uint256 => bool) isJobOfferCanceled"
    Mapping
       Source: "mapping(uint256 => bool)"
      ElementaryTypeName uint256
         Source: "uint256"
      ElementaryTypeName bool
         Source: "bool"
  VariableDeclaration "isResOfferCanceled"
     Type: mapping(uint256 => bool)
     Source: "mapping(uint256 => bool) isResOfferCanceled"
    Mapping
       Source: "mapping(uint256 => bool)"
      ElementaryTypeName uint256
         Source: "uint256"
      ElementaryTypeName bool
         Source: "bool"
  VariableDeclaration "isMatchClosed"
     Type: mapping(uint256 => bool)
     Source: "mapping(uint256 => bool) isMatchClosed"
    Mapping
       Source: "mapping(uint256 => bool)"
      ElementaryTypeName uint256
         Source: "uint256"
      ElementaryTypeName bool
         Source: "bool"
  FunctionDefinition "" - public
     Source: "function () external payable {\n        revert(\"Why are you calling me?\");\n    }"
    ParameterList
       Source: "()"
    ParameterList
       Source: ""
    Block
       Source: "{\n        revert(\"Why are you calling me?\");\n    }"
      ExpressionStatement
         Source: "revert(\"Why are you calling me?\")"
        FunctionCall
           Type: tuple()
           Source: "revert(\"Why are you calling me?\")"
          Identifier revert
             Type: function (string memory) pure
             Source: "revert"
          Literal, token: [no token] value: Why are you calling me?
             Type: literal_string "Why are you calling me?"
             Source: "\"Why are you calling me?\""
  FunctionDefinition "test" - public
     Source: "function test(uint256 value) public{\n      require(value > 0,\n      \"This should be greater than 0\");\n      emit DebugUint(value);\n    }"
    ParameterList
       Source: "(uint256 value)"
      VariableDeclaration "value"
         Type: uint256
         Source: "uint256 value"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: ""
    Block
       Source: "{\n      require(value > 0,\n      \"This should be greater than 0\");\n      emit DebugUint(value);\n    }"
      ExpressionStatement
         Source: "require(value > 0,\n      \"This should be greater than 0\")"
        FunctionCall
           Type: tuple()
           Source: "require(value > 0,\n      \"This should be greater than 0\")"
          Identifier require
             Type: function (bool,string memory) pure
             Source: "require"
          BinaryOperation using operator >
             Type: bool
             Source: "value > 0"
            Identifier value
               Type: uint256
               Source: "value"
            Literal, token: [no token] value: 0
               Type: int_const 0
               Source: "0"
          Literal, token: [no token] value: This should be greater than 0
             Type: literal_string "This should be greater than 0"
             Source: "\"This should be greater than 0\""
      EmitStatement
         Source: "emit DebugUint(value)"
        FunctionCall
           Type: tuple()
           Source: "DebugUint(value)"
          Identifier DebugUint
             Type: function (uint256)
             Source: "DebugUint"
          Identifier value
             Type: uint256
             Source: "value"
  FunctionDefinition "check" - public
     Source: "function check(Architecture arch) public{\n        //Architecture arch = Architecture.amd64;\n        emit Debug(5);\n        emit DebugArch(arch);\n        emit DebugUint(1);\n    }"
    ParameterList
       Source: "(Architecture arch)"
      VariableDeclaration "arch"
         Type: enum Modicum.Architecture
         Source: "Architecture arch"
        UserDefinedTypeName "Architecture"
           Source: "Architecture"
    ParameterList
       Source: ""
    Block
       Source: "{\n        //Architecture arch = Architecture.amd64;\n        emit Debug(5);\n        emit DebugArch(arch);\n        emit DebugUint(1);\n    }"
      EmitStatement
         Source: "emit Debug(5)"
        FunctionCall
           Type: tuple()
           Source: "Debug(5)"
          Identifier Debug
             Type: function (uint64)
             Source: "Debug"
          Literal, token: [no token] value: 5
             Type: int_const 5
             Source: "5"
      EmitStatement
         Source: "emit DebugArch(arch)"
        FunctionCall
           Type: tuple()
           Source: "DebugArch(arch)"
          Identifier DebugArch
             Type: function (enum Modicum.Architecture)
             Source: "DebugArch"
          Identifier arch
             Type: enum Modicum.Architecture
             Source: "arch"
      EmitStatement
         Source: "emit DebugUint(1)"
        FunctionCall
           Type: tuple()
           Source: "DebugUint(1)"
          Identifier DebugUint
             Type: function (uint256)
             Source: "DebugUint"
          Literal, token: [no token] value: 1
             Type: int_const 1
             Source: "1"
  FunctionDefinition "setPenaltyRate" - public
     Source: "function setPenaltyRate(uint256 _penaltyRate) public administrative {\n        penaltyRate = _penaltyRate;\n        emit penaltyRateSet(penaltyRate);\n    }"
    ParameterList
       Source: "(uint256 _penaltyRate)"
      VariableDeclaration "_penaltyRate"
         Type: uint256
         Source: "uint256 _penaltyRate"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: ""
    ModifierInvocation "administrative"
       Source: "administrative"
      Identifier administrative
         Type: modifier ()
         Source: "administrative"
    Block
       Source: "{\n        penaltyRate = _penaltyRate;\n        emit penaltyRateSet(penaltyRate);\n    }"
      ExpressionStatement
         Source: "penaltyRate = _penaltyRate"
        Assignment using operator =
           Type: uint256
           Source: "penaltyRate = _penaltyRate"
          Identifier penaltyRate
             Type: uint256
             Source: "penaltyRate"
          Identifier _penaltyRate
             Type: uint256
             Source: "_penaltyRate"
      EmitStatement
         Source: "emit penaltyRateSet(penaltyRate)"
        FunctionCall
           Type: tuple()
           Source: "penaltyRateSet(penaltyRate)"
          Identifier penaltyRateSet
             Type: function (uint256)
             Source: "penaltyRateSet"
          Identifier penaltyRate
             Type: uint256
             Source: "penaltyRate"
  FunctionDefinition "setReactionDeadline" - public
     Source: "function setReactionDeadline(uint256 _reactionDeadline) public administrative {\n        reactionDeadline = _reactionDeadline;\n        emit reactionDeadlineSet(_reactionDeadline);\n    }"
    ParameterList
       Source: "(uint256 _reactionDeadline)"
      VariableDeclaration "_reactionDeadline"
         Type: uint256
         Source: "uint256 _reactionDeadline"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: ""
    ModifierInvocation "administrative"
       Source: "administrative"
      Identifier administrative
         Type: modifier ()
         Source: "administrative"
    Block
       Source: "{\n        reactionDeadline = _reactionDeadline;\n        emit reactionDeadlineSet(_reactionDeadline);\n    }"
      ExpressionStatement
         Source: "reactionDeadline = _reactionDeadline"
        Assignment using operator =
           Type: uint256
           Source: "reactionDeadline = _reactionDeadline"
          Identifier reactionDeadline
             Type: uint256
             Source: "reactionDeadline"
          Identifier _reactionDeadline
             Type: uint256
             Source: "_reactionDeadline"
      EmitStatement
         Source: "emit reactionDeadlineSet(_reactionDeadline)"
        FunctionCall
           Type: tuple()
           Source: "reactionDeadlineSet(_reactionDeadline)"
          Identifier reactionDeadlineSet
             Type: function (uint256)
             Source: "reactionDeadlineSet"
          Identifier _reactionDeadline
             Type: uint256
             Source: "_reactionDeadline"
  FunctionDefinition "registerMediator" - public
     Source: "function registerMediator(\n        Architecture arch,\n        uint256 instructionPrice,\n        uint256 bandwidthPrice,\n        uint256 availabilityValue,\n        uint256 verificationCount\n    ) public {\n        address[] memory trustedDirectories;\n        uint256[] memory supportedFirstLayers;\n        mediators[msg.sender] = Mediator({\n            arch: arch,\n            instructionPrice: instructionPrice,\n            supportedFirstLayers: supportedFirstLayers,\n            bandwidthPrice: bandwidthPrice,\n            trustedDirectories: trustedDirectories,\n            availabilityValue: availabilityValue,\n            verificationCount: verificationCount\n            });\n        emit MediatorRegistered(msg.sender,\n            arch,\n            instructionPrice,\n            bandwidthPrice,\n            availabilityValue,\n            verificationCount\n        );\n    }"
    ParameterList
       Source: "(\n        Architecture arch,\n        uint256 instructionPrice,\n        uint256 bandwidthPrice,\n        uint256 availabilityValue,\n        uint256 verificationCount\n    )"
      VariableDeclaration "arch"
         Type: enum Modicum.Architecture
         Source: "Architecture arch"
        UserDefinedTypeName "Architecture"
           Source: "Architecture"
      VariableDeclaration "instructionPrice"
         Type: uint256
         Source: "uint256 instructionPrice"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "bandwidthPrice"
         Type: uint256
         Source: "uint256 bandwidthPrice"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "availabilityValue"
         Type: uint256
         Source: "uint256 availabilityValue"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "verificationCount"
         Type: uint256
         Source: "uint256 verificationCount"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: ""
    Block
       Source: "{\n        address[] memory trustedDirectories;\n        uint256[] memory supportedFirstLayers;\n        mediators[msg.sender] = Mediator({\n            arch: arch,\n            instructionPrice: instructionPrice,\n            supportedFirstLayers: supportedFirstLayers,\n            bandwidthPrice: bandwidthPrice,\n            trustedDirectories: trustedDirectories,\n            availabilityValue: availabilityValue,\n            verificationCount: verificationCount\n            });\n        emit MediatorRegistered(msg.sender,\n            arch,\n            instructionPrice,\n            bandwidthPrice,\n            availabilityValue,\n            verificationCount\n        );\n    }"
      VariableDeclarationStatement
         Source: "address[] memory trustedDirectories"
        VariableDeclaration "trustedDirectories"
           Type: address[] memory
           Source: "address[] memory trustedDirectories"
          ArrayTypeName
             Source: "address[]"
            ElementaryTypeName address
               Source: "address"
      VariableDeclarationStatement
         Source: "uint256[] memory supportedFirstLayers"
        VariableDeclaration "supportedFirstLayers"
           Type: uint256[] memory
           Source: "uint256[] memory supportedFirstLayers"
          ArrayTypeName
             Source: "uint256[]"
            ElementaryTypeName uint256
               Source: "uint256"
      ExpressionStatement
         Source: "mediators[msg.sender] = Mediator({\n            arch: arch,\n            instructionPrice: instructionPrice,\n            supportedFirstLayers: supportedFirstLayers,\n            bandwidthPrice: bandwidthPrice,\n            trustedDirectories: trustedDirectories,\n            availabilityValue: availabilityValue,\n            verificationCount: verificationCount\n            })"
        Assignment using operator =
           Type: struct Modicum.Mediator storage ref
           Source: "mediators[msg.sender] = Mediator({\n            arch: arch,\n            instructionPrice: instructionPrice,\n            supportedFirstLayers: supportedFirstLayers,\n            bandwidthPrice: bandwidthPrice,\n            trustedDirectories: trustedDirectories,\n            availabilityValue: availabilityValue,\n            verificationCount: verificationCount\n            })"
          IndexAccess
             Type: struct Modicum.Mediator storage ref
             Source: "mediators[msg.sender]"
            Identifier mediators
               Type: mapping(address => struct Modicum.Mediator storage ref)
               Source: "mediators"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
          FunctionCall
             Type: struct Modicum.Mediator memory
             Source: "Mediator({\n            arch: arch,\n            instructionPrice: instructionPrice,\n            supportedFirstLayers: supportedFirstLayers,\n            bandwidthPrice: bandwidthPrice,\n            trustedDirectories: trustedDirectories,\n            availabilityValue: availabilityValue,\n            verificationCount: verificationCount\n            })"
            Identifier Mediator
               Type: type(struct Modicum.Mediator storage pointer)
               Source: "Mediator"
            Identifier arch
               Type: enum Modicum.Architecture
               Source: "arch"
            Identifier instructionPrice
               Type: uint256
               Source: "instructionPrice"
            Identifier supportedFirstLayers
               Type: uint256[] memory
               Source: "supportedFirstLayers"
            Identifier bandwidthPrice
               Type: uint256
               Source: "bandwidthPrice"
            Identifier trustedDirectories
               Type: address[] memory
               Source: "trustedDirectories"
            Identifier availabilityValue
               Type: uint256
               Source: "availabilityValue"
            Identifier verificationCount
               Type: uint256
               Source: "verificationCount"
      EmitStatement
         Source: "emit MediatorRegistered(msg.sender,\n            arch,\n            instructionPrice,\n            bandwidthPrice,\n            availabilityValue,\n            verificationCount\n        )"
        FunctionCall
           Type: tuple()
           Source: "MediatorRegistered(msg.sender,\n            arch,\n            instructionPrice,\n            bandwidthPrice,\n            availabilityValue,\n            verificationCount\n        )"
          Identifier MediatorRegistered
             Type: function (address,enum Modicum.Architecture,uint256,uint256,uint256,uint256)
             Source: "MediatorRegistered"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          Identifier arch
             Type: enum Modicum.Architecture
             Source: "arch"
          Identifier instructionPrice
             Type: uint256
             Source: "instructionPrice"
          Identifier bandwidthPrice
             Type: uint256
             Source: "bandwidthPrice"
          Identifier availabilityValue
             Type: uint256
             Source: "availabilityValue"
          Identifier verificationCount
             Type: uint256
             Source: "verificationCount"
  FunctionDefinition "mediatorAddTrustedDirectory" - public
     Source: "function mediatorAddTrustedDirectory(address directory) public {\n        mediators[msg.sender].trustedDirectories.push(directory);\n        emit MediatorAddedTrustedDirectory(msg.sender, directory);\n    }"
    ParameterList
       Source: "(address directory)"
      VariableDeclaration "directory"
         Type: address
         Source: "address directory"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: ""
    Block
       Source: "{\n        mediators[msg.sender].trustedDirectories.push(directory);\n        emit MediatorAddedTrustedDirectory(msg.sender, directory);\n    }"
      ExpressionStatement
         Source: "mediators[msg.sender].trustedDirectories.push(directory)"
        FunctionCall
           Type: uint256
           Source: "mediators[msg.sender].trustedDirectories.push(directory)"
          MemberAccess to member push
             Type: function (address) returns (uint256)
             Source: "mediators[msg.sender].trustedDirectories.push"
            MemberAccess to member trustedDirectories
               Type: address[] storage ref
               Source: "mediators[msg.sender].trustedDirectories"
              IndexAccess
                 Type: struct Modicum.Mediator storage ref
                 Source: "mediators[msg.sender]"
                Identifier mediators
                   Type: mapping(address => struct Modicum.Mediator storage ref)
                   Source: "mediators"
                MemberAccess to member sender
                   Type: address
                   Source: "msg.sender"
                  Identifier msg
                     Type: msg
                     Source: "msg"
          Identifier directory
             Type: address
             Source: "directory"
      EmitStatement
         Source: "emit MediatorAddedTrustedDirectory(msg.sender, directory)"
        FunctionCall
           Type: tuple()
           Source: "MediatorAddedTrustedDirectory(msg.sender, directory)"
          Identifier MediatorAddedTrustedDirectory
             Type: function (address,address)
             Source: "MediatorAddedTrustedDirectory"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          Identifier directory
             Type: address
             Source: "directory"
  FunctionDefinition "mediatorAddSupportedFirstLayer" - public
     Source: "function mediatorAddSupportedFirstLayer(uint256 firstLayerHash) public {\n        mediators[msg.sender].supportedFirstLayers.push(firstLayerHash);\n        emit MediatorAddedSupportedFirstLayer(msg.sender, firstLayerHash);\n    }"
    ParameterList
       Source: "(uint256 firstLayerHash)"
      VariableDeclaration "firstLayerHash"
         Type: uint256
         Source: "uint256 firstLayerHash"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: ""
    Block
       Source: "{\n        mediators[msg.sender].supportedFirstLayers.push(firstLayerHash);\n        emit MediatorAddedSupportedFirstLayer(msg.sender, firstLayerHash);\n    }"
      ExpressionStatement
         Source: "mediators[msg.sender].supportedFirstLayers.push(firstLayerHash)"
        FunctionCall
           Type: uint256
           Source: "mediators[msg.sender].supportedFirstLayers.push(firstLayerHash)"
          MemberAccess to member push
             Type: function (uint256) returns (uint256)
             Source: "mediators[msg.sender].supportedFirstLayers.push"
            MemberAccess to member supportedFirstLayers
               Type: uint256[] storage ref
               Source: "mediators[msg.sender].supportedFirstLayers"
              IndexAccess
                 Type: struct Modicum.Mediator storage ref
                 Source: "mediators[msg.sender]"
                Identifier mediators
                   Type: mapping(address => struct Modicum.Mediator storage ref)
                   Source: "mediators"
                MemberAccess to member sender
                   Type: address
                   Source: "msg.sender"
                  Identifier msg
                     Type: msg
                     Source: "msg"
          Identifier firstLayerHash
             Type: uint256
             Source: "firstLayerHash"
      EmitStatement
         Source: "emit MediatorAddedSupportedFirstLayer(msg.sender, firstLayerHash)"
        FunctionCall
           Type: tuple()
           Source: "MediatorAddedSupportedFirstLayer(msg.sender, firstLayerHash)"
          Identifier MediatorAddedSupportedFirstLayer
             Type: function (address,uint256)
             Source: "MediatorAddedSupportedFirstLayer"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          Identifier firstLayerHash
             Type: uint256
             Source: "firstLayerHash"
  FunctionDefinition "registerResourceProvider" - public
     Source: "function registerResourceProvider(\n        Architecture arch,\n        uint256 timePerInstruction\n    ) public {\n        address[] memory trustedMediators;\n        address[] memory trustedDirectories;\n        uint256[] memory supportedFirstLayers;\n        resourceProviders[msg.sender] = ResourceProvider({\n            trustedMediators: trustedMediators,\n            supportedFirstLayers: supportedFirstLayers,\n            arch: arch,\n            timePerInstruction: timePerInstruction,\n            trustedDirectories: trustedDirectories\n        });\n        emit ResourceProviderRegistered(msg.sender,\n            arch,\n            timePerInstruction,\n            penaltyRate\n        );\n    }"
    ParameterList
       Source: "(\n        Architecture arch,\n        uint256 timePerInstruction\n    )"
      VariableDeclaration "arch"
         Type: enum Modicum.Architecture
         Source: "Architecture arch"
        UserDefinedTypeName "Architecture"
           Source: "Architecture"
      VariableDeclaration "timePerInstruction"
         Type: uint256
         Source: "uint256 timePerInstruction"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: ""
    Block
       Source: "{\n        address[] memory trustedMediators;\n        address[] memory trustedDirectories;\n        uint256[] memory supportedFirstLayers;\n        resourceProviders[msg.sender] = ResourceProvider({\n            trustedMediators: trustedMediators,\n            supportedFirstLayers: supportedFirstLayers,\n            arch: arch,\n            timePerInstruction: timePerInstruction,\n            trustedDirectories: trustedDirectories\n        });\n        emit ResourceProviderRegistered(msg.sender,\n            arch,\n            timePerInstruction,\n            penaltyRate\n        );\n    }"
      VariableDeclarationStatement
         Source: "address[] memory trustedMediators"
        VariableDeclaration "trustedMediators"
           Type: address[] memory
           Source: "address[] memory trustedMediators"
          ArrayTypeName
             Source: "address[]"
            ElementaryTypeName address
               Source: "address"
      VariableDeclarationStatement
         Source: "address[] memory trustedDirectories"
        VariableDeclaration "trustedDirectories"
           Type: address[] memory
           Source: "address[] memory trustedDirectories"
          ArrayTypeName
             Source: "address[]"
            ElementaryTypeName address
               Source: "address"
      VariableDeclarationStatement
         Source: "uint256[] memory supportedFirstLayers"
        VariableDeclaration "supportedFirstLayers"
           Type: uint256[] memory
           Source: "uint256[] memory supportedFirstLayers"
          ArrayTypeName
             Source: "uint256[]"
            ElementaryTypeName uint256
               Source: "uint256"
      ExpressionStatement
         Source: "resourceProviders[msg.sender] = ResourceProvider({\n            trustedMediators: trustedMediators,\n            supportedFirstLayers: supportedFirstLayers,\n            arch: arch,\n            timePerInstruction: timePerInstruction,\n            trustedDirectories: trustedDirectories\n        })"
        Assignment using operator =
           Type: struct Modicum.ResourceProvider storage ref
           Source: "resourceProviders[msg.sender] = ResourceProvider({\n            trustedMediators: trustedMediators,\n            supportedFirstLayers: supportedFirstLayers,\n            arch: arch,\n            timePerInstruction: timePerInstruction,\n            trustedDirectories: trustedDirectories\n        })"
          IndexAccess
             Type: struct Modicum.ResourceProvider storage ref
             Source: "resourceProviders[msg.sender]"
            Identifier resourceProviders
               Type: mapping(address => struct Modicum.ResourceProvider storage ref)
               Source: "resourceProviders"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
          FunctionCall
             Type: struct Modicum.ResourceProvider memory
             Source: "ResourceProvider({\n            trustedMediators: trustedMediators,\n            supportedFirstLayers: supportedFirstLayers,\n            arch: arch,\n            timePerInstruction: timePerInstruction,\n            trustedDirectories: trustedDirectories\n        })"
            Identifier ResourceProvider
               Type: type(struct Modicum.ResourceProvider storage pointer)
               Source: "ResourceProvider"
            Identifier trustedMediators
               Type: address[] memory
               Source: "trustedMediators"
            Identifier supportedFirstLayers
               Type: uint256[] memory
               Source: "supportedFirstLayers"
            Identifier arch
               Type: enum Modicum.Architecture
               Source: "arch"
            Identifier timePerInstruction
               Type: uint256
               Source: "timePerInstruction"
            Identifier trustedDirectories
               Type: address[] memory
               Source: "trustedDirectories"
      EmitStatement
         Source: "emit ResourceProviderRegistered(msg.sender,\n            arch,\n            timePerInstruction,\n            penaltyRate\n        )"
        FunctionCall
           Type: tuple()
           Source: "ResourceProviderRegistered(msg.sender,\n            arch,\n            timePerInstruction,\n            penaltyRate\n        )"
          Identifier ResourceProviderRegistered
             Type: function (address,enum Modicum.Architecture,uint256,uint256)
             Source: "ResourceProviderRegistered"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          Identifier arch
             Type: enum Modicum.Architecture
             Source: "arch"
          Identifier timePerInstruction
             Type: uint256
             Source: "timePerInstruction"
          Identifier penaltyRate
             Type: uint256
             Source: "penaltyRate"
  FunctionDefinition "resourceProviderAddTrustedMediator" - public
     Source: "function resourceProviderAddTrustedMediator(address mediator) public {\n        resourceProviders[msg.sender].trustedMediators.push(mediator);\n        emit ResourceProviderAddedTrustedMediator(msg.sender, mediator);\n    }"
    ParameterList
       Source: "(address mediator)"
      VariableDeclaration "mediator"
         Type: address
         Source: "address mediator"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: ""
    Block
       Source: "{\n        resourceProviders[msg.sender].trustedMediators.push(mediator);\n        emit ResourceProviderAddedTrustedMediator(msg.sender, mediator);\n    }"
      ExpressionStatement
         Source: "resourceProviders[msg.sender].trustedMediators.push(mediator)"
        FunctionCall
           Type: uint256
           Source: "resourceProviders[msg.sender].trustedMediators.push(mediator)"
          MemberAccess to member push
             Type: function (address) returns (uint256)
             Source: "resourceProviders[msg.sender].trustedMediators.push"
            MemberAccess to member trustedMediators
               Type: address[] storage ref
               Source: "resourceProviders[msg.sender].trustedMediators"
              IndexAccess
                 Type: struct Modicum.ResourceProvider storage ref
                 Source: "resourceProviders[msg.sender]"
                Identifier resourceProviders
                   Type: mapping(address => struct Modicum.ResourceProvider storage ref)
                   Source: "resourceProviders"
                MemberAccess to member sender
                   Type: address
                   Source: "msg.sender"
                  Identifier msg
                     Type: msg
                     Source: "msg"
          Identifier mediator
             Type: address
             Source: "mediator"
      EmitStatement
         Source: "emit ResourceProviderAddedTrustedMediator(msg.sender, mediator)"
        FunctionCall
           Type: tuple()
           Source: "ResourceProviderAddedTrustedMediator(msg.sender, mediator)"
          Identifier ResourceProviderAddedTrustedMediator
             Type: function (address,address)
             Source: "ResourceProviderAddedTrustedMediator"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          Identifier mediator
             Type: address
             Source: "mediator"
  FunctionDefinition "resourceProviderAddTrustedDirectory" - public
     Source: "function resourceProviderAddTrustedDirectory(address directory) public {\n        resourceProviders[msg.sender].trustedDirectories.push(directory);\n        emit ResourceProviderAddedTrustedDirectory(msg.sender, directory);\n    }"
    ParameterList
       Source: "(address directory)"
      VariableDeclaration "directory"
         Type: address
         Source: "address directory"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: ""
    Block
       Source: "{\n        resourceProviders[msg.sender].trustedDirectories.push(directory);\n        emit ResourceProviderAddedTrustedDirectory(msg.sender, directory);\n    }"
      ExpressionStatement
         Source: "resourceProviders[msg.sender].trustedDirectories.push(directory)"
        FunctionCall
           Type: uint256
           Source: "resourceProviders[msg.sender].trustedDirectories.push(directory)"
          MemberAccess to member push
             Type: function (address) returns (uint256)
             Source: "resourceProviders[msg.sender].trustedDirectories.push"
            MemberAccess to member trustedDirectories
               Type: address[] storage ref
               Source: "resourceProviders[msg.sender].trustedDirectories"
              IndexAccess
                 Type: struct Modicum.ResourceProvider storage ref
                 Source: "resourceProviders[msg.sender]"
                Identifier resourceProviders
                   Type: mapping(address => struct Modicum.ResourceProvider storage ref)
                   Source: "resourceProviders"
                MemberAccess to member sender
                   Type: address
                   Source: "msg.sender"
                  Identifier msg
                     Type: msg
                     Source: "msg"
          Identifier directory
             Type: address
             Source: "directory"
      EmitStatement
         Source: "emit ResourceProviderAddedTrustedDirectory(msg.sender, directory)"
        FunctionCall
           Type: tuple()
           Source: "ResourceProviderAddedTrustedDirectory(msg.sender, directory)"
          Identifier ResourceProviderAddedTrustedDirectory
             Type: function (address,address)
             Source: "ResourceProviderAddedTrustedDirectory"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          Identifier directory
             Type: address
             Source: "directory"
  FunctionDefinition "resourceProviderAddSupportedFirstLayer" - public
     Source: "function resourceProviderAddSupportedFirstLayer(uint256 firstLayerHash) public {\n        resourceProviders[msg.sender].supportedFirstLayers.push(firstLayerHash);\n        emit ResourceProviderAddedSupportedFirstLayer(msg.sender, firstLayerHash);\n    }"
    ParameterList
       Source: "(uint256 firstLayerHash)"
      VariableDeclaration "firstLayerHash"
         Type: uint256
         Source: "uint256 firstLayerHash"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: ""
    Block
       Source: "{\n        resourceProviders[msg.sender].supportedFirstLayers.push(firstLayerHash);\n        emit ResourceProviderAddedSupportedFirstLayer(msg.sender, firstLayerHash);\n    }"
      ExpressionStatement
         Source: "resourceProviders[msg.sender].supportedFirstLayers.push(firstLayerHash)"
        FunctionCall
           Type: uint256
           Source: "resourceProviders[msg.sender].supportedFirstLayers.push(firstLayerHash)"
          MemberAccess to member push
             Type: function (uint256) returns (uint256)
             Source: "resourceProviders[msg.sender].supportedFirstLayers.push"
            MemberAccess to member supportedFirstLayers
               Type: uint256[] storage ref
               Source: "resourceProviders[msg.sender].supportedFirstLayers"
              IndexAccess
                 Type: struct Modicum.ResourceProvider storage ref
                 Source: "resourceProviders[msg.sender]"
                Identifier resourceProviders
                   Type: mapping(address => struct Modicum.ResourceProvider storage ref)
                   Source: "resourceProviders"
                MemberAccess to member sender
                   Type: address
                   Source: "msg.sender"
                  Identifier msg
                     Type: msg
                     Source: "msg"
          Identifier firstLayerHash
             Type: uint256
             Source: "firstLayerHash"
      EmitStatement
         Source: "emit ResourceProviderAddedSupportedFirstLayer(msg.sender, firstLayerHash)"
        FunctionCall
           Type: tuple()
           Source: "ResourceProviderAddedSupportedFirstLayer(msg.sender, firstLayerHash)"
          Identifier ResourceProviderAddedSupportedFirstLayer
             Type: function (address,uint256)
             Source: "ResourceProviderAddedSupportedFirstLayer"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          Identifier firstLayerHash
             Type: uint256
             Source: "firstLayerHash"
  FunctionDefinition "registerJobCreator" - public
     Source: "function registerJobCreator(\n    ) public {\n        address[] memory trustedMediators;\n        jobCreators[msg.sender] = JobCreator({\n            trustedMediators: trustedMediators,\n            itShouldntBeHere: 0\n        });\n        emit JobCreatorRegistered(msg.sender, penaltyRate);\n    }"
    ParameterList
       Source: "(\n    )"
    ParameterList
       Source: ""
    Block
       Source: "{\n        address[] memory trustedMediators;\n        jobCreators[msg.sender] = JobCreator({\n            trustedMediators: trustedMediators,\n            itShouldntBeHere: 0\n        });\n        emit JobCreatorRegistered(msg.sender, penaltyRate);\n    }"
      VariableDeclarationStatement
         Source: "address[] memory trustedMediators"
        VariableDeclaration "trustedMediators"
           Type: address[] memory
           Source: "address[] memory trustedMediators"
          ArrayTypeName
             Source: "address[]"
            ElementaryTypeName address
               Source: "address"
      ExpressionStatement
         Source: "jobCreators[msg.sender] = JobCreator({\n            trustedMediators: trustedMediators,\n            itShouldntBeHere: 0\n        })"
        Assignment using operator =
           Type: struct Modicum.JobCreator storage ref
           Source: "jobCreators[msg.sender] = JobCreator({\n            trustedMediators: trustedMediators,\n            itShouldntBeHere: 0\n        })"
          IndexAccess
             Type: struct Modicum.JobCreator storage ref
             Source: "jobCreators[msg.sender]"
            Identifier jobCreators
               Type: mapping(address => struct Modicum.JobCreator storage ref)
               Source: "jobCreators"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
          FunctionCall
             Type: struct Modicum.JobCreator memory
             Source: "JobCreator({\n            trustedMediators: trustedMediators,\n            itShouldntBeHere: 0\n        })"
            Identifier JobCreator
               Type: type(struct Modicum.JobCreator storage pointer)
               Source: "JobCreator"
            Identifier trustedMediators
               Type: address[] memory
               Source: "trustedMediators"
            Literal, token: [no token] value: 0
               Type: int_const 0
               Source: "0"
      EmitStatement
         Source: "emit JobCreatorRegistered(msg.sender, penaltyRate)"
        FunctionCall
           Type: tuple()
           Source: "JobCreatorRegistered(msg.sender, penaltyRate)"
          Identifier JobCreatorRegistered
             Type: function (address,uint256)
             Source: "JobCreatorRegistered"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          Identifier penaltyRate
             Type: uint256
             Source: "penaltyRate"
  FunctionDefinition "jobCreatorAddTrustedMediator" - public
     Source: "function jobCreatorAddTrustedMediator(address mediator) public {\n        jobCreators[msg.sender].trustedMediators.push(mediator);\n        emit JobCreatorAddedTrustedMediator(msg.sender, mediator);\n    }"
    ParameterList
       Source: "(address mediator)"
      VariableDeclaration "mediator"
         Type: address
         Source: "address mediator"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: ""
    Block
       Source: "{\n        jobCreators[msg.sender].trustedMediators.push(mediator);\n        emit JobCreatorAddedTrustedMediator(msg.sender, mediator);\n    }"
      ExpressionStatement
         Source: "jobCreators[msg.sender].trustedMediators.push(mediator)"
        FunctionCall
           Type: uint256
           Source: "jobCreators[msg.sender].trustedMediators.push(mediator)"
          MemberAccess to member push
             Type: function (address) returns (uint256)
             Source: "jobCreators[msg.sender].trustedMediators.push"
            MemberAccess to member trustedMediators
               Type: address[] storage ref
               Source: "jobCreators[msg.sender].trustedMediators"
              IndexAccess
                 Type: struct Modicum.JobCreator storage ref
                 Source: "jobCreators[msg.sender]"
                Identifier jobCreators
                   Type: mapping(address => struct Modicum.JobCreator storage ref)
                   Source: "jobCreators"
                MemberAccess to member sender
                   Type: address
                   Source: "msg.sender"
                  Identifier msg
                     Type: msg
                     Source: "msg"
          Identifier mediator
             Type: address
             Source: "mediator"
      EmitStatement
         Source: "emit JobCreatorAddedTrustedMediator(msg.sender, mediator)"
        FunctionCall
           Type: tuple()
           Source: "JobCreatorAddedTrustedMediator(msg.sender, mediator)"
          Identifier JobCreatorAddedTrustedMediator
             Type: function (address,address)
             Source: "JobCreatorAddedTrustedMediator"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          Identifier mediator
             Type: address
             Source: "mediator"
  FunctionDefinition "postResOffer" - public
     Source: "function postResOffer(\n        uint256 instructionPrice,\n        uint256 instructionCap,\n\n        uint256 memoryCap,\n        uint256 localStorageCap,\n\n        uint256 bandwidthCap,\n        uint256 bandwidthPrice,\n\n        uint256 matchIncentive,\n\n        uint256 verificationCount,\n\n        uint256 misc\n    ) public payable {\n        // require(resourceProviders[msg.sender].trustedMediators.length != 0,\n        //     \"You are not registered as a ResourceProvider\");\n\n        if (resourceProviders[msg.sender].trustedMediators.length == 0){\n            emit DebugString(\"trustedMediators==0\");\n        }\n\n        uint256 depositValue = (instructionPrice * instructionCap +\n            bandwidthCap * bandwidthPrice) * penaltyRate;\n\n        if (msg.value <= depositValue){\n            emit DebugString(\"msg.value <= depositValue\");\n            emit DebugUint(msg.value);\n            emit DebugUint(depositValue);\n        }\n\n        // require(msg.value >= depositValue,\n        //    \"You need to deposit more money to offer this resource\");\n\n        uint256 index = resourceOffers.push(ResourceOffer({\n            resProvider: msg.sender,\n            instructionPrice: instructionPrice,\n            instructionCap: instructionCap,\n            memoryCap: memoryCap,\n            localStorageCap: localStorageCap,\n            bandwidthCap: bandwidthCap,\n            bandwidthPrice: bandwidthPrice,\n            depositValue: msg.value,\n            matchIncentive: matchIncentive,\n            verificationCount: verificationCount\n            })) - 1;\n\n        uint256 iroid = misc;\n        emit ResourceOfferPosted(index,\n\n            msg.sender,\n\n            instructionPrice,\n            instructionCap,\n\n            memoryCap,\n            localStorageCap,\n\n            bandwidthCap,\n            bandwidthPrice,\n\n            msg.value,\n\n            iroid\n        );\n\n        emit EtherTransferred(msg.sender, address(this), msg.value, EtherTransferCause.PostResourceOffer);\n    }"
    ParameterList
       Source: "(\n        uint256 instructionPrice,\n        uint256 instructionCap,\n\n        uint256 memoryCap,\n        uint256 localStorageCap,\n\n        uint256 bandwidthCap,\n        uint256 bandwidthPrice,\n\n        uint256 matchIncentive,\n\n        uint256 verificationCount,\n\n        uint256 misc\n    )"
      VariableDeclaration "instructionPrice"
         Type: uint256
         Source: "uint256 instructionPrice"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "instructionCap"
         Type: uint256
         Source: "uint256 instructionCap"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "memoryCap"
         Type: uint256
         Source: "uint256 memoryCap"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "localStorageCap"
         Type: uint256
         Source: "uint256 localStorageCap"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "bandwidthCap"
         Type: uint256
         Source: "uint256 bandwidthCap"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "bandwidthPrice"
         Type: uint256
         Source: "uint256 bandwidthPrice"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "matchIncentive"
         Type: uint256
         Source: "uint256 matchIncentive"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "verificationCount"
         Type: uint256
         Source: "uint256 verificationCount"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "misc"
         Type: uint256
         Source: "uint256 misc"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: ""
    Block
       Source: "{\n        // require(resourceProviders[msg.sender].trustedMediators.length != 0,\n        //     \"You are not registered as a ResourceProvider\");\n\n        if (resourceProviders[msg.sender].trustedMediators.length == 0){\n            emit DebugString(\"trustedMediators==0\");\n        }\n\n        uint256 depositValue = (instructionPrice * instructionCap +\n            bandwidthCap * bandwidthPrice) * penaltyRate;\n\n        if (msg.value <= depositValue){\n            emit DebugString(\"msg.value <= depositValue\");\n            emit DebugUint(msg.value);\n            emit DebugUint(depositValue);\n        }\n\n        // require(msg.value >= depositValue,\n        //    \"You need to deposit more money to offer this resource\");\n\n        uint256 index = resourceOffers.push(ResourceOffer({\n            resProvider: msg.sender,\n            instructionPrice: instructionPrice,\n            instructionCap: instructionCap,\n            memoryCap: memoryCap,\n            localStorageCap: localStorageCap,\n            bandwidthCap: bandwidthCap,\n            bandwidthPrice: bandwidthPrice,\n            depositValue: msg.value,\n            matchIncentive: matchIncentive,\n            verificationCount: verificationCount\n            })) - 1;\n\n        uint256 iroid = misc;\n        emit ResourceOfferPosted(index,\n\n            msg.sender,\n\n            instructionPrice,\n            instructionCap,\n\n            memoryCap,\n            localStorageCap,\n\n            bandwidthCap,\n            bandwidthPrice,\n\n            msg.value,\n\n            iroid\n        );\n\n        emit EtherTransferred(msg.sender, address(this), msg.value, EtherTransferCause.PostResourceOffer);\n    }"
      IfStatement
         Source: "if (resourceProviders[msg.sender].trustedMediators.length == 0){\n            emit DebugString(\"trustedMediators==0\");\n        }"
        BinaryOperation using operator ==
           Type: bool
           Source: "resourceProviders[msg.sender].trustedMediators.length == 0"
          MemberAccess to member length
             Type: uint256
             Source: "resourceProviders[msg.sender].trustedMediators.length"
            MemberAccess to member trustedMediators
               Type: address[] storage ref
               Source: "resourceProviders[msg.sender].trustedMediators"
              IndexAccess
                 Type: struct Modicum.ResourceProvider storage ref
                 Source: "resourceProviders[msg.sender]"
                Identifier resourceProviders
                   Type: mapping(address => struct Modicum.ResourceProvider storage ref)
                   Source: "resourceProviders"
                MemberAccess to member sender
                   Type: address
                   Source: "msg.sender"
                  Identifier msg
                     Type: msg
                     Source: "msg"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
        Block
           Source: "{\n            emit DebugString(\"trustedMediators==0\");\n        }"
          EmitStatement
             Source: "emit DebugString(\"trustedMediators==0\")"
            FunctionCall
               Type: tuple()
               Source: "DebugString(\"trustedMediators==0\")"
              Identifier DebugString
                 Type: function (bytes32)
                 Source: "DebugString"
              Literal, token: [no token] value: trustedMediators==0
                 Type: literal_string "trustedMediators==0"
                 Source: "\"trustedMediators==0\""
      VariableDeclarationStatement
         Source: "uint256 depositValue = (instructionPrice * instructionCap +\n            bandwidthCap * bandwidthPrice) * penaltyRate"
        VariableDeclaration "depositValue"
           Type: uint256
           Source: "uint256 depositValue"
          ElementaryTypeName uint256
             Source: "uint256"
        BinaryOperation using operator *
           Type: uint256
           Source: "(instructionPrice * instructionCap +\n            bandwidthCap * bandwidthPrice) * penaltyRate"
          TupleExpression
             Type: uint256
             Source: "(instructionPrice * instructionCap +\n            bandwidthCap * bandwidthPrice)"
            BinaryOperation using operator +
               Type: uint256
               Source: "instructionPrice * instructionCap +\n            bandwidthCap * bandwidthPrice"
              BinaryOperation using operator *
                 Type: uint256
                 Source: "instructionPrice * instructionCap"
                Identifier instructionPrice
                   Type: uint256
                   Source: "instructionPrice"
                Identifier instructionCap
                   Type: uint256
                   Source: "instructionCap"
              BinaryOperation using operator *
                 Type: uint256
                 Source: "bandwidthCap * bandwidthPrice"
                Identifier bandwidthCap
                   Type: uint256
                   Source: "bandwidthCap"
                Identifier bandwidthPrice
                   Type: uint256
                   Source: "bandwidthPrice"
          Identifier penaltyRate
             Type: uint256
             Source: "penaltyRate"
      IfStatement
         Source: "if (msg.value <= depositValue){\n            emit DebugString(\"msg.value <= depositValue\");\n            emit DebugUint(msg.value);\n            emit DebugUint(depositValue);\n        }"
        BinaryOperation using operator <=
           Type: bool
           Source: "msg.value <= depositValue"
          MemberAccess to member value
             Type: uint256
             Source: "msg.value"
            Identifier msg
               Type: msg
               Source: "msg"
          Identifier depositValue
             Type: uint256
             Source: "depositValue"
        Block
           Source: "{\n            emit DebugString(\"msg.value <= depositValue\");\n            emit DebugUint(msg.value);\n            emit DebugUint(depositValue);\n        }"
          EmitStatement
             Source: "emit DebugString(\"msg.value <= depositValue\")"
            FunctionCall
               Type: tuple()
               Source: "DebugString(\"msg.value <= depositValue\")"
              Identifier DebugString
                 Type: function (bytes32)
                 Source: "DebugString"
              Literal, token: [no token] value: msg.value <= depositValue
                 Type: literal_string "msg.value <= depositValue"
                 Source: "\"msg.value <= depositValue\""
          EmitStatement
             Source: "emit DebugUint(msg.value)"
            FunctionCall
               Type: tuple()
               Source: "DebugUint(msg.value)"
              Identifier DebugUint
                 Type: function (uint256)
                 Source: "DebugUint"
              MemberAccess to member value
                 Type: uint256
                 Source: "msg.value"
                Identifier msg
                   Type: msg
                   Source: "msg"
          EmitStatement
             Source: "emit DebugUint(depositValue)"
            FunctionCall
               Type: tuple()
               Source: "DebugUint(depositValue)"
              Identifier DebugUint
                 Type: function (uint256)
                 Source: "DebugUint"
              Identifier depositValue
                 Type: uint256
                 Source: "depositValue"
      VariableDeclarationStatement
         Source: "uint256 index = resourceOffers.push(ResourceOffer({\n            resProvider: msg.sender,\n            instructionPrice: instructionPrice,\n            instructionCap: instructionCap,\n            memoryCap: memoryCap,\n            localStorageCap: localStorageCap,\n            bandwidthCap: bandwidthCap,\n            bandwidthPrice: bandwidthPrice,\n            depositValue: msg.value,\n            matchIncentive: matchIncentive,\n            verificationCount: verificationCount\n            })) - 1"
        VariableDeclaration "index"
           Type: uint256
           Source: "uint256 index"
          ElementaryTypeName uint256
             Source: "uint256"
        BinaryOperation using operator -
           Type: uint256
           Source: "resourceOffers.push(ResourceOffer({\n            resProvider: msg.sender,\n            instructionPrice: instructionPrice,\n            instructionCap: instructionCap,\n            memoryCap: memoryCap,\n            localStorageCap: localStorageCap,\n            bandwidthCap: bandwidthCap,\n            bandwidthPrice: bandwidthPrice,\n            depositValue: msg.value,\n            matchIncentive: matchIncentive,\n            verificationCount: verificationCount\n            })) - 1"
          FunctionCall
             Type: uint256
             Source: "resourceOffers.push(ResourceOffer({\n            resProvider: msg.sender,\n            instructionPrice: instructionPrice,\n            instructionCap: instructionCap,\n            memoryCap: memoryCap,\n            localStorageCap: localStorageCap,\n            bandwidthCap: bandwidthCap,\n            bandwidthPrice: bandwidthPrice,\n            depositValue: msg.value,\n            matchIncentive: matchIncentive,\n            verificationCount: verificationCount\n            }))"
            MemberAccess to member push
               Type: function (struct Modicum.ResourceOffer storage ref) returns (uint256)
               Source: "resourceOffers.push"
              Identifier resourceOffers
                 Type: struct Modicum.ResourceOffer storage ref[] storage ref
                 Source: "resourceOffers"
            FunctionCall
               Type: struct Modicum.ResourceOffer memory
               Source: "ResourceOffer({\n            resProvider: msg.sender,\n            instructionPrice: instructionPrice,\n            instructionCap: instructionCap,\n            memoryCap: memoryCap,\n            localStorageCap: localStorageCap,\n            bandwidthCap: bandwidthCap,\n            bandwidthPrice: bandwidthPrice,\n            depositValue: msg.value,\n            matchIncentive: matchIncentive,\n            verificationCount: verificationCount\n            })"
              Identifier ResourceOffer
                 Type: type(struct Modicum.ResourceOffer storage pointer)
                 Source: "ResourceOffer"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
              Identifier instructionPrice
                 Type: uint256
                 Source: "instructionPrice"
              Identifier instructionCap
                 Type: uint256
                 Source: "instructionCap"
              Identifier memoryCap
                 Type: uint256
                 Source: "memoryCap"
              Identifier localStorageCap
                 Type: uint256
                 Source: "localStorageCap"
              Identifier bandwidthCap
                 Type: uint256
                 Source: "bandwidthCap"
              Identifier bandwidthPrice
                 Type: uint256
                 Source: "bandwidthPrice"
              MemberAccess to member value
                 Type: uint256
                 Source: "msg.value"
                Identifier msg
                   Type: msg
                   Source: "msg"
              Identifier matchIncentive
                 Type: uint256
                 Source: "matchIncentive"
              Identifier verificationCount
                 Type: uint256
                 Source: "verificationCount"
          Literal, token: [no token] value: 1
             Type: int_const 1
             Source: "1"
      VariableDeclarationStatement
         Source: "uint256 iroid = misc"
        VariableDeclaration "iroid"
           Type: uint256
           Source: "uint256 iroid"
          ElementaryTypeName uint256
             Source: "uint256"
        Identifier misc
           Type: uint256
           Source: "misc"
      EmitStatement
         Source: "emit ResourceOfferPosted(index,\n\n            msg.sender,\n\n            instructionPrice,\n            instructionCap,\n\n            memoryCap,\n            localStorageCap,\n\n            bandwidthCap,\n            bandwidthPrice,\n\n            msg.value,\n\n            iroid\n        )"
        FunctionCall
           Type: tuple()
           Source: "ResourceOfferPosted(index,\n\n            msg.sender,\n\n            instructionPrice,\n            instructionCap,\n\n            memoryCap,\n            localStorageCap,\n\n            bandwidthCap,\n            bandwidthPrice,\n\n            msg.value,\n\n            iroid\n        )"
          Identifier ResourceOfferPosted
             Type: function (uint256,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)
             Source: "ResourceOfferPosted"
          Identifier index
             Type: uint256
             Source: "index"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          Identifier instructionPrice
             Type: uint256
             Source: "instructionPrice"
          Identifier instructionCap
             Type: uint256
             Source: "instructionCap"
          Identifier memoryCap
             Type: uint256
             Source: "memoryCap"
          Identifier localStorageCap
             Type: uint256
             Source: "localStorageCap"
          Identifier bandwidthCap
             Type: uint256
             Source: "bandwidthCap"
          Identifier bandwidthPrice
             Type: uint256
             Source: "bandwidthPrice"
          MemberAccess to member value
             Type: uint256
             Source: "msg.value"
            Identifier msg
               Type: msg
               Source: "msg"
          Identifier iroid
             Type: uint256
             Source: "iroid"
      EmitStatement
         Source: "emit EtherTransferred(msg.sender, address(this), msg.value, EtherTransferCause.PostResourceOffer)"
        FunctionCall
           Type: tuple()
           Source: "EtherTransferred(msg.sender, address(this), msg.value, EtherTransferCause.PostResourceOffer)"
          Identifier EtherTransferred
             Type: function (address,address,uint256,enum Modicum.EtherTransferCause)
             Source: "EtherTransferred"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          FunctionCall
             Type: address
             Source: "address(this)"
            ElementaryTypeNameExpression address
               Type: type(address)
               Source: "address"
            Identifier this
               Type: contract Modicum
               Source: "this"
          MemberAccess to member value
             Type: uint256
             Source: "msg.value"
            Identifier msg
               Type: msg
               Source: "msg"
          MemberAccess to member PostResourceOffer
             Type: enum Modicum.EtherTransferCause
             Source: "EtherTransferCause.PostResourceOffer"
            Identifier EtherTransferCause
               Type: type(enum Modicum.EtherTransferCause)
               Source: "EtherTransferCause"
  FunctionDefinition "postJobOfferPartOne" - public
     Source: "function postJobOfferPartOne(\n        uint256 ijoid,\n        uint256 instructionLimit,\n        uint256 bandwidthLimit,\n        uint256 instructionMaxPrice,\n        uint256 bandwidthMaxPrice,\n        uint256 completionDeadline,\n        uint256 matchIncentive\n    ) public payable {\n        // require(jobCreators[msg.sender].trustedMediators.length != 0,\n        //    \"You are not registered as a JobCreator\");\n\n        // require(msg.value >= (instructionLimit * instructionMaxPrice +\n        //    bandwidthLimit * bandwidthMaxPrice) * penaltyRate,\n        //    \"You need to deposit more money to request this job.\");\n\n        uint256 index = findJOIndex[msg.sender][ijoid];\n        if (index == 0) {\n            index = joIndex;\n            joIndex++;\n            findJOIndex[msg.sender][ijoid] = index;\n        }\n\n        // require(jobOfferPartOnePosted[index] == false, \"You have already posted a part one for this ijoid.\");\n\n        JobOfferPartOne memory joPOne = JobOfferPartOne({\n            jobCreator: msg.sender,\n            depositValue: msg.value,\n            instructionLimit: instructionLimit,\n            bandwidthLimit: bandwidthLimit,\n            instructionMaxPrice: instructionMaxPrice,\n            bandwidthMaxPrice: bandwidthMaxPrice,\n            completionDeadline: completionDeadline,\n            matchIncentive: matchIncentive\n        });\n\n        jobOffersPartOne[index] = joPOne;\n        jobOfferPartOnePosted[index] = true;\n\n        emit JobOfferPostedPartOne(\n            index,\n            ijoid,\n            msg.sender,\n            instructionLimit,\n            bandwidthLimit,\n            instructionMaxPrice,\n            bandwidthMaxPrice,\n            completionDeadline,\n            msg.value,\n            matchIncentive\n        );\n\n        emit EtherTransferred(msg.sender, address(this), msg.value, EtherTransferCause.PostJobOffer);\n    }"
    ParameterList
       Source: "(\n        uint256 ijoid,\n        uint256 instructionLimit,\n        uint256 bandwidthLimit,\n        uint256 instructionMaxPrice,\n        uint256 bandwidthMaxPrice,\n        uint256 completionDeadline,\n        uint256 matchIncentive\n    )"
      VariableDeclaration "ijoid"
         Type: uint256
         Source: "uint256 ijoid"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "instructionLimit"
         Type: uint256
         Source: "uint256 instructionLimit"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "bandwidthLimit"
         Type: uint256
         Source: "uint256 bandwidthLimit"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "instructionMaxPrice"
         Type: uint256
         Source: "uint256 instructionMaxPrice"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "bandwidthMaxPrice"
         Type: uint256
         Source: "uint256 bandwidthMaxPrice"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "completionDeadline"
         Type: uint256
         Source: "uint256 completionDeadline"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "matchIncentive"
         Type: uint256
         Source: "uint256 matchIncentive"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: ""
    Block
       Source: "{\n        // require(jobCreators[msg.sender].trustedMediators.length != 0,\n        //    \"You are not registered as a JobCreator\");\n\n        // require(msg.value >= (instructionLimit * instructionMaxPrice +\n        //    bandwidthLimit * bandwidthMaxPrice) * penaltyRate,\n        //    \"You need to deposit more money to request this job.\");\n\n        uint256 index = findJOIndex[msg.sender][ijoid];\n        if (index == 0) {\n            index = joIndex;\n            joIndex++;\n            findJOIndex[msg.sender][ijoid] = index;\n        }\n\n        // require(jobOfferPartOnePosted[index] == false, \"You have already posted a part one for this ijoid.\");\n\n        JobOfferPartOne memory joPOne = JobOfferPartOne({\n            jobCreator: msg.sender,\n            depositValue: msg.value,\n            instructionLimit: instructionLimit,\n            bandwidthLimit: bandwidthLimit,\n            instructionMaxPrice: instructionMaxPrice,\n            bandwidthMaxPrice: bandwidthMaxPrice,\n            completionDeadline: completionDeadline,\n            matchIncentive: matchIncentive\n        });\n\n        jobOffersPartOne[index] = joPOne;\n        jobOfferPartOnePosted[index] = true;\n\n        emit JobOfferPostedPartOne(\n            index,\n            ijoid,\n            msg.sender,\n            instructionLimit,\n            bandwidthLimit,\n            instructionMaxPrice,\n            bandwidthMaxPrice,\n            completionDeadline,\n            msg.value,\n            matchIncentive\n        );\n\n        emit EtherTransferred(msg.sender, address(this), msg.value, EtherTransferCause.PostJobOffer);\n    }"
      VariableDeclarationStatement
         Source: "uint256 index = findJOIndex[msg.sender][ijoid]"
        VariableDeclaration "index"
           Type: uint256
           Source: "uint256 index"
          ElementaryTypeName uint256
             Source: "uint256"
        IndexAccess
           Type: uint256
           Source: "findJOIndex[msg.sender][ijoid]"
          IndexAccess
             Type: mapping(uint256 => uint256)
             Source: "findJOIndex[msg.sender]"
            Identifier findJOIndex
               Type: mapping(address => mapping(uint256 => uint256))
               Source: "findJOIndex"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
          Identifier ijoid
             Type: uint256
             Source: "ijoid"
      IfStatement
         Source: "if (index == 0) {\n            index = joIndex;\n            joIndex++;\n            findJOIndex[msg.sender][ijoid] = index;\n        }"
        BinaryOperation using operator ==
           Type: bool
           Source: "index == 0"
          Identifier index
             Type: uint256
             Source: "index"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
        Block
           Source: "{\n            index = joIndex;\n            joIndex++;\n            findJOIndex[msg.sender][ijoid] = index;\n        }"
          ExpressionStatement
             Source: "index = joIndex"
            Assignment using operator =
               Type: uint256
               Source: "index = joIndex"
              Identifier index
                 Type: uint256
                 Source: "index"
              Identifier joIndex
                 Type: uint256
                 Source: "joIndex"
          ExpressionStatement
             Source: "joIndex++"
            UnaryOperation (postfix) ++
               Type: uint256
               Source: "joIndex++"
              Identifier joIndex
                 Type: uint256
                 Source: "joIndex"
          ExpressionStatement
             Source: "findJOIndex[msg.sender][ijoid] = index"
            Assignment using operator =
               Type: uint256
               Source: "findJOIndex[msg.sender][ijoid] = index"
              IndexAccess
                 Type: uint256
                 Source: "findJOIndex[msg.sender][ijoid]"
                IndexAccess
                   Type: mapping(uint256 => uint256)
                   Source: "findJOIndex[msg.sender]"
                  Identifier findJOIndex
                     Type: mapping(address => mapping(uint256 => uint256))
                     Source: "findJOIndex"
                  MemberAccess to member sender
                     Type: address
                     Source: "msg.sender"
                    Identifier msg
                       Type: msg
                       Source: "msg"
                Identifier ijoid
                   Type: uint256
                   Source: "ijoid"
              Identifier index
                 Type: uint256
                 Source: "index"
      VariableDeclarationStatement
         Source: "JobOfferPartOne memory joPOne = JobOfferPartOne({\n            jobCreator: msg.sender,\n            depositValue: msg.value,\n            instructionLimit: instructionLimit,\n            bandwidthLimit: bandwidthLimit,\n            instructionMaxPrice: instructionMaxPrice,\n            bandwidthMaxPrice: bandwidthMaxPrice,\n            completionDeadline: completionDeadline,\n            matchIncentive: matchIncentive\n        })"
        VariableDeclaration "joPOne"
           Type: struct Modicum.JobOfferPartOne memory
           Source: "JobOfferPartOne memory joPOne"
          UserDefinedTypeName "JobOfferPartOne"
             Source: "JobOfferPartOne"
        FunctionCall
           Type: struct Modicum.JobOfferPartOne memory
           Source: "JobOfferPartOne({\n            jobCreator: msg.sender,\n            depositValue: msg.value,\n            instructionLimit: instructionLimit,\n            bandwidthLimit: bandwidthLimit,\n            instructionMaxPrice: instructionMaxPrice,\n            bandwidthMaxPrice: bandwidthMaxPrice,\n            completionDeadline: completionDeadline,\n            matchIncentive: matchIncentive\n        })"
          Identifier JobOfferPartOne
             Type: type(struct Modicum.JobOfferPartOne storage pointer)
             Source: "JobOfferPartOne"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          MemberAccess to member value
             Type: uint256
             Source: "msg.value"
            Identifier msg
               Type: msg
               Source: "msg"
          Identifier instructionLimit
             Type: uint256
             Source: "instructionLimit"
          Identifier bandwidthLimit
             Type: uint256
             Source: "bandwidthLimit"
          Identifier instructionMaxPrice
             Type: uint256
             Source: "instructionMaxPrice"
          Identifier bandwidthMaxPrice
             Type: uint256
             Source: "bandwidthMaxPrice"
          Identifier completionDeadline
             Type: uint256
             Source: "completionDeadline"
          Identifier matchIncentive
             Type: uint256
             Source: "matchIncentive"
      ExpressionStatement
         Source: "jobOffersPartOne[index] = joPOne"
        Assignment using operator =
           Type: struct Modicum.JobOfferPartOne storage ref
           Source: "jobOffersPartOne[index] = joPOne"
          IndexAccess
             Type: struct Modicum.JobOfferPartOne storage ref
             Source: "jobOffersPartOne[index]"
            Identifier jobOffersPartOne
               Type: mapping(uint256 => struct Modicum.JobOfferPartOne storage ref)
               Source: "jobOffersPartOne"
            Identifier index
               Type: uint256
               Source: "index"
          Identifier joPOne
             Type: struct Modicum.JobOfferPartOne memory
             Source: "joPOne"
      ExpressionStatement
         Source: "jobOfferPartOnePosted[index] = true"
        Assignment using operator =
           Type: bool
           Source: "jobOfferPartOnePosted[index] = true"
          IndexAccess
             Type: bool
             Source: "jobOfferPartOnePosted[index]"
            Identifier jobOfferPartOnePosted
               Type: mapping(uint256 => bool)
               Source: "jobOfferPartOnePosted"
            Identifier index
               Type: uint256
               Source: "index"
          Literal, token: true value: true
             Type: bool
             Source: "true"
      EmitStatement
         Source: "emit JobOfferPostedPartOne(\n            index,\n            ijoid,\n            msg.sender,\n            instructionLimit,\n            bandwidthLimit,\n            instructionMaxPrice,\n            bandwidthMaxPrice,\n            completionDeadline,\n            msg.value,\n            matchIncentive\n        )"
        FunctionCall
           Type: tuple()
           Source: "JobOfferPostedPartOne(\n            index,\n            ijoid,\n            msg.sender,\n            instructionLimit,\n            bandwidthLimit,\n            instructionMaxPrice,\n            bandwidthMaxPrice,\n            completionDeadline,\n            msg.value,\n            matchIncentive\n        )"
          Identifier JobOfferPostedPartOne
             Type: function (uint256,uint256,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256)
             Source: "JobOfferPostedPartOne"
          Identifier index
             Type: uint256
             Source: "index"
          Identifier ijoid
             Type: uint256
             Source: "ijoid"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          Identifier instructionLimit
             Type: uint256
             Source: "instructionLimit"
          Identifier bandwidthLimit
             Type: uint256
             Source: "bandwidthLimit"
          Identifier instructionMaxPrice
             Type: uint256
             Source: "instructionMaxPrice"
          Identifier bandwidthMaxPrice
             Type: uint256
             Source: "bandwidthMaxPrice"
          Identifier completionDeadline
             Type: uint256
             Source: "completionDeadline"
          MemberAccess to member value
             Type: uint256
             Source: "msg.value"
            Identifier msg
               Type: msg
               Source: "msg"
          Identifier matchIncentive
             Type: uint256
             Source: "matchIncentive"
      EmitStatement
         Source: "emit EtherTransferred(msg.sender, address(this), msg.value, EtherTransferCause.PostJobOffer)"
        FunctionCall
           Type: tuple()
           Source: "EtherTransferred(msg.sender, address(this), msg.value, EtherTransferCause.PostJobOffer)"
          Identifier EtherTransferred
             Type: function (address,address,uint256,enum Modicum.EtherTransferCause)
             Source: "EtherTransferred"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          FunctionCall
             Type: address
             Source: "address(this)"
            ElementaryTypeNameExpression address
               Type: type(address)
               Source: "address"
            Identifier this
               Type: contract Modicum
               Source: "this"
          MemberAccess to member value
             Type: uint256
             Source: "msg.value"
            Identifier msg
               Type: msg
               Source: "msg"
          MemberAccess to member PostJobOffer
             Type: enum Modicum.EtherTransferCause
             Source: "EtherTransferCause.PostJobOffer"
            Identifier EtherTransferCause
               Type: type(enum Modicum.EtherTransferCause)
               Source: "EtherTransferCause"
  FunctionDefinition "postJobOfferPartTwo" - public
     Source: "function postJobOfferPartTwo(\n        uint256 ijoid,\n        uint256 firstLayerHash,\n        uint256 ramLimit,\n        uint256 localStorageLimit,\n        bytes32 uri,\n        address directory,\n        uint256 jobHash,\n        Architecture arch\n    ) public {\n\n        // require(jobCreators[msg.sender].trustedMediators.length != 0,\n        //    \"You are not registered as a JobCreator\");\n\n        uint256 index = findJOIndex[msg.sender][ijoid];\n        if (index == 0) {\n            index = joIndex;\n            joIndex++;\n            findJOIndex[msg.sender][ijoid] = index;\n        }\n\n        // require(jobOfferPartTwoPosted[index] == false, \"You have already posted a part two for this ijoid.\");\n\n        JobOfferPartTwo memory joPTwo = JobOfferPartTwo({\n            jobCreator: msg.sender,\n            firstLayerHash: firstLayerHash,\n            ramLimit: ramLimit,\n            localStorageLimit: localStorageLimit,\n            uri: uri,\n            directory: directory,\n            jobHash: jobHash,\n            arch: arch\n        });\n\n        jobOffersPartTwo[index] = joPTwo;\n        jobOfferPartTwoPosted[index] = true;\n\n        emit JobOfferPostedPartTwo(\n            index,\n            msg.sender,\n            jobHash,\n            firstLayerHash,\n            uri,\n            directory,\n            arch,\n            ramLimit,\n            localStorageLimit\n        );\n    }"
    ParameterList
       Source: "(\n        uint256 ijoid,\n        uint256 firstLayerHash,\n        uint256 ramLimit,\n        uint256 localStorageLimit,\n        bytes32 uri,\n        address directory,\n        uint256 jobHash,\n        Architecture arch\n    )"
      VariableDeclaration "ijoid"
         Type: uint256
         Source: "uint256 ijoid"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "firstLayerHash"
         Type: uint256
         Source: "uint256 firstLayerHash"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "ramLimit"
         Type: uint256
         Source: "uint256 ramLimit"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "localStorageLimit"
         Type: uint256
         Source: "uint256 localStorageLimit"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "uri"
         Type: bytes32
         Source: "bytes32 uri"
        ElementaryTypeName bytes32
           Source: "bytes32"
      VariableDeclaration "directory"
         Type: address
         Source: "address directory"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "jobHash"
         Type: uint256
         Source: "uint256 jobHash"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "arch"
         Type: enum Modicum.Architecture
         Source: "Architecture arch"
        UserDefinedTypeName "Architecture"
           Source: "Architecture"
    ParameterList
       Source: ""
    Block
       Source: "{\n\n        // require(jobCreators[msg.sender].trustedMediators.length != 0,\n        //    \"You are not registered as a JobCreator\");\n\n        uint256 index = findJOIndex[msg.sender][ijoid];\n        if (index == 0) {\n            index = joIndex;\n            joIndex++;\n            findJOIndex[msg.sender][ijoid] = index;\n        }\n\n        // require(jobOfferPartTwoPosted[index] == false, \"You have already posted a part two for this ijoid.\");\n\n        JobOfferPartTwo memory joPTwo = JobOfferPartTwo({\n            jobCreator: msg.sender,\n            firstLayerHash: firstLayerHash,\n            ramLimit: ramLimit,\n            localStorageLimit: localStorageLimit,\n            uri: uri,\n            directory: directory,\n            jobHash: jobHash,\n            arch: arch\n        });\n\n        jobOffersPartTwo[index] = joPTwo;\n        jobOfferPartTwoPosted[index] = true;\n\n        emit JobOfferPostedPartTwo(\n            index,\n            msg.sender,\n            jobHash,\n            firstLayerHash,\n            uri,\n            directory,\n            arch,\n            ramLimit,\n            localStorageLimit\n        );\n    }"
      VariableDeclarationStatement
         Source: "uint256 index = findJOIndex[msg.sender][ijoid]"
        VariableDeclaration "index"
           Type: uint256
           Source: "uint256 index"
          ElementaryTypeName uint256
             Source: "uint256"
        IndexAccess
           Type: uint256
           Source: "findJOIndex[msg.sender][ijoid]"
          IndexAccess
             Type: mapping(uint256 => uint256)
             Source: "findJOIndex[msg.sender]"
            Identifier findJOIndex
               Type: mapping(address => mapping(uint256 => uint256))
               Source: "findJOIndex"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
          Identifier ijoid
             Type: uint256
             Source: "ijoid"
      IfStatement
         Source: "if (index == 0) {\n            index = joIndex;\n            joIndex++;\n            findJOIndex[msg.sender][ijoid] = index;\n        }"
        BinaryOperation using operator ==
           Type: bool
           Source: "index == 0"
          Identifier index
             Type: uint256
             Source: "index"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
        Block
           Source: "{\n            index = joIndex;\n            joIndex++;\n            findJOIndex[msg.sender][ijoid] = index;\n        }"
          ExpressionStatement
             Source: "index = joIndex"
            Assignment using operator =
               Type: uint256
               Source: "index = joIndex"
              Identifier index
                 Type: uint256
                 Source: "index"
              Identifier joIndex
                 Type: uint256
                 Source: "joIndex"
          ExpressionStatement
             Source: "joIndex++"
            UnaryOperation (postfix) ++
               Type: uint256
               Source: "joIndex++"
              Identifier joIndex
                 Type: uint256
                 Source: "joIndex"
          ExpressionStatement
             Source: "findJOIndex[msg.sender][ijoid] = index"
            Assignment using operator =
               Type: uint256
               Source: "findJOIndex[msg.sender][ijoid] = index"
              IndexAccess
                 Type: uint256
                 Source: "findJOIndex[msg.sender][ijoid]"
                IndexAccess
                   Type: mapping(uint256 => uint256)
                   Source: "findJOIndex[msg.sender]"
                  Identifier findJOIndex
                     Type: mapping(address => mapping(uint256 => uint256))
                     Source: "findJOIndex"
                  MemberAccess to member sender
                     Type: address
                     Source: "msg.sender"
                    Identifier msg
                       Type: msg
                       Source: "msg"
                Identifier ijoid
                   Type: uint256
                   Source: "ijoid"
              Identifier index
                 Type: uint256
                 Source: "index"
      VariableDeclarationStatement
         Source: "JobOfferPartTwo memory joPTwo = JobOfferPartTwo({\n            jobCreator: msg.sender,\n            firstLayerHash: firstLayerHash,\n            ramLimit: ramLimit,\n            localStorageLimit: localStorageLimit,\n            uri: uri,\n            directory: directory,\n            jobHash: jobHash,\n            arch: arch\n        })"
        VariableDeclaration "joPTwo"
           Type: struct Modicum.JobOfferPartTwo memory
           Source: "JobOfferPartTwo memory joPTwo"
          UserDefinedTypeName "JobOfferPartTwo"
             Source: "JobOfferPartTwo"
        FunctionCall
           Type: struct Modicum.JobOfferPartTwo memory
           Source: "JobOfferPartTwo({\n            jobCreator: msg.sender,\n            firstLayerHash: firstLayerHash,\n            ramLimit: ramLimit,\n            localStorageLimit: localStorageLimit,\n            uri: uri,\n            directory: directory,\n            jobHash: jobHash,\n            arch: arch\n        })"
          Identifier JobOfferPartTwo
             Type: type(struct Modicum.JobOfferPartTwo storage pointer)
             Source: "JobOfferPartTwo"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          Identifier firstLayerHash
             Type: uint256
             Source: "firstLayerHash"
          Identifier ramLimit
             Type: uint256
             Source: "ramLimit"
          Identifier localStorageLimit
             Type: uint256
             Source: "localStorageLimit"
          Identifier uri
             Type: bytes32
             Source: "uri"
          Identifier directory
             Type: address
             Source: "directory"
          Identifier jobHash
             Type: uint256
             Source: "jobHash"
          Identifier arch
             Type: enum Modicum.Architecture
             Source: "arch"
      ExpressionStatement
         Source: "jobOffersPartTwo[index] = joPTwo"
        Assignment using operator =
           Type: struct Modicum.JobOfferPartTwo storage ref
           Source: "jobOffersPartTwo[index] = joPTwo"
          IndexAccess
             Type: struct Modicum.JobOfferPartTwo storage ref
             Source: "jobOffersPartTwo[index]"
            Identifier jobOffersPartTwo
               Type: mapping(uint256 => struct Modicum.JobOfferPartTwo storage ref)
               Source: "jobOffersPartTwo"
            Identifier index
               Type: uint256
               Source: "index"
          Identifier joPTwo
             Type: struct Modicum.JobOfferPartTwo memory
             Source: "joPTwo"
      ExpressionStatement
         Source: "jobOfferPartTwoPosted[index] = true"
        Assignment using operator =
           Type: bool
           Source: "jobOfferPartTwoPosted[index] = true"
          IndexAccess
             Type: bool
             Source: "jobOfferPartTwoPosted[index]"
            Identifier jobOfferPartTwoPosted
               Type: mapping(uint256 => bool)
               Source: "jobOfferPartTwoPosted"
            Identifier index
               Type: uint256
               Source: "index"
          Literal, token: true value: true
             Type: bool
             Source: "true"
      EmitStatement
         Source: "emit JobOfferPostedPartTwo(\n            index,\n            msg.sender,\n            jobHash,\n            firstLayerHash,\n            uri,\n            directory,\n            arch,\n            ramLimit,\n            localStorageLimit\n        )"
        FunctionCall
           Type: tuple()
           Source: "JobOfferPostedPartTwo(\n            index,\n            msg.sender,\n            jobHash,\n            firstLayerHash,\n            uri,\n            directory,\n            arch,\n            ramLimit,\n            localStorageLimit\n        )"
          Identifier JobOfferPostedPartTwo
             Type: function (uint256,address,uint256,uint256,bytes32,address,enum Modicum.Architecture,uint256,uint256)
             Source: "JobOfferPostedPartTwo"
          Identifier index
             Type: uint256
             Source: "index"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          Identifier jobHash
             Type: uint256
             Source: "jobHash"
          Identifier firstLayerHash
             Type: uint256
             Source: "firstLayerHash"
          Identifier uri
             Type: bytes32
             Source: "uri"
          Identifier directory
             Type: address
             Source: "directory"
          Identifier arch
             Type: enum Modicum.Architecture
             Source: "arch"
          Identifier ramLimit
             Type: uint256
             Source: "ramLimit"
          Identifier localStorageLimit
             Type: uint256
             Source: "localStorageLimit"
  FunctionDefinition "cancelJobOffer" - public
     Source: "function cancelJobOffer(uint256 offerId) public {\n        // require(jobOffersPartOne[offerId].jobCreator == msg.sender, \"This offer is not yours.\");\n        // require(jobOfferMatched[offerId] == false, \"You cannot cancel a jop which is running.\");\n\n        //msg.sender.transfer(jobOffersPartOne[offerId].depositValue);\n        jobOffersPartOne[offerId].depositValue = 0;\n\n        isJobOfferCanceled[offerId] = true;\n\n        emit JobOfferCanceled(offerId);\n        emit EtherTransferred(address(this), msg.sender, jobOffersPartOne[offerId].depositValue, EtherTransferCause.CancelJobOffer);\n    }"
    ParameterList
       Source: "(uint256 offerId)"
      VariableDeclaration "offerId"
         Type: uint256
         Source: "uint256 offerId"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: ""
    Block
       Source: "{\n        // require(jobOffersPartOne[offerId].jobCreator == msg.sender, \"This offer is not yours.\");\n        // require(jobOfferMatched[offerId] == false, \"You cannot cancel a jop which is running.\");\n\n        //msg.sender.transfer(jobOffersPartOne[offerId].depositValue);\n        jobOffersPartOne[offerId].depositValue = 0;\n\n        isJobOfferCanceled[offerId] = true;\n\n        emit JobOfferCanceled(offerId);\n        emit EtherTransferred(address(this), msg.sender, jobOffersPartOne[offerId].depositValue, EtherTransferCause.CancelJobOffer);\n    }"
      ExpressionStatement
         Source: "jobOffersPartOne[offerId].depositValue = 0"
        Assignment using operator =
           Type: uint256
           Source: "jobOffersPartOne[offerId].depositValue = 0"
          MemberAccess to member depositValue
             Type: uint256
             Source: "jobOffersPartOne[offerId].depositValue"
            IndexAccess
               Type: struct Modicum.JobOfferPartOne storage ref
               Source: "jobOffersPartOne[offerId]"
              Identifier jobOffersPartOne
                 Type: mapping(uint256 => struct Modicum.JobOfferPartOne storage ref)
                 Source: "jobOffersPartOne"
              Identifier offerId
                 Type: uint256
                 Source: "offerId"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
      ExpressionStatement
         Source: "isJobOfferCanceled[offerId] = true"
        Assignment using operator =
           Type: bool
           Source: "isJobOfferCanceled[offerId] = true"
          IndexAccess
             Type: bool
             Source: "isJobOfferCanceled[offerId]"
            Identifier isJobOfferCanceled
               Type: mapping(uint256 => bool)
               Source: "isJobOfferCanceled"
            Identifier offerId
               Type: uint256
               Source: "offerId"
          Literal, token: true value: true
             Type: bool
             Source: "true"
      EmitStatement
         Source: "emit JobOfferCanceled(offerId)"
        FunctionCall
           Type: tuple()
           Source: "JobOfferCanceled(offerId)"
          Identifier JobOfferCanceled
             Type: function (uint256)
             Source: "JobOfferCanceled"
          Identifier offerId
             Type: uint256
             Source: "offerId"
      EmitStatement
         Source: "emit EtherTransferred(address(this), msg.sender, jobOffersPartOne[offerId].depositValue, EtherTransferCause.CancelJobOffer)"
        FunctionCall
           Type: tuple()
           Source: "EtherTransferred(address(this), msg.sender, jobOffersPartOne[offerId].depositValue, EtherTransferCause.CancelJobOffer)"
          Identifier EtherTransferred
             Type: function (address,address,uint256,enum Modicum.EtherTransferCause)
             Source: "EtherTransferred"
          FunctionCall
             Type: address
             Source: "address(this)"
            ElementaryTypeNameExpression address
               Type: type(address)
               Source: "address"
            Identifier this
               Type: contract Modicum
               Source: "this"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          MemberAccess to member depositValue
             Type: uint256
             Source: "jobOffersPartOne[offerId].depositValue"
            IndexAccess
               Type: struct Modicum.JobOfferPartOne storage ref
               Source: "jobOffersPartOne[offerId]"
              Identifier jobOffersPartOne
                 Type: mapping(uint256 => struct Modicum.JobOfferPartOne storage ref)
                 Source: "jobOffersPartOne"
              Identifier offerId
                 Type: uint256
                 Source: "offerId"
          MemberAccess to member CancelJobOffer
             Type: enum Modicum.EtherTransferCause
             Source: "EtherTransferCause.CancelJobOffer"
            Identifier EtherTransferCause
               Type: type(enum Modicum.EtherTransferCause)
               Source: "EtherTransferCause"
  FunctionDefinition "cancelResOffer" - public
     Source: "function cancelResOffer(uint256 offerId) public {\n        // require(resourceOffers[offerId].resProvider == msg.sender, \"This offer is not yours.\");\n        // require(resOfferMatched[offerId] == false, \"You cannot cancel a jop which is running.\");\n\n        //msg.sender.transfer(resourceOffers[offerId].depositValue);\n        resourceOffers[offerId].depositValue = 0;\n\n        isResOfferCanceled[offerId] = true;\n\n        emit ResourceOfferCanceled(offerId);\n        emit EtherTransferred(address(this), msg.sender, resourceOffers[offerId].depositValue, EtherTransferCause.CancelResOffer);\n    }"
    ParameterList
       Source: "(uint256 offerId)"
      VariableDeclaration "offerId"
         Type: uint256
         Source: "uint256 offerId"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: ""
    Block
       Source: "{\n        // require(resourceOffers[offerId].resProvider == msg.sender, \"This offer is not yours.\");\n        // require(resOfferMatched[offerId] == false, \"You cannot cancel a jop which is running.\");\n\n        //msg.sender.transfer(resourceOffers[offerId].depositValue);\n        resourceOffers[offerId].depositValue = 0;\n\n        isResOfferCanceled[offerId] = true;\n\n        emit ResourceOfferCanceled(offerId);\n        emit EtherTransferred(address(this), msg.sender, resourceOffers[offerId].depositValue, EtherTransferCause.CancelResOffer);\n    }"
      ExpressionStatement
         Source: "resourceOffers[offerId].depositValue = 0"
        Assignment using operator =
           Type: uint256
           Source: "resourceOffers[offerId].depositValue = 0"
          MemberAccess to member depositValue
             Type: uint256
             Source: "resourceOffers[offerId].depositValue"
            IndexAccess
               Type: struct Modicum.ResourceOffer storage ref
               Source: "resourceOffers[offerId]"
              Identifier resourceOffers
                 Type: struct Modicum.ResourceOffer storage ref[] storage ref
                 Source: "resourceOffers"
              Identifier offerId
                 Type: uint256
                 Source: "offerId"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
      ExpressionStatement
         Source: "isResOfferCanceled[offerId] = true"
        Assignment using operator =
           Type: bool
           Source: "isResOfferCanceled[offerId] = true"
          IndexAccess
             Type: bool
             Source: "isResOfferCanceled[offerId]"
            Identifier isResOfferCanceled
               Type: mapping(uint256 => bool)
               Source: "isResOfferCanceled"
            Identifier offerId
               Type: uint256
               Source: "offerId"
          Literal, token: true value: true
             Type: bool
             Source: "true"
      EmitStatement
         Source: "emit ResourceOfferCanceled(offerId)"
        FunctionCall
           Type: tuple()
           Source: "ResourceOfferCanceled(offerId)"
          Identifier ResourceOfferCanceled
             Type: function (uint256)
             Source: "ResourceOfferCanceled"
          Identifier offerId
             Type: uint256
             Source: "offerId"
      EmitStatement
         Source: "emit EtherTransferred(address(this), msg.sender, resourceOffers[offerId].depositValue, EtherTransferCause.CancelResOffer)"
        FunctionCall
           Type: tuple()
           Source: "EtherTransferred(address(this), msg.sender, resourceOffers[offerId].depositValue, EtherTransferCause.CancelResOffer)"
          Identifier EtherTransferred
             Type: function (address,address,uint256,enum Modicum.EtherTransferCause)
             Source: "EtherTransferred"
          FunctionCall
             Type: address
             Source: "address(this)"
            ElementaryTypeNameExpression address
               Type: type(address)
               Source: "address"
            Identifier this
               Type: contract Modicum
               Source: "this"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          MemberAccess to member depositValue
             Type: uint256
             Source: "resourceOffers[offerId].depositValue"
            IndexAccess
               Type: struct Modicum.ResourceOffer storage ref
               Source: "resourceOffers[offerId]"
              Identifier resourceOffers
                 Type: struct Modicum.ResourceOffer storage ref[] storage ref
                 Source: "resourceOffers"
              Identifier offerId
                 Type: uint256
                 Source: "offerId"
          MemberAccess to member CancelResOffer
             Type: enum Modicum.EtherTransferCause
             Source: "EtherTransferCause.CancelResOffer"
            Identifier EtherTransferCause
               Type: type(enum Modicum.EtherTransferCause)
               Source: "EtherTransferCause"
  FunctionDefinition "postMatch" - public
     Source: "function postMatch(\n        uint256 jobOfferId,\n        uint256 resourceOfferId,\n        address mediator\n    ) public returns (uint256){\n        // require(solvers[msg.sender] == true, \"You are not a trusted solver\");\n        // require(isJobOfferCanceled[jobOfferId] == false,\n        //     \"Job offer is already canceled.\");\n\n        // require(isResOfferCanceled[resourceOfferId] == false,\n        //     \"Resource offer is already canceled.\");\n\n        // require(jobOfferMatched[jobOfferId] == false,\n        //     \"Job offer is already matched\");\n\n        // require(resOfferMatched[resourceOfferId] == false,\n        //     \"Resource offer is already matched\");\n\n        // require(jobOfferPartOnePosted[jobOfferId] == true,\n        //     \"The job offer was not completed\");\n        // require(jobOfferPartTwoPosted[jobOfferId] == true,\n        //     \"The job offer was not completed\");\n        // bool RPTrustM = false;\n        // bool JCTrustM = false;\n        // bool RPTrustD = false;\n        // bool MTrustD  = false;\n        // bool RPSupportFirstLayer = false;\n        // bool MSupportFirstLayer = false;\n\n        // uint i = 0;\n\n        // for (i = 0; i < resourceProviders[resourceOffers[resourceOfferId].resProvider].trustedMediators.length; i++)\n        //     if (resourceProviders[resourceOffers[resourceOfferId].resProvider].trustedMediators[i] == mediator)\n        //         RPTrustM = true;\n\n        // for (i = 0; i < jobCreators[jobOffersPartOne[jobOfferId].jobCreator].trustedMediators.length; i++)\n        //     if (jobCreators[jobOffersPartOne[jobOfferId].jobCreator].trustedMediators[i] == mediator)\n        //         JCTrustM = true;\n\n        // for (i = 0; i < resourceProviders[resourceOffers[resourceOfferId].resProvider].trustedDirectories.length; i++)\n        //     if (resourceProviders[resourceOffers[resourceOfferId].resProvider].trustedDirectories[i] == jobOffersPartTwo[jobOfferId].directory)\n        //         RPTrustD = true;\n\n        // for (i = 0; i < mediators[mediator].trustedDirectories.length; i++)\n        //     if (mediators[mediator].trustedDirectories[i] == jobOffersPartTwo[jobOfferId].directory)\n        //         RPTrustD = true;\n\n        // for (i = 0; i < resourceProviders[resourceOffers[resourceOfferId].resProvider].supportedFirstLayers.length; i++)\n        //     if (resourceProviders[resourceOffers[resourceOfferId].resProvider].supportedFirstLayers[i] == jobOffersPartTwo[jobOfferId].firstLayerHash)\n        //         RPSupportFirstLayer = true;\n\n        // for (i = 0; i < mediators[mediator].supportedFirstLayers.length; i++)\n        //     if (mediators[mediator].supportedFirstLayers[i] == jobOffersPartTwo[jobOfferId].firstLayerHash)\n        //         MSupportFirstLayer = true;\n\n\n        // require(\n        //     resourceOffers[resourceOfferId].instructionCap >= jobOffersPartOne[jobOfferId].instructionLimit &&\n        //     resourceOffers[resourceOfferId].memoryCap >= jobOffersPartTwo[jobOfferId].ramLimit &&\n        //     resourceOffers[resourceOfferId].localStorageCap >= jobOffersPartTwo[jobOfferId].localStorageLimit &&\n        //     resourceOffers[resourceOfferId].instructionPrice <= jobOffersPartOne[jobOfferId].instructionMaxPrice &&\n        //     resourceProviders[resourceOffers[resourceOfferId].resProvider].arch == jobOffersPartTwo[jobOfferId].arch && mediators[mediator].arch == resourceProviders[resourceOffers[resourceOfferId].resProvider].arch &&\n        //     resourceOffers[resourceOfferId].verificationCount <= mediators[mediator].verificationCount &&\n        //     now + resourceProviders[resourceOffers[resourceOfferId].resProvider].timePerInstruction * jobOffersPartOne[jobOfferId].instructionLimit <= jobOffersPartOne[jobOfferId].completionDeadline &&\n        //     RPTrustD && RPTrustM && JCTrustM && MTrustD && RPSupportFirstLayer && MSupportFirstLayer,\n        //     \"The offers cannot be matched\"\n        // );\n\n\n        uint256 index = matches.push(Match({\n            resourceOffer: resourceOfferId,\n            jobOffer: jobOfferId,\n            mediator: mediator\n        })) - 1;\n\n        jobOfferMatched[jobOfferId] = true;\n        resOfferMatched[resourceOfferId] = true;\n\n        uint256 matchIncentive = jobOffersPartOne[jobOfferId].matchIncentive +\n                resourceOffers[resourceOfferId].matchIncentive;\n\n        //msg.sender.transfer(matchIncentive);\n\n        emit EtherTransferred(address(this), msg.sender, matchIncentive, EtherTransferCause.PostMatch);\n\n        emit Matched(msg.sender, index, jobOfferId, resourceOfferId, mediator);\n\n        return index;\n    }"
    ParameterList
       Source: "(\n        uint256 jobOfferId,\n        uint256 resourceOfferId,\n        address mediator\n    )"
      VariableDeclaration "jobOfferId"
         Type: uint256
         Source: "uint256 jobOfferId"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "resourceOfferId"
         Type: uint256
         Source: "uint256 resourceOfferId"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "mediator"
         Type: address
         Source: "address mediator"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: "(uint256)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\n        // require(solvers[msg.sender] == true, \"You are not a trusted solver\");\n        // require(isJobOfferCanceled[jobOfferId] == false,\n        //     \"Job offer is already canceled.\");\n\n        // require(isResOfferCanceled[resourceOfferId] == false,\n        //     \"Resource offer is already canceled.\");\n\n        // require(jobOfferMatched[jobOfferId] == false,\n        //     \"Job offer is already matched\");\n\n        // require(resOfferMatched[resourceOfferId] == false,\n        //     \"Resource offer is already matched\");\n\n        // require(jobOfferPartOnePosted[jobOfferId] == true,\n        //     \"The job offer was not completed\");\n        // require(jobOfferPartTwoPosted[jobOfferId] == true,\n        //     \"The job offer was not completed\");\n        // bool RPTrustM = false;\n        // bool JCTrustM = false;\n        // bool RPTrustD = false;\n        // bool MTrustD  = false;\n        // bool RPSupportFirstLayer = false;\n        // bool MSupportFirstLayer = false;\n\n        // uint i = 0;\n\n        // for (i = 0; i < resourceProviders[resourceOffers[resourceOfferId].resProvider].trustedMediators.length; i++)\n        //     if (resourceProviders[resourceOffers[resourceOfferId].resProvider].trustedMediators[i] == mediator)\n        //         RPTrustM = true;\n\n        // for (i = 0; i < jobCreators[jobOffersPartOne[jobOfferId].jobCreator].trustedMediators.length; i++)\n        //     if (jobCreators[jobOffersPartOne[jobOfferId].jobCreator].trustedMediators[i] == mediator)\n        //         JCTrustM = true;\n\n        // for (i = 0; i < resourceProviders[resourceOffers[resourceOfferId].resProvider].trustedDirectories.length; i++)\n        //     if (resourceProviders[resourceOffers[resourceOfferId].resProvider].trustedDirectories[i] == jobOffersPartTwo[jobOfferId].directory)\n        //         RPTrustD = true;\n\n        // for (i = 0; i < mediators[mediator].trustedDirectories.length; i++)\n        //     if (mediators[mediator].trustedDirectories[i] == jobOffersPartTwo[jobOfferId].directory)\n        //         RPTrustD = true;\n\n        // for (i = 0; i < resourceProviders[resourceOffers[resourceOfferId].resProvider].supportedFirstLayers.length; i++)\n        //     if (resourceProviders[resourceOffers[resourceOfferId].resProvider].supportedFirstLayers[i] == jobOffersPartTwo[jobOfferId].firstLayerHash)\n        //         RPSupportFirstLayer = true;\n\n        // for (i = 0; i < mediators[mediator].supportedFirstLayers.length; i++)\n        //     if (mediators[mediator].supportedFirstLayers[i] == jobOffersPartTwo[jobOfferId].firstLayerHash)\n        //         MSupportFirstLayer = true;\n\n\n        // require(\n        //     resourceOffers[resourceOfferId].instructionCap >= jobOffersPartOne[jobOfferId].instructionLimit &&\n        //     resourceOffers[resourceOfferId].memoryCap >= jobOffersPartTwo[jobOfferId].ramLimit &&\n        //     resourceOffers[resourceOfferId].localStorageCap >= jobOffersPartTwo[jobOfferId].localStorageLimit &&\n        //     resourceOffers[resourceOfferId].instructionPrice <= jobOffersPartOne[jobOfferId].instructionMaxPrice &&\n        //     resourceProviders[resourceOffers[resourceOfferId].resProvider].arch == jobOffersPartTwo[jobOfferId].arch && mediators[mediator].arch == resourceProviders[resourceOffers[resourceOfferId].resProvider].arch &&\n        //     resourceOffers[resourceOfferId].verificationCount <= mediators[mediator].verificationCount &&\n        //     now + resourceProviders[resourceOffers[resourceOfferId].resProvider].timePerInstruction * jobOffersPartOne[jobOfferId].instructionLimit <= jobOffersPartOne[jobOfferId].completionDeadline &&\n        //     RPTrustD && RPTrustM && JCTrustM && MTrustD && RPSupportFirstLayer && MSupportFirstLayer,\n        //     \"The offers cannot be matched\"\n        // );\n\n\n        uint256 index = matches.push(Match({\n            resourceOffer: resourceOfferId,\n            jobOffer: jobOfferId,\n            mediator: mediator\n        })) - 1;\n\n        jobOfferMatched[jobOfferId] = true;\n        resOfferMatched[resourceOfferId] = true;\n\n        uint256 matchIncentive = jobOffersPartOne[jobOfferId].matchIncentive +\n                resourceOffers[resourceOfferId].matchIncentive;\n\n        //msg.sender.transfer(matchIncentive);\n\n        emit EtherTransferred(address(this), msg.sender, matchIncentive, EtherTransferCause.PostMatch);\n\n        emit Matched(msg.sender, index, jobOfferId, resourceOfferId, mediator);\n\n        return index;\n    }"
      VariableDeclarationStatement
         Source: "uint256 index = matches.push(Match({\n            resourceOffer: resourceOfferId,\n            jobOffer: jobOfferId,\n            mediator: mediator\n        })) - 1"
        VariableDeclaration "index"
           Type: uint256
           Source: "uint256 index"
          ElementaryTypeName uint256
             Source: "uint256"
        BinaryOperation using operator -
           Type: uint256
           Source: "matches.push(Match({\n            resourceOffer: resourceOfferId,\n            jobOffer: jobOfferId,\n            mediator: mediator\n        })) - 1"
          FunctionCall
             Type: uint256
             Source: "matches.push(Match({\n            resourceOffer: resourceOfferId,\n            jobOffer: jobOfferId,\n            mediator: mediator\n        }))"
            MemberAccess to member push
               Type: function (struct Modicum.Match storage ref) returns (uint256)
               Source: "matches.push"
              Identifier matches
                 Type: struct Modicum.Match storage ref[] storage ref
                 Source: "matches"
            FunctionCall
               Type: struct Modicum.Match memory
               Source: "Match({\n            resourceOffer: resourceOfferId,\n            jobOffer: jobOfferId,\n            mediator: mediator\n        })"
              Identifier Match
                 Type: type(struct Modicum.Match storage pointer)
                 Source: "Match"
              Identifier resourceOfferId
                 Type: uint256
                 Source: "resourceOfferId"
              Identifier jobOfferId
                 Type: uint256
                 Source: "jobOfferId"
              Identifier mediator
                 Type: address
                 Source: "mediator"
          Literal, token: [no token] value: 1
             Type: int_const 1
             Source: "1"
      ExpressionStatement
         Source: "jobOfferMatched[jobOfferId] = true"
        Assignment using operator =
           Type: bool
           Source: "jobOfferMatched[jobOfferId] = true"
          IndexAccess
             Type: bool
             Source: "jobOfferMatched[jobOfferId]"
            Identifier jobOfferMatched
               Type: mapping(uint256 => bool)
               Source: "jobOfferMatched"
            Identifier jobOfferId
               Type: uint256
               Source: "jobOfferId"
          Literal, token: true value: true
             Type: bool
             Source: "true"
      ExpressionStatement
         Source: "resOfferMatched[resourceOfferId] = true"
        Assignment using operator =
           Type: bool
           Source: "resOfferMatched[resourceOfferId] = true"
          IndexAccess
             Type: bool
             Source: "resOfferMatched[resourceOfferId]"
            Identifier resOfferMatched
               Type: mapping(uint256 => bool)
               Source: "resOfferMatched"
            Identifier resourceOfferId
               Type: uint256
               Source: "resourceOfferId"
          Literal, token: true value: true
             Type: bool
             Source: "true"
      VariableDeclarationStatement
         Source: "uint256 matchIncentive = jobOffersPartOne[jobOfferId].matchIncentive +\n                resourceOffers[resourceOfferId].matchIncentive"
        VariableDeclaration "matchIncentive"
           Type: uint256
           Source: "uint256 matchIncentive"
          ElementaryTypeName uint256
             Source: "uint256"
        BinaryOperation using operator +
           Type: uint256
           Source: "jobOffersPartOne[jobOfferId].matchIncentive +\n                resourceOffers[resourceOfferId].matchIncentive"
          MemberAccess to member matchIncentive
             Type: uint256
             Source: "jobOffersPartOne[jobOfferId].matchIncentive"
            IndexAccess
               Type: struct Modicum.JobOfferPartOne storage ref
               Source: "jobOffersPartOne[jobOfferId]"
              Identifier jobOffersPartOne
                 Type: mapping(uint256 => struct Modicum.JobOfferPartOne storage ref)
                 Source: "jobOffersPartOne"
              Identifier jobOfferId
                 Type: uint256
                 Source: "jobOfferId"
          MemberAccess to member matchIncentive
             Type: uint256
             Source: "resourceOffers[resourceOfferId].matchIncentive"
            IndexAccess
               Type: struct Modicum.ResourceOffer storage ref
               Source: "resourceOffers[resourceOfferId]"
              Identifier resourceOffers
                 Type: struct Modicum.ResourceOffer storage ref[] storage ref
                 Source: "resourceOffers"
              Identifier resourceOfferId
                 Type: uint256
                 Source: "resourceOfferId"
      EmitStatement
         Source: "emit EtherTransferred(address(this), msg.sender, matchIncentive, EtherTransferCause.PostMatch)"
        FunctionCall
           Type: tuple()
           Source: "EtherTransferred(address(this), msg.sender, matchIncentive, EtherTransferCause.PostMatch)"
          Identifier EtherTransferred
             Type: function (address,address,uint256,enum Modicum.EtherTransferCause)
             Source: "EtherTransferred"
          FunctionCall
             Type: address
             Source: "address(this)"
            ElementaryTypeNameExpression address
               Type: type(address)
               Source: "address"
            Identifier this
               Type: contract Modicum
               Source: "this"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          Identifier matchIncentive
             Type: uint256
             Source: "matchIncentive"
          MemberAccess to member PostMatch
             Type: enum Modicum.EtherTransferCause
             Source: "EtherTransferCause.PostMatch"
            Identifier EtherTransferCause
               Type: type(enum Modicum.EtherTransferCause)
               Source: "EtherTransferCause"
      EmitStatement
         Source: "emit Matched(msg.sender, index, jobOfferId, resourceOfferId, mediator)"
        FunctionCall
           Type: tuple()
           Source: "Matched(msg.sender, index, jobOfferId, resourceOfferId, mediator)"
          Identifier Matched
             Type: function (address,uint256,uint256,uint256,address)
             Source: "Matched"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          Identifier index
             Type: uint256
             Source: "index"
          Identifier jobOfferId
             Type: uint256
             Source: "jobOfferId"
          Identifier resourceOfferId
             Type: uint256
             Source: "resourceOfferId"
          Identifier mediator
             Type: address
             Source: "mediator"
      Return
         Source: "return index"
        Identifier index
           Type: uint256
           Source: "index"
  FunctionDefinition "postResult" - public
     Source: "function postResult(\n        uint256 matchId,\n        uint256 jobOfferId,\n        ResultStatus status,\n        bytes32 uri,\n        uint256 hash,\n        uint256 instructionCount,\n        uint256 bandwidthUsage\n    ) public returns (uint256) {\n        // require (resourceOffers[matches[matchId].resourceOffer].resProvider == msg.sender,\n        //     \"You are not supposed to publish result for this match.\");\n\n        // require(isMatchClosed[matchId] == false,\n        //     \"This match is already closed.\");\n\n        uint256 index = results.push(JobResult({\n            status: status,\n            matchId: matchId,\n            uri: uri,\n            instructionCount: instructionCount,\n            bandwidthUsage: bandwidthUsage,\n            hash: hash,\n            reacted: Reaction.None,\n            timestamp: now\n            })) - 1;\n\n        matchToResult[matchId] = index;\n        resultAvailable[matchId] = true;\n\n        emit ResultPosted(\n            msg.sender,\n            index,\n            matchId,\n            status,\n            uri,\n            hash,\n            instructionCount,\n            bandwidthUsage\n        );\n\n        return index;\n    }"
    ParameterList
       Source: "(\n        uint256 matchId,\n        uint256 jobOfferId,\n        ResultStatus status,\n        bytes32 uri,\n        uint256 hash,\n        uint256 instructionCount,\n        uint256 bandwidthUsage\n    )"
      VariableDeclaration "matchId"
         Type: uint256
         Source: "uint256 matchId"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "jobOfferId"
         Type: uint256
         Source: "uint256 jobOfferId"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "status"
         Type: enum Modicum.ResultStatus
         Source: "ResultStatus status"
        UserDefinedTypeName "ResultStatus"
           Source: "ResultStatus"
      VariableDeclaration "uri"
         Type: bytes32
         Source: "bytes32 uri"
        ElementaryTypeName bytes32
           Source: "bytes32"
      VariableDeclaration "hash"
         Type: uint256
         Source: "uint256 hash"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "instructionCount"
         Type: uint256
         Source: "uint256 instructionCount"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "bandwidthUsage"
         Type: uint256
         Source: "uint256 bandwidthUsage"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: "(uint256)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\n        // require (resourceOffers[matches[matchId].resourceOffer].resProvider == msg.sender,\n        //     \"You are not supposed to publish result for this match.\");\n\n        // require(isMatchClosed[matchId] == false,\n        //     \"This match is already closed.\");\n\n        uint256 index = results.push(JobResult({\n            status: status,\n            matchId: matchId,\n            uri: uri,\n            instructionCount: instructionCount,\n            bandwidthUsage: bandwidthUsage,\n            hash: hash,\n            reacted: Reaction.None,\n            timestamp: now\n            })) - 1;\n\n        matchToResult[matchId] = index;\n        resultAvailable[matchId] = true;\n\n        emit ResultPosted(\n            msg.sender,\n            index,\n            matchId,\n            status,\n            uri,\n            hash,\n            instructionCount,\n            bandwidthUsage\n        );\n\n        return index;\n    }"
      VariableDeclarationStatement
         Source: "uint256 index = results.push(JobResult({\n            status: status,\n            matchId: matchId,\n            uri: uri,\n            instructionCount: instructionCount,\n            bandwidthUsage: bandwidthUsage,\n            hash: hash,\n            reacted: Reaction.None,\n            timestamp: now\n            })) - 1"
        VariableDeclaration "index"
           Type: uint256
           Source: "uint256 index"
          ElementaryTypeName uint256
             Source: "uint256"
        BinaryOperation using operator -
           Type: uint256
           Source: "results.push(JobResult({\n            status: status,\n            matchId: matchId,\n            uri: uri,\n            instructionCount: instructionCount,\n            bandwidthUsage: bandwidthUsage,\n            hash: hash,\n            reacted: Reaction.None,\n            timestamp: now\n            })) - 1"
          FunctionCall
             Type: uint256
             Source: "results.push(JobResult({\n            status: status,\n            matchId: matchId,\n            uri: uri,\n            instructionCount: instructionCount,\n            bandwidthUsage: bandwidthUsage,\n            hash: hash,\n            reacted: Reaction.None,\n            timestamp: now\n            }))"
            MemberAccess to member push
               Type: function (struct Modicum.JobResult storage ref) returns (uint256)
               Source: "results.push"
              Identifier results
                 Type: struct Modicum.JobResult storage ref[] storage ref
                 Source: "results"
            FunctionCall
               Type: struct Modicum.JobResult memory
               Source: "JobResult({\n            status: status,\n            matchId: matchId,\n            uri: uri,\n            instructionCount: instructionCount,\n            bandwidthUsage: bandwidthUsage,\n            hash: hash,\n            reacted: Reaction.None,\n            timestamp: now\n            })"
              Identifier JobResult
                 Type: type(struct Modicum.JobResult storage pointer)
                 Source: "JobResult"
              Identifier status
                 Type: enum Modicum.ResultStatus
                 Source: "status"
              Identifier matchId
                 Type: uint256
                 Source: "matchId"
              Identifier uri
                 Type: bytes32
                 Source: "uri"
              Identifier instructionCount
                 Type: uint256
                 Source: "instructionCount"
              Identifier bandwidthUsage
                 Type: uint256
                 Source: "bandwidthUsage"
              Identifier hash
                 Type: uint256
                 Source: "hash"
              MemberAccess to member None
                 Type: enum Modicum.Reaction
                 Source: "Reaction.None"
                Identifier Reaction
                   Type: type(enum Modicum.Reaction)
                   Source: "Reaction"
              Identifier now
                 Type: uint256
                 Source: "now"
          Literal, token: [no token] value: 1
             Type: int_const 1
             Source: "1"
      ExpressionStatement
         Source: "matchToResult[matchId] = index"
        Assignment using operator =
           Type: uint256
           Source: "matchToResult[matchId] = index"
          IndexAccess
             Type: uint256
             Source: "matchToResult[matchId]"
            Identifier matchToResult
               Type: mapping(uint256 => uint256)
               Source: "matchToResult"
            Identifier matchId
               Type: uint256
               Source: "matchId"
          Identifier index
             Type: uint256
             Source: "index"
      ExpressionStatement
         Source: "resultAvailable[matchId] = true"
        Assignment using operator =
           Type: bool
           Source: "resultAvailable[matchId] = true"
          IndexAccess
             Type: bool
             Source: "resultAvailable[matchId]"
            Identifier resultAvailable
               Type: mapping(uint256 => bool)
               Source: "resultAvailable"
            Identifier matchId
               Type: uint256
               Source: "matchId"
          Literal, token: true value: true
             Type: bool
             Source: "true"
      EmitStatement
         Source: "emit ResultPosted(\n            msg.sender,\n            index,\n            matchId,\n            status,\n            uri,\n            hash,\n            instructionCount,\n            bandwidthUsage\n        )"
        FunctionCall
           Type: tuple()
           Source: "ResultPosted(\n            msg.sender,\n            index,\n            matchId,\n            status,\n            uri,\n            hash,\n            instructionCount,\n            bandwidthUsage\n        )"
          Identifier ResultPosted
             Type: function (address,uint256,uint256,enum Modicum.ResultStatus,bytes32,uint256,uint256,uint256)
             Source: "ResultPosted"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          Identifier index
             Type: uint256
             Source: "index"
          Identifier matchId
             Type: uint256
             Source: "matchId"
          Identifier status
             Type: enum Modicum.ResultStatus
             Source: "status"
          Identifier uri
             Type: bytes32
             Source: "uri"
          Identifier hash
             Type: uint256
             Source: "hash"
          Identifier instructionCount
             Type: uint256
             Source: "instructionCount"
          Identifier bandwidthUsage
             Type: uint256
             Source: "bandwidthUsage"
      Return
         Source: "return index"
        Identifier index
           Type: uint256
           Source: "index"
  FunctionDefinition "rejectResult" - public
     Source: "function rejectResult(uint256 resultId, uint256 jobOfferId) public {\n        // require(jobOffersPartOne[matches[results[resultId].matchId].jobOffer].jobCreator == msg.sender,\n        //     \"You cannot reject a result which is not yours.\");\n        // require(results[resultId].reacted == Reaction.None,\n        //     \"You have already reacted to this result\");\n        // require(isMatchClosed[results[resultId].matchId] == false,\n        //     \"This match is already closed.\");\n\n        results[resultId].reacted = Reaction.Rejected;\n        mediationRequested[results[resultId].matchId] = true;\n\n        emit ResultReaction(msg.sender, resultId,results[resultId].matchId,  1);\n\n        emit DebugString(\"result rejected\");\n\n        emit JobAssignedForMediation(msg.sender, results[resultId].matchId);\n    }"
    ParameterList
       Source: "(uint256 resultId, uint256 jobOfferId)"
      VariableDeclaration "resultId"
         Type: uint256
         Source: "uint256 resultId"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "jobOfferId"
         Type: uint256
         Source: "uint256 jobOfferId"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: ""
    Block
       Source: "{\n        // require(jobOffersPartOne[matches[results[resultId].matchId].jobOffer].jobCreator == msg.sender,\n        //     \"You cannot reject a result which is not yours.\");\n        // require(results[resultId].reacted == Reaction.None,\n        //     \"You have already reacted to this result\");\n        // require(isMatchClosed[results[resultId].matchId] == false,\n        //     \"This match is already closed.\");\n\n        results[resultId].reacted = Reaction.Rejected;\n        mediationRequested[results[resultId].matchId] = true;\n\n        emit ResultReaction(msg.sender, resultId,results[resultId].matchId,  1);\n\n        emit DebugString(\"result rejected\");\n\n        emit JobAssignedForMediation(msg.sender, results[resultId].matchId);\n    }"
      ExpressionStatement
         Source: "results[resultId].reacted = Reaction.Rejected"
        Assignment using operator =
           Type: enum Modicum.Reaction
           Source: "results[resultId].reacted = Reaction.Rejected"
          MemberAccess to member reacted
             Type: enum Modicum.Reaction
             Source: "results[resultId].reacted"
            IndexAccess
               Type: struct Modicum.JobResult storage ref
               Source: "results[resultId]"
              Identifier results
                 Type: struct Modicum.JobResult storage ref[] storage ref
                 Source: "results"
              Identifier resultId
                 Type: uint256
                 Source: "resultId"
          MemberAccess to member Rejected
             Type: enum Modicum.Reaction
             Source: "Reaction.Rejected"
            Identifier Reaction
               Type: type(enum Modicum.Reaction)
               Source: "Reaction"
      ExpressionStatement
         Source: "mediationRequested[results[resultId].matchId] = true"
        Assignment using operator =
           Type: bool
           Source: "mediationRequested[results[resultId].matchId] = true"
          IndexAccess
             Type: bool
             Source: "mediationRequested[results[resultId].matchId]"
            Identifier mediationRequested
               Type: mapping(uint256 => bool)
               Source: "mediationRequested"
            MemberAccess to member matchId
               Type: uint256
               Source: "results[resultId].matchId"
              IndexAccess
                 Type: struct Modicum.JobResult storage ref
                 Source: "results[resultId]"
                Identifier results
                   Type: struct Modicum.JobResult storage ref[] storage ref
                   Source: "results"
                Identifier resultId
                   Type: uint256
                   Source: "resultId"
          Literal, token: true value: true
             Type: bool
             Source: "true"
      EmitStatement
         Source: "emit ResultReaction(msg.sender, resultId,results[resultId].matchId,  1)"
        FunctionCall
           Type: tuple()
           Source: "ResultReaction(msg.sender, resultId,results[resultId].matchId,  1)"
          Identifier ResultReaction
             Type: function (address,uint256,uint256,uint256)
             Source: "ResultReaction"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          Identifier resultId
             Type: uint256
             Source: "resultId"
          MemberAccess to member matchId
             Type: uint256
             Source: "results[resultId].matchId"
            IndexAccess
               Type: struct Modicum.JobResult storage ref
               Source: "results[resultId]"
              Identifier results
                 Type: struct Modicum.JobResult storage ref[] storage ref
                 Source: "results"
              Identifier resultId
                 Type: uint256
                 Source: "resultId"
          Literal, token: [no token] value: 1
             Type: int_const 1
             Source: "1"
      EmitStatement
         Source: "emit DebugString(\"result rejected\")"
        FunctionCall
           Type: tuple()
           Source: "DebugString(\"result rejected\")"
          Identifier DebugString
             Type: function (bytes32)
             Source: "DebugString"
          Literal, token: [no token] value: result rejected
             Type: literal_string "result rejected"
             Source: "\"result rejected\""
      EmitStatement
         Source: "emit JobAssignedForMediation(msg.sender, results[resultId].matchId)"
        FunctionCall
           Type: tuple()
           Source: "JobAssignedForMediation(msg.sender, results[resultId].matchId)"
          Identifier JobAssignedForMediation
             Type: function (address,uint256)
             Source: "JobAssignedForMediation"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          MemberAccess to member matchId
             Type: uint256
             Source: "results[resultId].matchId"
            IndexAccess
               Type: struct Modicum.JobResult storage ref
               Source: "results[resultId]"
              Identifier results
                 Type: struct Modicum.JobResult storage ref[] storage ref
                 Source: "results"
              Identifier resultId
                 Type: uint256
                 Source: "resultId"
  FunctionDefinition "acceptResult" - public
     Source: "function acceptResult(uint256 resultId, uint256 jobOfferId) public returns (uint256) {\n        //require(jobOffers[matches[results[resultId].matchId].jobOffer].jobCreator == msg.sender ||\n        //    (resourceOffers[matches[results[resultId].matchId].resourceOffer].resProvider == msg.sender && results[resultId].timestamp + reactionDeadline > now),\n        //    \"You cannot reject a result which is not yours or deadline has not been missed yet.\");\n        //require(results[resultId].reacted == Reaction.None,\n        //    \"You have already reacted to this result\");\n        //require(isMatchClosed[results[resultId].matchId] == false,\n        //    \"This match is already closed.\");\n\n        results[resultId].reacted = Reaction.Accepted;\n\n        emit ResultReaction(msg.sender, resultId,results[resultId].matchId,  0);\n\n        emit DebugString(\"result accepted\");\n\n        return close(results[resultId].matchId);\n\n    }"
    ParameterList
       Source: "(uint256 resultId, uint256 jobOfferId)"
      VariableDeclaration "resultId"
         Type: uint256
         Source: "uint256 resultId"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "jobOfferId"
         Type: uint256
         Source: "uint256 jobOfferId"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: "(uint256)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\n        //require(jobOffers[matches[results[resultId].matchId].jobOffer].jobCreator == msg.sender ||\n        //    (resourceOffers[matches[results[resultId].matchId].resourceOffer].resProvider == msg.sender && results[resultId].timestamp + reactionDeadline > now),\n        //    \"You cannot reject a result which is not yours or deadline has not been missed yet.\");\n        //require(results[resultId].reacted == Reaction.None,\n        //    \"You have already reacted to this result\");\n        //require(isMatchClosed[results[resultId].matchId] == false,\n        //    \"This match is already closed.\");\n\n        results[resultId].reacted = Reaction.Accepted;\n\n        emit ResultReaction(msg.sender, resultId,results[resultId].matchId,  0);\n\n        emit DebugString(\"result accepted\");\n\n        return close(results[resultId].matchId);\n\n    }"
      ExpressionStatement
         Source: "results[resultId].reacted = Reaction.Accepted"
        Assignment using operator =
           Type: enum Modicum.Reaction
           Source: "results[resultId].reacted = Reaction.Accepted"
          MemberAccess to member reacted
             Type: enum Modicum.Reaction
             Source: "results[resultId].reacted"
            IndexAccess
               Type: struct Modicum.JobResult storage ref
               Source: "results[resultId]"
              Identifier results
                 Type: struct Modicum.JobResult storage ref[] storage ref
                 Source: "results"
              Identifier resultId
                 Type: uint256
                 Source: "resultId"
          MemberAccess to member Accepted
             Type: enum Modicum.Reaction
             Source: "Reaction.Accepted"
            Identifier Reaction
               Type: type(enum Modicum.Reaction)
               Source: "Reaction"
      EmitStatement
         Source: "emit ResultReaction(msg.sender, resultId,results[resultId].matchId,  0)"
        FunctionCall
           Type: tuple()
           Source: "ResultReaction(msg.sender, resultId,results[resultId].matchId,  0)"
          Identifier ResultReaction
             Type: function (address,uint256,uint256,uint256)
             Source: "ResultReaction"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          Identifier resultId
             Type: uint256
             Source: "resultId"
          MemberAccess to member matchId
             Type: uint256
             Source: "results[resultId].matchId"
            IndexAccess
               Type: struct Modicum.JobResult storage ref
               Source: "results[resultId]"
              Identifier results
                 Type: struct Modicum.JobResult storage ref[] storage ref
                 Source: "results"
              Identifier resultId
                 Type: uint256
                 Source: "resultId"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
      EmitStatement
         Source: "emit DebugString(\"result accepted\")"
        FunctionCall
           Type: tuple()
           Source: "DebugString(\"result accepted\")"
          Identifier DebugString
             Type: function (bytes32)
             Source: "DebugString"
          Literal, token: [no token] value: result accepted
             Type: literal_string "result accepted"
             Source: "\"result accepted\""
      Return
         Source: "return close(results[resultId].matchId)"
        FunctionCall
           Type: uint256
           Source: "close(results[resultId].matchId)"
          Identifier close
             Type: function (uint256) returns (uint256)
             Source: "close"
          MemberAccess to member matchId
             Type: uint256
             Source: "results[resultId].matchId"
            IndexAccess
               Type: struct Modicum.JobResult storage ref
               Source: "results[resultId]"
              Identifier results
                 Type: struct Modicum.JobResult storage ref[] storage ref
                 Source: "results"
              Identifier resultId
                 Type: uint256
                 Source: "resultId"
  FunctionDefinition "postMediationResult" - public
     Source: "function postMediationResult(\n        uint256 matchId,\n        uint256 jobOfferId,\n        ResultStatus status,\n        bytes32 uri,\n\n        uint256 hash,\n\n        uint256 instructionCount,\n        uint256 bandwidthUsage,\n\n        Verdict verdict,\n        Party faultyParty\n    ) public returns (Party) {\n        // require(matches[matchId].mediator == msg.sender, \"You are not this job's mediator\");\n        // require(mediationRequested[matchId] == true, \"JC did not request mediation for this match.\");\n        // require(mediated[matchId] == false, \"You have already mediated this match.\");\n\n        mediated[matchId] = true;\n\n        uint256 index = mediatorResults.push(MediatorResult({\n            status: status,\n            uri: uri,\n            matchId: matchId,\n            hash: hash,\n            instructionCount: instructionCount,\n            bandwidthUsage: bandwidthUsage,\n            verdict: verdict,\n            faultyParty: faultyParty\n        })) - 1;\n\n        uint256 cost = (instructionCount * mediators[msg.sender].instructionPrice +\n                        bandwidthUsage * mediators[msg.sender].bandwidthPrice) *\n                        resourceOffers[matches[matchId].resourceOffer].verificationCount;\n\n        // emit MediationResultPosted( index, faultyParty, verdict, matchId,\n        //                             status, uri, hash, instructionCount, bandwidthUsage, cost);\n\n        emit MediationResultPosted(matchId, msg.sender, index, faultyParty, verdict, status, uri, hash, instructionCount, cost);\n\n        punish(matchId, faultyParty);\n        //msg.sender.transfer(cost);\n        emit EtherTransferred(address(this), msg.sender, cost, EtherTransferCause.Mediation);\n        emit MatchClosed(matchId, cost);\n        return faultyParty;\n    }"
    ParameterList
       Source: "(\n        uint256 matchId,\n        uint256 jobOfferId,\n        ResultStatus status,\n        bytes32 uri,\n\n        uint256 hash,\n\n        uint256 instructionCount,\n        uint256 bandwidthUsage,\n\n        Verdict verdict,\n        Party faultyParty\n    )"
      VariableDeclaration "matchId"
         Type: uint256
         Source: "uint256 matchId"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "jobOfferId"
         Type: uint256
         Source: "uint256 jobOfferId"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "status"
         Type: enum Modicum.ResultStatus
         Source: "ResultStatus status"
        UserDefinedTypeName "ResultStatus"
           Source: "ResultStatus"
      VariableDeclaration "uri"
         Type: bytes32
         Source: "bytes32 uri"
        ElementaryTypeName bytes32
           Source: "bytes32"
      VariableDeclaration "hash"
         Type: uint256
         Source: "uint256 hash"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "instructionCount"
         Type: uint256
         Source: "uint256 instructionCount"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "bandwidthUsage"
         Type: uint256
         Source: "uint256 bandwidthUsage"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "verdict"
         Type: enum Modicum.Verdict
         Source: "Verdict verdict"
        UserDefinedTypeName "Verdict"
           Source: "Verdict"
      VariableDeclaration "faultyParty"
         Type: enum Modicum.Party
         Source: "Party faultyParty"
        UserDefinedTypeName "Party"
           Source: "Party"
    ParameterList
       Source: "(Party)"
      VariableDeclaration ""
         Type: enum Modicum.Party
         Source: "Party"
        UserDefinedTypeName "Party"
           Source: "Party"
    Block
       Source: "{\n        // require(matches[matchId].mediator == msg.sender, \"You are not this job's mediator\");\n        // require(mediationRequested[matchId] == true, \"JC did not request mediation for this match.\");\n        // require(mediated[matchId] == false, \"You have already mediated this match.\");\n\n        mediated[matchId] = true;\n\n        uint256 index = mediatorResults.push(MediatorResult({\n            status: status,\n            uri: uri,\n            matchId: matchId,\n            hash: hash,\n            instructionCount: instructionCount,\n            bandwidthUsage: bandwidthUsage,\n            verdict: verdict,\n            faultyParty: faultyParty\n        })) - 1;\n\n        uint256 cost = (instructionCount * mediators[msg.sender].instructionPrice +\n                        bandwidthUsage * mediators[msg.sender].bandwidthPrice) *\n                        resourceOffers[matches[matchId].resourceOffer].verificationCount;\n\n        // emit MediationResultPosted( index, faultyParty, verdict, matchId,\n        //                             status, uri, hash, instructionCount, bandwidthUsage, cost);\n\n        emit MediationResultPosted(matchId, msg.sender, index, faultyParty, verdict, status, uri, hash, instructionCount, cost);\n\n        punish(matchId, faultyParty);\n        //msg.sender.transfer(cost);\n        emit EtherTransferred(address(this), msg.sender, cost, EtherTransferCause.Mediation);\n        emit MatchClosed(matchId, cost);\n        return faultyParty;\n    }"
      ExpressionStatement
         Source: "mediated[matchId] = true"
        Assignment using operator =
           Type: bool
           Source: "mediated[matchId] = true"
          IndexAccess
             Type: bool
             Source: "mediated[matchId]"
            Identifier mediated
               Type: mapping(uint256 => bool)
               Source: "mediated"
            Identifier matchId
               Type: uint256
               Source: "matchId"
          Literal, token: true value: true
             Type: bool
             Source: "true"
      VariableDeclarationStatement
         Source: "uint256 index = mediatorResults.push(MediatorResult({\n            status: status,\n            uri: uri,\n            matchId: matchId,\n            hash: hash,\n            instructionCount: instructionCount,\n            bandwidthUsage: bandwidthUsage,\n            verdict: verdict,\n            faultyParty: faultyParty\n        })) - 1"
        VariableDeclaration "index"
           Type: uint256
           Source: "uint256 index"
          ElementaryTypeName uint256
             Source: "uint256"
        BinaryOperation using operator -
           Type: uint256
           Source: "mediatorResults.push(MediatorResult({\n            status: status,\n            uri: uri,\n            matchId: matchId,\n            hash: hash,\n            instructionCount: instructionCount,\n            bandwidthUsage: bandwidthUsage,\n            verdict: verdict,\n            faultyParty: faultyParty\n        })) - 1"
          FunctionCall
             Type: uint256
             Source: "mediatorResults.push(MediatorResult({\n            status: status,\n            uri: uri,\n            matchId: matchId,\n            hash: hash,\n            instructionCount: instructionCount,\n            bandwidthUsage: bandwidthUsage,\n            verdict: verdict,\n            faultyParty: faultyParty\n        }))"
            MemberAccess to member push
               Type: function (struct Modicum.MediatorResult storage ref) returns (uint256)
               Source: "mediatorResults.push"
              Identifier mediatorResults
                 Type: struct Modicum.MediatorResult storage ref[] storage ref
                 Source: "mediatorResults"
            FunctionCall
               Type: struct Modicum.MediatorResult memory
               Source: "MediatorResult({\n            status: status,\n            uri: uri,\n            matchId: matchId,\n            hash: hash,\n            instructionCount: instructionCount,\n            bandwidthUsage: bandwidthUsage,\n            verdict: verdict,\n            faultyParty: faultyParty\n        })"
              Identifier MediatorResult
                 Type: type(struct Modicum.MediatorResult storage pointer)
                 Source: "MediatorResult"
              Identifier status
                 Type: enum Modicum.ResultStatus
                 Source: "status"
              Identifier uri
                 Type: bytes32
                 Source: "uri"
              Identifier matchId
                 Type: uint256
                 Source: "matchId"
              Identifier hash
                 Type: uint256
                 Source: "hash"
              Identifier instructionCount
                 Type: uint256
                 Source: "instructionCount"
              Identifier bandwidthUsage
                 Type: uint256
                 Source: "bandwidthUsage"
              Identifier verdict
                 Type: enum Modicum.Verdict
                 Source: "verdict"
              Identifier faultyParty
                 Type: enum Modicum.Party
                 Source: "faultyParty"
          Literal, token: [no token] value: 1
             Type: int_const 1
             Source: "1"
      VariableDeclarationStatement
         Source: "uint256 cost = (instructionCount * mediators[msg.sender].instructionPrice +\n                        bandwidthUsage * mediators[msg.sender].bandwidthPrice) *\n                        resourceOffers[matches[matchId].resourceOffer].verificationCount"
        VariableDeclaration "cost"
           Type: uint256
           Source: "uint256 cost"
          ElementaryTypeName uint256
             Source: "uint256"
        BinaryOperation using operator *
           Type: uint256
           Source: "(instructionCount * mediators[msg.sender].instructionPrice +\n                        bandwidthUsage * mediators[msg.sender].bandwidthPrice) *\n                        resourceOffers[matches[matchId].resourceOffer].verificationCount"
          TupleExpression
             Type: uint256
             Source: "(instructionCount * mediators[msg.sender].instructionPrice +\n                        bandwidthUsage * mediators[msg.sender].bandwidthPrice)"
            BinaryOperation using operator +
               Type: uint256
               Source: "instructionCount * mediators[msg.sender].instructionPrice +\n                        bandwidthUsage * mediators[msg.sender].bandwidthPrice"
              BinaryOperation using operator *
                 Type: uint256
                 Source: "instructionCount * mediators[msg.sender].instructionPrice"
                Identifier instructionCount
                   Type: uint256
                   Source: "instructionCount"
                MemberAccess to member instructionPrice
                   Type: uint256
                   Source: "mediators[msg.sender].instructionPrice"
                  IndexAccess
                     Type: struct Modicum.Mediator storage ref
                     Source: "mediators[msg.sender]"
                    Identifier mediators
                       Type: mapping(address => struct Modicum.Mediator storage ref)
                       Source: "mediators"
                    MemberAccess to member sender
                       Type: address
                       Source: "msg.sender"
                      Identifier msg
                         Type: msg
                         Source: "msg"
              BinaryOperation using operator *
                 Type: uint256
                 Source: "bandwidthUsage * mediators[msg.sender].bandwidthPrice"
                Identifier bandwidthUsage
                   Type: uint256
                   Source: "bandwidthUsage"
                MemberAccess to member bandwidthPrice
                   Type: uint256
                   Source: "mediators[msg.sender].bandwidthPrice"
                  IndexAccess
                     Type: struct Modicum.Mediator storage ref
                     Source: "mediators[msg.sender]"
                    Identifier mediators
                       Type: mapping(address => struct Modicum.Mediator storage ref)
                       Source: "mediators"
                    MemberAccess to member sender
                       Type: address
                       Source: "msg.sender"
                      Identifier msg
                         Type: msg
                         Source: "msg"
          MemberAccess to member verificationCount
             Type: uint256
             Source: "resourceOffers[matches[matchId].resourceOffer].verificationCount"
            IndexAccess
               Type: struct Modicum.ResourceOffer storage ref
               Source: "resourceOffers[matches[matchId].resourceOffer]"
              Identifier resourceOffers
                 Type: struct Modicum.ResourceOffer storage ref[] storage ref
                 Source: "resourceOffers"
              MemberAccess to member resourceOffer
                 Type: uint256
                 Source: "matches[matchId].resourceOffer"
                IndexAccess
                   Type: struct Modicum.Match storage ref
                   Source: "matches[matchId]"
                  Identifier matches
                     Type: struct Modicum.Match storage ref[] storage ref
                     Source: "matches"
                  Identifier matchId
                     Type: uint256
                     Source: "matchId"
      EmitStatement
         Source: "emit MediationResultPosted(matchId, msg.sender, index, faultyParty, verdict, status, uri, hash, instructionCount, cost)"
        FunctionCall
           Type: tuple()
           Source: "MediationResultPosted(matchId, msg.sender, index, faultyParty, verdict, status, uri, hash, instructionCount, cost)"
          Identifier MediationResultPosted
             Type: function (uint256,address,uint256,enum Modicum.Party,enum Modicum.Verdict,enum Modicum.ResultStatus,bytes32,uint256,uint256,uint256)
             Source: "MediationResultPosted"
          Identifier matchId
             Type: uint256
             Source: "matchId"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          Identifier index
             Type: uint256
             Source: "index"
          Identifier faultyParty
             Type: enum Modicum.Party
             Source: "faultyParty"
          Identifier verdict
             Type: enum Modicum.Verdict
             Source: "verdict"
          Identifier status
             Type: enum Modicum.ResultStatus
             Source: "status"
          Identifier uri
             Type: bytes32
             Source: "uri"
          Identifier hash
             Type: uint256
             Source: "hash"
          Identifier instructionCount
             Type: uint256
             Source: "instructionCount"
          Identifier cost
             Type: uint256
             Source: "cost"
      ExpressionStatement
         Source: "punish(matchId, faultyParty)"
        FunctionCall
           Type: tuple()
           Source: "punish(matchId, faultyParty)"
          Identifier punish
             Type: function (uint256,enum Modicum.Party)
             Source: "punish"
          Identifier matchId
             Type: uint256
             Source: "matchId"
          Identifier faultyParty
             Type: enum Modicum.Party
             Source: "faultyParty"
      EmitStatement
         Source: "emit EtherTransferred(address(this), msg.sender, cost, EtherTransferCause.Mediation)"
        FunctionCall
           Type: tuple()
           Source: "EtherTransferred(address(this), msg.sender, cost, EtherTransferCause.Mediation)"
          Identifier EtherTransferred
             Type: function (address,address,uint256,enum Modicum.EtherTransferCause)
             Source: "EtherTransferred"
          FunctionCall
             Type: address
             Source: "address(this)"
            ElementaryTypeNameExpression address
               Type: type(address)
               Source: "address"
            Identifier this
               Type: contract Modicum
               Source: "this"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          Identifier cost
             Type: uint256
             Source: "cost"
          MemberAccess to member Mediation
             Type: enum Modicum.EtherTransferCause
             Source: "EtherTransferCause.Mediation"
            Identifier EtherTransferCause
               Type: type(enum Modicum.EtherTransferCause)
               Source: "EtherTransferCause"
      EmitStatement
         Source: "emit MatchClosed(matchId, cost)"
        FunctionCall
           Type: tuple()
           Source: "MatchClosed(matchId, cost)"
          Identifier MatchClosed
             Type: function (uint256,uint256)
             Source: "MatchClosed"
          Identifier matchId
             Type: uint256
             Source: "matchId"
          Identifier cost
             Type: uint256
             Source: "cost"
      Return
         Source: "return faultyParty"
        Identifier faultyParty
           Type: enum Modicum.Party
           Source: "faultyParty"
  FunctionDefinition "punish"
     Source: "function punish(uint256 matchId, Party faultyParty) private {\n        // require(isMatchClosed[matchId] == false, \"This match is already closed.\");\n        isMatchClosed[matchId] = true;\n\n        ResourceOffer memory ro = resourceOffers[matches[matchId].resourceOffer];\n        JobOfferPartOne memory jo = jobOffersPartOne[matches[matchId].jobOffer];\n\n        uint256 roDeposit = ro.depositValue;\n        uint256 joDeposit = jo.depositValue;\n\n        jo.depositValue = 0;\n        ro.depositValue = 0;\n\n        uint256 joValue = jo.bandwidthLimit * jo.bandwidthMaxPrice + jo.instructionLimit * jo.instructionMaxPrice;\n        uint256 roValue = ro.bandwidthCap * ro.bandwidthPrice + ro.instructionCap * ro.instructionPrice;\n\n        if (faultyParty == Party.JobCreator) {\n\n            //address(uint160(ro.resProvider)).transfer(roDeposit + roValue);\n            emit EtherTransferred(address(this), ro.resProvider, roDeposit + roValue, EtherTransferCause.Punishment);\n\n        } else if (faultyParty == Party.ResourceProvider) {\n\n            //address(uint160(jo.jobCreator)).transfer(joDeposit + joValue);\n            emit EtherTransferred(address(this), jo.jobCreator, joDeposit + joValue, EtherTransferCause.Punishment);\n        }\n    }"
    ParameterList
       Source: "(uint256 matchId, Party faultyParty)"
      VariableDeclaration "matchId"
         Type: uint256
         Source: "uint256 matchId"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "faultyParty"
         Type: enum Modicum.Party
         Source: "Party faultyParty"
        UserDefinedTypeName "Party"
           Source: "Party"
    ParameterList
       Source: ""
    Block
       Source: "{\n        // require(isMatchClosed[matchId] == false, \"This match is already closed.\");\n        isMatchClosed[matchId] = true;\n\n        ResourceOffer memory ro = resourceOffers[matches[matchId].resourceOffer];\n        JobOfferPartOne memory jo = jobOffersPartOne[matches[matchId].jobOffer];\n\n        uint256 roDeposit = ro.depositValue;\n        uint256 joDeposit = jo.depositValue;\n\n        jo.depositValue = 0;\n        ro.depositValue = 0;\n\n        uint256 joValue = jo.bandwidthLimit * jo.bandwidthMaxPrice + jo.instructionLimit * jo.instructionMaxPrice;\n        uint256 roValue = ro.bandwidthCap * ro.bandwidthPrice + ro.instructionCap * ro.instructionPrice;\n\n        if (faultyParty == Party.JobCreator) {\n\n            //address(uint160(ro.resProvider)).transfer(roDeposit + roValue);\n            emit EtherTransferred(address(this), ro.resProvider, roDeposit + roValue, EtherTransferCause.Punishment);\n\n        } else if (faultyParty == Party.ResourceProvider) {\n\n            //address(uint160(jo.jobCreator)).transfer(joDeposit + joValue);\n            emit EtherTransferred(address(this), jo.jobCreator, joDeposit + joValue, EtherTransferCause.Punishment);\n        }\n    }"
      ExpressionStatement
         Source: "isMatchClosed[matchId] = true"
        Assignment using operator =
           Type: bool
           Source: "isMatchClosed[matchId] = true"
          IndexAccess
             Type: bool
             Source: "isMatchClosed[matchId]"
            Identifier isMatchClosed
               Type: mapping(uint256 => bool)
               Source: "isMatchClosed"
            Identifier matchId
               Type: uint256
               Source: "matchId"
          Literal, token: true value: true
             Type: bool
             Source: "true"
      VariableDeclarationStatement
         Source: "ResourceOffer memory ro = resourceOffers[matches[matchId].resourceOffer]"
        VariableDeclaration "ro"
           Type: struct Modicum.ResourceOffer memory
           Source: "ResourceOffer memory ro"
          UserDefinedTypeName "ResourceOffer"
             Source: "ResourceOffer"
        IndexAccess
           Type: struct Modicum.ResourceOffer storage ref
           Source: "resourceOffers[matches[matchId].resourceOffer]"
          Identifier resourceOffers
             Type: struct Modicum.ResourceOffer storage ref[] storage ref
             Source: "resourceOffers"
          MemberAccess to member resourceOffer
             Type: uint256
             Source: "matches[matchId].resourceOffer"
            IndexAccess
               Type: struct Modicum.Match storage ref
               Source: "matches[matchId]"
              Identifier matches
                 Type: struct Modicum.Match storage ref[] storage ref
                 Source: "matches"
              Identifier matchId
                 Type: uint256
                 Source: "matchId"
      VariableDeclarationStatement
         Source: "JobOfferPartOne memory jo = jobOffersPartOne[matches[matchId].jobOffer]"
        VariableDeclaration "jo"
           Type: struct Modicum.JobOfferPartOne memory
           Source: "JobOfferPartOne memory jo"
          UserDefinedTypeName "JobOfferPartOne"
             Source: "JobOfferPartOne"
        IndexAccess
           Type: struct Modicum.JobOfferPartOne storage ref
           Source: "jobOffersPartOne[matches[matchId].jobOffer]"
          Identifier jobOffersPartOne
             Type: mapping(uint256 => struct Modicum.JobOfferPartOne storage ref)
             Source: "jobOffersPartOne"
          MemberAccess to member jobOffer
             Type: uint256
             Source: "matches[matchId].jobOffer"
            IndexAccess
               Type: struct Modicum.Match storage ref
               Source: "matches[matchId]"
              Identifier matches
                 Type: struct Modicum.Match storage ref[] storage ref
                 Source: "matches"
              Identifier matchId
                 Type: uint256
                 Source: "matchId"
      VariableDeclarationStatement
         Source: "uint256 roDeposit = ro.depositValue"
        VariableDeclaration "roDeposit"
           Type: uint256
           Source: "uint256 roDeposit"
          ElementaryTypeName uint256
             Source: "uint256"
        MemberAccess to member depositValue
           Type: uint256
           Source: "ro.depositValue"
          Identifier ro
             Type: struct Modicum.ResourceOffer memory
             Source: "ro"
      VariableDeclarationStatement
         Source: "uint256 joDeposit = jo.depositValue"
        VariableDeclaration "joDeposit"
           Type: uint256
           Source: "uint256 joDeposit"
          ElementaryTypeName uint256
             Source: "uint256"
        MemberAccess to member depositValue
           Type: uint256
           Source: "jo.depositValue"
          Identifier jo
             Type: struct Modicum.JobOfferPartOne memory
             Source: "jo"
      ExpressionStatement
         Source: "jo.depositValue = 0"
        Assignment using operator =
           Type: uint256
           Source: "jo.depositValue = 0"
          MemberAccess to member depositValue
             Type: uint256
             Source: "jo.depositValue"
            Identifier jo
               Type: struct Modicum.JobOfferPartOne memory
               Source: "jo"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
      ExpressionStatement
         Source: "ro.depositValue = 0"
        Assignment using operator =
           Type: uint256
           Source: "ro.depositValue = 0"
          MemberAccess to member depositValue
             Type: uint256
             Source: "ro.depositValue"
            Identifier ro
               Type: struct Modicum.ResourceOffer memory
               Source: "ro"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
      VariableDeclarationStatement
         Source: "uint256 joValue = jo.bandwidthLimit * jo.bandwidthMaxPrice + jo.instructionLimit * jo.instructionMaxPrice"
        VariableDeclaration "joValue"
           Type: uint256
           Source: "uint256 joValue"
          ElementaryTypeName uint256
             Source: "uint256"
        BinaryOperation using operator +
           Type: uint256
           Source: "jo.bandwidthLimit * jo.bandwidthMaxPrice + jo.instructionLimit * jo.instructionMaxPrice"
          BinaryOperation using operator *
             Type: uint256
             Source: "jo.bandwidthLimit * jo.bandwidthMaxPrice"
            MemberAccess to member bandwidthLimit
               Type: uint256
               Source: "jo.bandwidthLimit"
              Identifier jo
                 Type: struct Modicum.JobOfferPartOne memory
                 Source: "jo"
            MemberAccess to member bandwidthMaxPrice
               Type: uint256
               Source: "jo.bandwidthMaxPrice"
              Identifier jo
                 Type: struct Modicum.JobOfferPartOne memory
                 Source: "jo"
          BinaryOperation using operator *
             Type: uint256
             Source: "jo.instructionLimit * jo.instructionMaxPrice"
            MemberAccess to member instructionLimit
               Type: uint256
               Source: "jo.instructionLimit"
              Identifier jo
                 Type: struct Modicum.JobOfferPartOne memory
                 Source: "jo"
            MemberAccess to member instructionMaxPrice
               Type: uint256
               Source: "jo.instructionMaxPrice"
              Identifier jo
                 Type: struct Modicum.JobOfferPartOne memory
                 Source: "jo"
      VariableDeclarationStatement
         Source: "uint256 roValue = ro.bandwidthCap * ro.bandwidthPrice + ro.instructionCap * ro.instructionPrice"
        VariableDeclaration "roValue"
           Type: uint256
           Source: "uint256 roValue"
          ElementaryTypeName uint256
             Source: "uint256"
        BinaryOperation using operator +
           Type: uint256
           Source: "ro.bandwidthCap * ro.bandwidthPrice + ro.instructionCap * ro.instructionPrice"
          BinaryOperation using operator *
             Type: uint256
             Source: "ro.bandwidthCap * ro.bandwidthPrice"
            MemberAccess to member bandwidthCap
               Type: uint256
               Source: "ro.bandwidthCap"
              Identifier ro
                 Type: struct Modicum.ResourceOffer memory
                 Source: "ro"
            MemberAccess to member bandwidthPrice
               Type: uint256
               Source: "ro.bandwidthPrice"
              Identifier ro
                 Type: struct Modicum.ResourceOffer memory
                 Source: "ro"
          BinaryOperation using operator *
             Type: uint256
             Source: "ro.instructionCap * ro.instructionPrice"
            MemberAccess to member instructionCap
               Type: uint256
               Source: "ro.instructionCap"
              Identifier ro
                 Type: struct Modicum.ResourceOffer memory
                 Source: "ro"
            MemberAccess to member instructionPrice
               Type: uint256
               Source: "ro.instructionPrice"
              Identifier ro
                 Type: struct Modicum.ResourceOffer memory
                 Source: "ro"
      IfStatement
         Source: "if (faultyParty == Party.JobCreator) {\n\n            //address(uint160(ro.resProvider)).transfer(roDeposit + roValue);\n            emit EtherTransferred(address(this), ro.resProvider, roDeposit + roValue, EtherTransferCause.Punishment);\n\n        } else if (faultyParty == Party.ResourceProvider) {\n\n            //address(uint160(jo.jobCreator)).transfer(joDeposit + joValue);\n            emit EtherTransferred(address(this), jo.jobCreator, joDeposit + joValue, EtherTransferCause.Punishment);\n        }"
        BinaryOperation using operator ==
           Type: bool
           Source: "faultyParty == Party.JobCreator"
          Identifier faultyParty
             Type: enum Modicum.Party
             Source: "faultyParty"
          MemberAccess to member JobCreator
             Type: enum Modicum.Party
             Source: "Party.JobCreator"
            Identifier Party
               Type: type(enum Modicum.Party)
               Source: "Party"
        Block
           Source: "{\n\n            //address(uint160(ro.resProvider)).transfer(roDeposit + roValue);\n            emit EtherTransferred(address(this), ro.resProvider, roDeposit + roValue, EtherTransferCause.Punishment);\n\n        }"
          EmitStatement
             Source: "emit EtherTransferred(address(this), ro.resProvider, roDeposit + roValue, EtherTransferCause.Punishment)"
            FunctionCall
               Type: tuple()
               Source: "EtherTransferred(address(this), ro.resProvider, roDeposit + roValue, EtherTransferCause.Punishment)"
              Identifier EtherTransferred
                 Type: function (address,address,uint256,enum Modicum.EtherTransferCause)
                 Source: "EtherTransferred"
              FunctionCall
                 Type: address
                 Source: "address(this)"
                ElementaryTypeNameExpression address
                   Type: type(address)
                   Source: "address"
                Identifier this
                   Type: contract Modicum
                   Source: "this"
              MemberAccess to member resProvider
                 Type: address
                 Source: "ro.resProvider"
                Identifier ro
                   Type: struct Modicum.ResourceOffer memory
                   Source: "ro"
              BinaryOperation using operator +
                 Type: uint256
                 Source: "roDeposit + roValue"
                Identifier roDeposit
                   Type: uint256
                   Source: "roDeposit"
                Identifier roValue
                   Type: uint256
                   Source: "roValue"
              MemberAccess to member Punishment
                 Type: enum Modicum.EtherTransferCause
                 Source: "EtherTransferCause.Punishment"
                Identifier EtherTransferCause
                   Type: type(enum Modicum.EtherTransferCause)
                   Source: "EtherTransferCause"
        IfStatement
           Source: "if (faultyParty == Party.ResourceProvider) {\n\n            //address(uint160(jo.jobCreator)).transfer(joDeposit + joValue);\n            emit EtherTransferred(address(this), jo.jobCreator, joDeposit + joValue, EtherTransferCause.Punishment);\n        }"
          BinaryOperation using operator ==
             Type: bool
             Source: "faultyParty == Party.ResourceProvider"
            Identifier faultyParty
               Type: enum Modicum.Party
               Source: "faultyParty"
            MemberAccess to member ResourceProvider
               Type: enum Modicum.Party
               Source: "Party.ResourceProvider"
              Identifier Party
                 Type: type(enum Modicum.Party)
                 Source: "Party"
          Block
             Source: "{\n\n            //address(uint160(jo.jobCreator)).transfer(joDeposit + joValue);\n            emit EtherTransferred(address(this), jo.jobCreator, joDeposit + joValue, EtherTransferCause.Punishment);\n        }"
            EmitStatement
               Source: "emit EtherTransferred(address(this), jo.jobCreator, joDeposit + joValue, EtherTransferCause.Punishment)"
              FunctionCall
                 Type: tuple()
                 Source: "EtherTransferred(address(this), jo.jobCreator, joDeposit + joValue, EtherTransferCause.Punishment)"
                Identifier EtherTransferred
                   Type: function (address,address,uint256,enum Modicum.EtherTransferCause)
                   Source: "EtherTransferred"
                FunctionCall
                   Type: address
                   Source: "address(this)"
                  ElementaryTypeNameExpression address
                     Type: type(address)
                     Source: "address"
                  Identifier this
                     Type: contract Modicum
                     Source: "this"
                MemberAccess to member jobCreator
                   Type: address
                   Source: "jo.jobCreator"
                  Identifier jo
                     Type: struct Modicum.JobOfferPartOne memory
                     Source: "jo"
                BinaryOperation using operator +
                   Type: uint256
                   Source: "joDeposit + joValue"
                  Identifier joDeposit
                     Type: uint256
                     Source: "joDeposit"
                  Identifier joValue
                     Type: uint256
                     Source: "joValue"
                MemberAccess to member Punishment
                   Type: enum Modicum.EtherTransferCause
                   Source: "EtherTransferCause.Punishment"
                  Identifier EtherTransferCause
                     Type: type(enum Modicum.EtherTransferCause)
                     Source: "EtherTransferCause"
  FunctionDefinition "close"
     Source: "function close(uint256 matchId) private returns (uint256) {\n        //require(results[matchToResult[matchId]].reacted == Reaction.Accepted,\n        //    \"The job is not done yet.\");\n\n        JobResult memory r = results[matchToResult[matchId]];\n        ResourceOffer memory ro = resourceOffers[matches[matchId].resourceOffer];\n        JobOfferPartOne memory jo = jobOffersPartOne[matches[matchId].jobOffer];\n        address m = matches[matchId].mediator;\n\n        //require(isMatchClosed[matchId] == false, \"This match is already closed.\");\n        isMatchClosed[matchId] = true;\n\n        uint256 cost = r.instructionCount * ro.instructionPrice +\n            r.bandwidthUsage * ro.bandwidthPrice;\n\n        uint256 mediatorAvailabilityIncentive = mediators[m].availabilityValue;\n\n        uint256 jo_deposit = jo.depositValue;\n        uint256 ro_deposit = ro.depositValue;\n\n        jo.depositValue = 0;\n        ro.depositValue = 0;\n\n        //address(uint160(jo.jobCreator)).transfer(jo_deposit - cost - jo.matchIncentive - mediatorAvailabilityIncentive);\n        //address(uint160(ro.resProvider)).transfer(jo_deposit + cost - ro.matchIncentive - mediatorAvailabilityIncentive);\n        //address(uint160(m)).transfer(2 * mediatorAvailabilityIncentive);\n\n\n        emit MatchClosed(matchId, cost);\n        emit EtherTransferred(address(this), jo.jobCreator, jo_deposit - cost, EtherTransferCause.FinishingJob);\n        emit EtherTransferred(address(this), ro.resProvider, ro_deposit + cost, EtherTransferCause.FinishingResource);\n        emit EtherTransferred(address(this), m, 2 * mediatorAvailabilityIncentive, EtherTransferCause.MediatorAvailability);\n\n        return cost;\n    }"
    ParameterList
       Source: "(uint256 matchId)"
      VariableDeclaration "matchId"
         Type: uint256
         Source: "uint256 matchId"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: "(uint256)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\n        //require(results[matchToResult[matchId]].reacted == Reaction.Accepted,\n        //    \"The job is not done yet.\");\n\n        JobResult memory r = results[matchToResult[matchId]];\n        ResourceOffer memory ro = resourceOffers[matches[matchId].resourceOffer];\n        JobOfferPartOne memory jo = jobOffersPartOne[matches[matchId].jobOffer];\n        address m = matches[matchId].mediator;\n\n        //require(isMatchClosed[matchId] == false, \"This match is already closed.\");\n        isMatchClosed[matchId] = true;\n\n        uint256 cost = r.instructionCount * ro.instructionPrice +\n            r.bandwidthUsage * ro.bandwidthPrice;\n\n        uint256 mediatorAvailabilityIncentive = mediators[m].availabilityValue;\n\n        uint256 jo_deposit = jo.depositValue;\n        uint256 ro_deposit = ro.depositValue;\n\n        jo.depositValue = 0;\n        ro.depositValue = 0;\n\n        //address(uint160(jo.jobCreator)).transfer(jo_deposit - cost - jo.matchIncentive - mediatorAvailabilityIncentive);\n        //address(uint160(ro.resProvider)).transfer(jo_deposit + cost - ro.matchIncentive - mediatorAvailabilityIncentive);\n        //address(uint160(m)).transfer(2 * mediatorAvailabilityIncentive);\n\n\n        emit MatchClosed(matchId, cost);\n        emit EtherTransferred(address(this), jo.jobCreator, jo_deposit - cost, EtherTransferCause.FinishingJob);\n        emit EtherTransferred(address(this), ro.resProvider, ro_deposit + cost, EtherTransferCause.FinishingResource);\n        emit EtherTransferred(address(this), m, 2 * mediatorAvailabilityIncentive, EtherTransferCause.MediatorAvailability);\n\n        return cost;\n    }"
      VariableDeclarationStatement
         Source: "JobResult memory r = results[matchToResult[matchId]]"
        VariableDeclaration "r"
           Type: struct Modicum.JobResult memory
           Source: "JobResult memory r"
          UserDefinedTypeName "JobResult"
             Source: "JobResult"
        IndexAccess
           Type: struct Modicum.JobResult storage ref
           Source: "results[matchToResult[matchId]]"
          Identifier results
             Type: struct Modicum.JobResult storage ref[] storage ref
             Source: "results"
          IndexAccess
             Type: uint256
             Source: "matchToResult[matchId]"
            Identifier matchToResult
               Type: mapping(uint256 => uint256)
               Source: "matchToResult"
            Identifier matchId
               Type: uint256
               Source: "matchId"
      VariableDeclarationStatement
         Source: "ResourceOffer memory ro = resourceOffers[matches[matchId].resourceOffer]"
        VariableDeclaration "ro"
           Type: struct Modicum.ResourceOffer memory
           Source: "ResourceOffer memory ro"
          UserDefinedTypeName "ResourceOffer"
             Source: "ResourceOffer"
        IndexAccess
           Type: struct Modicum.ResourceOffer storage ref
           Source: "resourceOffers[matches[matchId].resourceOffer]"
          Identifier resourceOffers
             Type: struct Modicum.ResourceOffer storage ref[] storage ref
             Source: "resourceOffers"
          MemberAccess to member resourceOffer
             Type: uint256
             Source: "matches[matchId].resourceOffer"
            IndexAccess
               Type: struct Modicum.Match storage ref
               Source: "matches[matchId]"
              Identifier matches
                 Type: struct Modicum.Match storage ref[] storage ref
                 Source: "matches"
              Identifier matchId
                 Type: uint256
                 Source: "matchId"
      VariableDeclarationStatement
         Source: "JobOfferPartOne memory jo = jobOffersPartOne[matches[matchId].jobOffer]"
        VariableDeclaration "jo"
           Type: struct Modicum.JobOfferPartOne memory
           Source: "JobOfferPartOne memory jo"
          UserDefinedTypeName "JobOfferPartOne"
             Source: "JobOfferPartOne"
        IndexAccess
           Type: struct Modicum.JobOfferPartOne storage ref
           Source: "jobOffersPartOne[matches[matchId].jobOffer]"
          Identifier jobOffersPartOne
             Type: mapping(uint256 => struct Modicum.JobOfferPartOne storage ref)
             Source: "jobOffersPartOne"
          MemberAccess to member jobOffer
             Type: uint256
             Source: "matches[matchId].jobOffer"
            IndexAccess
               Type: struct Modicum.Match storage ref
               Source: "matches[matchId]"
              Identifier matches
                 Type: struct Modicum.Match storage ref[] storage ref
                 Source: "matches"
              Identifier matchId
                 Type: uint256
                 Source: "matchId"
      VariableDeclarationStatement
         Source: "address m = matches[matchId].mediator"
        VariableDeclaration "m"
           Type: address
           Source: "address m"
          ElementaryTypeName address
             Source: "address"
        MemberAccess to member mediator
           Type: address
           Source: "matches[matchId].mediator"
          IndexAccess
             Type: struct Modicum.Match storage ref
             Source: "matches[matchId]"
            Identifier matches
               Type: struct Modicum.Match storage ref[] storage ref
               Source: "matches"
            Identifier matchId
               Type: uint256
               Source: "matchId"
      ExpressionStatement
         Source: "isMatchClosed[matchId] = true"
        Assignment using operator =
           Type: bool
           Source: "isMatchClosed[matchId] = true"
          IndexAccess
             Type: bool
             Source: "isMatchClosed[matchId]"
            Identifier isMatchClosed
               Type: mapping(uint256 => bool)
               Source: "isMatchClosed"
            Identifier matchId
               Type: uint256
               Source: "matchId"
          Literal, token: true value: true
             Type: bool
             Source: "true"
      VariableDeclarationStatement
         Source: "uint256 cost = r.instructionCount * ro.instructionPrice +\n            r.bandwidthUsage * ro.bandwidthPrice"
        VariableDeclaration "cost"
           Type: uint256
           Source: "uint256 cost"
          ElementaryTypeName uint256
             Source: "uint256"
        BinaryOperation using operator +
           Type: uint256
           Source: "r.instructionCount * ro.instructionPrice +\n            r.bandwidthUsage * ro.bandwidthPrice"
          BinaryOperation using operator *
             Type: uint256
             Source: "r.instructionCount * ro.instructionPrice"
            MemberAccess to member instructionCount
               Type: uint256
               Source: "r.instructionCount"
              Identifier r
                 Type: struct Modicum.JobResult memory
                 Source: "r"
            MemberAccess to member instructionPrice
               Type: uint256
               Source: "ro.instructionPrice"
              Identifier ro
                 Type: struct Modicum.ResourceOffer memory
                 Source: "ro"
          BinaryOperation using operator *
             Type: uint256
             Source: "r.bandwidthUsage * ro.bandwidthPrice"
            MemberAccess to member bandwidthUsage
               Type: uint256
               Source: "r.bandwidthUsage"
              Identifier r
                 Type: struct Modicum.JobResult memory
                 Source: "r"
            MemberAccess to member bandwidthPrice
               Type: uint256
               Source: "ro.bandwidthPrice"
              Identifier ro
                 Type: struct Modicum.ResourceOffer memory
                 Source: "ro"
      VariableDeclarationStatement
         Source: "uint256 mediatorAvailabilityIncentive = mediators[m].availabilityValue"
        VariableDeclaration "mediatorAvailabilityIncentive"
           Type: uint256
           Source: "uint256 mediatorAvailabilityIncentive"
          ElementaryTypeName uint256
             Source: "uint256"
        MemberAccess to member availabilityValue
           Type: uint256
           Source: "mediators[m].availabilityValue"
          IndexAccess
             Type: struct Modicum.Mediator storage ref
             Source: "mediators[m]"
            Identifier mediators
               Type: mapping(address => struct Modicum.Mediator storage ref)
               Source: "mediators"
            Identifier m
               Type: address
               Source: "m"
      VariableDeclarationStatement
         Source: "uint256 jo_deposit = jo.depositValue"
        VariableDeclaration "jo_deposit"
           Type: uint256
           Source: "uint256 jo_deposit"
          ElementaryTypeName uint256
             Source: "uint256"
        MemberAccess to member depositValue
           Type: uint256
           Source: "jo.depositValue"
          Identifier jo
             Type: struct Modicum.JobOfferPartOne memory
             Source: "jo"
      VariableDeclarationStatement
         Source: "uint256 ro_deposit = ro.depositValue"
        VariableDeclaration "ro_deposit"
           Type: uint256
           Source: "uint256 ro_deposit"
          ElementaryTypeName uint256
             Source: "uint256"
        MemberAccess to member depositValue
           Type: uint256
           Source: "ro.depositValue"
          Identifier ro
             Type: struct Modicum.ResourceOffer memory
             Source: "ro"
      ExpressionStatement
         Source: "jo.depositValue = 0"
        Assignment using operator =
           Type: uint256
           Source: "jo.depositValue = 0"
          MemberAccess to member depositValue
             Type: uint256
             Source: "jo.depositValue"
            Identifier jo
               Type: struct Modicum.JobOfferPartOne memory
               Source: "jo"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
      ExpressionStatement
         Source: "ro.depositValue = 0"
        Assignment using operator =
           Type: uint256
           Source: "ro.depositValue = 0"
          MemberAccess to member depositValue
             Type: uint256
             Source: "ro.depositValue"
            Identifier ro
               Type: struct Modicum.ResourceOffer memory
               Source: "ro"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
      EmitStatement
         Source: "emit MatchClosed(matchId, cost)"
        FunctionCall
           Type: tuple()
           Source: "MatchClosed(matchId, cost)"
          Identifier MatchClosed
             Type: function (uint256,uint256)
             Source: "MatchClosed"
          Identifier matchId
             Type: uint256
             Source: "matchId"
          Identifier cost
             Type: uint256
             Source: "cost"
      EmitStatement
         Source: "emit EtherTransferred(address(this), jo.jobCreator, jo_deposit - cost, EtherTransferCause.FinishingJob)"
        FunctionCall
           Type: tuple()
           Source: "EtherTransferred(address(this), jo.jobCreator, jo_deposit - cost, EtherTransferCause.FinishingJob)"
          Identifier EtherTransferred
             Type: function (address,address,uint256,enum Modicum.EtherTransferCause)
             Source: "EtherTransferred"
          FunctionCall
             Type: address
             Source: "address(this)"
            ElementaryTypeNameExpression address
               Type: type(address)
               Source: "address"
            Identifier this
               Type: contract Modicum
               Source: "this"
          MemberAccess to member jobCreator
             Type: address
             Source: "jo.jobCreator"
            Identifier jo
               Type: struct Modicum.JobOfferPartOne memory
               Source: "jo"
          BinaryOperation using operator -
             Type: uint256
             Source: "jo_deposit - cost"
            Identifier jo_deposit
               Type: uint256
               Source: "jo_deposit"
            Identifier cost
               Type: uint256
               Source: "cost"
          MemberAccess to member FinishingJob
             Type: enum Modicum.EtherTransferCause
             Source: "EtherTransferCause.FinishingJob"
            Identifier EtherTransferCause
               Type: type(enum Modicum.EtherTransferCause)
               Source: "EtherTransferCause"
      EmitStatement
         Source: "emit EtherTransferred(address(this), ro.resProvider, ro_deposit + cost, EtherTransferCause.FinishingResource)"
        FunctionCall
           Type: tuple()
           Source: "EtherTransferred(address(this), ro.resProvider, ro_deposit + cost, EtherTransferCause.FinishingResource)"
          Identifier EtherTransferred
             Type: function (address,address,uint256,enum Modicum.EtherTransferCause)
             Source: "EtherTransferred"
          FunctionCall
             Type: address
             Source: "address(this)"
            ElementaryTypeNameExpression address
               Type: type(address)
               Source: "address"
            Identifier this
               Type: contract Modicum
               Source: "this"
          MemberAccess to member resProvider
             Type: address
             Source: "ro.resProvider"
            Identifier ro
               Type: struct Modicum.ResourceOffer memory
               Source: "ro"
          BinaryOperation using operator +
             Type: uint256
             Source: "ro_deposit + cost"
            Identifier ro_deposit
               Type: uint256
               Source: "ro_deposit"
            Identifier cost
               Type: uint256
               Source: "cost"
          MemberAccess to member FinishingResource
             Type: enum Modicum.EtherTransferCause
             Source: "EtherTransferCause.FinishingResource"
            Identifier EtherTransferCause
               Type: type(enum Modicum.EtherTransferCause)
               Source: "EtherTransferCause"
      EmitStatement
         Source: "emit EtherTransferred(address(this), m, 2 * mediatorAvailabilityIncentive, EtherTransferCause.MediatorAvailability)"
        FunctionCall
           Type: tuple()
           Source: "EtherTransferred(address(this), m, 2 * mediatorAvailabilityIncentive, EtherTransferCause.MediatorAvailability)"
          Identifier EtherTransferred
             Type: function (address,address,uint256,enum Modicum.EtherTransferCause)
             Source: "EtherTransferred"
          FunctionCall
             Type: address
             Source: "address(this)"
            ElementaryTypeNameExpression address
               Type: type(address)
               Source: "address"
            Identifier this
               Type: contract Modicum
               Source: "this"
          Identifier m
             Type: address
             Source: "m"
          BinaryOperation using operator *
             Type: uint256
             Source: "2 * mediatorAvailabilityIncentive"
            Literal, token: [no token] value: 2
               Type: int_const 2
               Source: "2"
            Identifier mediatorAvailabilityIncentive
               Type: uint256
               Source: "mediatorAvailabilityIncentive"
          MemberAccess to member MediatorAvailability
             Type: enum Modicum.EtherTransferCause
             Source: "EtherTransferCause.MediatorAvailability"
            Identifier EtherTransferCause
               Type: type(enum Modicum.EtherTransferCause)
               Source: "EtherTransferCause"
      Return
         Source: "return cost"
        Identifier cost
           Type: uint256
           Source: "cost"
  FunctionDefinition "timeout" - public
     Source: "function timeout(uint256 matchId, uint256 jobOfferId) public {\n        // require(jobOffersPartOne[matches[matchId].jobOffer].jobCreator == msg.sender,\n        //     \"You cannot make a timeout on this offer\");\n        // require(jobOffersPartOne[matches[matchId].jobOffer].completionDeadline < now,\n        //     \"RP has more time to finish this job\");\n        // require(isMatchClosed[matchId] == false,\n        //     \"This match is closed.\");\n\n        punish(matchId, Party.ResourceProvider);\n    }"
    ParameterList
       Source: "(uint256 matchId, uint256 jobOfferId)"
      VariableDeclaration "matchId"
         Type: uint256
         Source: "uint256 matchId"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "jobOfferId"
         Type: uint256
         Source: "uint256 jobOfferId"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: ""
    Block
       Source: "{\n        // require(jobOffersPartOne[matches[matchId].jobOffer].jobCreator == msg.sender,\n        //     \"You cannot make a timeout on this offer\");\n        // require(jobOffersPartOne[matches[matchId].jobOffer].completionDeadline < now,\n        //     \"RP has more time to finish this job\");\n        // require(isMatchClosed[matchId] == false,\n        //     \"This match is closed.\");\n\n        punish(matchId, Party.ResourceProvider);\n    }"
      ExpressionStatement
         Source: "punish(matchId, Party.ResourceProvider)"
        FunctionCall
           Type: tuple()
           Source: "punish(matchId, Party.ResourceProvider)"
          Identifier punish
             Type: function (uint256,enum Modicum.Party)
             Source: "punish"
          Identifier matchId
             Type: uint256
             Source: "matchId"
          MemberAccess to member ResourceProvider
             Type: enum Modicum.Party
             Source: "Party.ResourceProvider"
            Identifier Party
               Type: type(enum Modicum.Party)
               Source: "Party"
  FunctionDefinition "receiveValues" - public
     Source: "function receiveValues(address toAccount, uint256 amount) public administrative {\n        address(uint160(toAccount)).transfer(amount);\n    }"
    ParameterList
       Source: "(address toAccount, uint256 amount)"
      VariableDeclaration "toAccount"
         Type: address
         Source: "address toAccount"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "amount"
         Type: uint256
         Source: "uint256 amount"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: ""
    ModifierInvocation "administrative"
       Source: "administrative"
      Identifier administrative
         Type: modifier ()
         Source: "administrative"
    Block
       Source: "{\n        address(uint160(toAccount)).transfer(amount);\n    }"
      ExpressionStatement
         Source: "address(uint160(toAccount)).transfer(amount)"
        FunctionCall
           Type: tuple()
           Source: "address(uint160(toAccount)).transfer(amount)"
          MemberAccess to member transfer
             Type: function (uint256)
             Source: "address(uint160(toAccount)).transfer"
            FunctionCall
               Type: address
               Source: "address(uint160(toAccount))"
              ElementaryTypeNameExpression address
                 Type: type(address)
                 Source: "address"
              FunctionCall
                 Type: uint160
                 Source: "uint160(toAccount)"
                ElementaryTypeNameExpression uint160
                   Type: type(uint160)
                   Source: "uint160"
                Identifier toAccount
                   Type: address
                   Source: "toAccount"
          Identifier amount
             Type: uint256
             Source: "amount"
