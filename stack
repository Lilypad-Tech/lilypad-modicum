#!/bin/bash
set -euo pipefail
IFS=$'\n\t'

declare -ga GLOBAL_ARGS
GLOBAL_ARGS=( "$@" )

export DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
export DOCKER_REGISTRY=${DOCKER_REGISTRY:="quay.io/lilypad"}
export GCP_ZONE=${GCP_ZONE:="us-central1-a"}
export GCP_NODE_NAME=${GCP_NODE_NAME:="bravo-testnet-vm-0"}
export TRIM=${TRIM:="development"}
# this means -d or -ti --rm
# bash sucks sometimes because we can't just pass these as a single string
# server or cli
export CONTAINER_MODE=${CONTAINER_MODE:="server"}
# we expect the contract address to be set in the environment
# if we are production trim this will be handled by the deployment
export CONTRACT_ADDRESS=${CONTRACT_ADDRESS:=""}
export DATA_DIRECTORY=${DATA_DIRECTORY:="/tmp/geth"}
export IMAGE_BASE=${IMAGE_BASE:="lilypad"}
export IMAGE_HARDHAT=${IMAGE_HARDHAT:="${IMAGE_BASE}-hardhat"}
export DEPLOYMENT=${DEPLOYMENT:="localgeth"}
export RPC_URL=${RPC_URL:="http://geth:8545"}

export VERSION=${VERSION:="$(cd $DIR; git rev-parse --short HEAD)"}

export IMAGE_MODICUM_NAME=${IMAGE_MODICUM_NAME:="${IMAGE_BASE}-modicum"}
export IMAGE_RESOURCE_PROVIDER_NAME=${IMAGE_RESOURCE_PROVIDER_NAME:="${IMAGE_BASE}-resource-provider"}
export IMAGE_MEDIATOR_NAME=${IMAGE_MEDIATOR_NAME:="${IMAGE_BASE}-mediator"}

export IMAGE_MODICUM="${DOCKER_REGISTRY}/${IMAGE_MODICUM_NAME}:${VERSION}"
export IMAGE_RESOURCE_PROVIDER="${DOCKER_REGISTRY}/${IMAGE_RESOURCE_PROVIDER_NAME}:${VERSION}"
export IMAGE_MEDIATOR="${DOCKER_REGISTRY}/${IMAGE_MEDIATOR_NAME}:${VERSION}"

export LILYPAD_NODE_FLAGS=""

function gSSH() {
  gcloud compute ssh --quiet --zone=$GCP_ZONE $GCP_NODE_NAME -- sudo $*
}

function gSCP() {
  gcloud compute scp --quiet --zone=$GCP_ZONE $1 $GCP_NODE_NAME:$2
}

function upload-stack() {
  gSCP ./stack ./stack
}

function build-modicum() {
  docker build -t $IMAGE_MODICUM --target modicum .
}

function build-resource-provider() {
  docker build -t $IMAGE_RESOURCE_PROVIDER --target resource-provider .
}

function build-mediator() {
  docker build -t $IMAGE_MEDIATOR --target mediator .
}

function build-hardhat() {
  docker build -t $IMAGE_HARDHAT src/js
}

function version() {
  echo $VERSION
}

function build() {
  build-modicum
  build-resource-provider
  build-mediator
  build-hardhat
}

function push-images() {
  docker push $IMAGE_MODICUM
  docker push $IMAGE_RESOURCE_PROVIDER
  docker push $IMAGE_MEDIATOR
}

function contract-address() {
  if [[ "$TRIM" == "development" ]]; then
    cat "src/js/deployments/${DEPLOYMENT}/Modicum.json" | jq -r .address
  elif [[ "$TRIM" == "production" ]]; then
    echo $CONTRACT_ADDRESS
  elif [[ "$TRIM" == "production-client" ]]; then
    echo $CONTRACT_ADDRESS
  fi  
}

function hardhat() {
  docker run -ti --rm \
    --name geth \
    --network modicum \
    -p 8545:8545 \
    -v $DIR/src/js/deployments:/app/deployments \
    -v $DIR/src/js/contracts:/app/contracts \
    -v $DIR/src/js/scripts:/app/scripts \
    $IMAGE_HARDHAT npx hardhat node --hostname 0.0.0.0 --port 8545
}

function hardhat-balances() {
  docker exec geth node scripts/show-balances.js
}

function geth() {
  docker network ls | grep modicum || docker network create modicum
  docker run -d --restart always \
    --name geth \
    --network modicum \
    -p 8545:8545 \
    -v ${DATA_DIRECTORY}:/data/geth \
    ethereum/client-go \
      --datadir /data/geth \
      --dev --http \
      --http.api web3,eth,net \
      --http.addr 0.0.0.0 \
      --http.corsdomain '*' \
      --http.port 8545 \
      --http.vhosts '*'
}

function geth-command() {
  docker exec -ti geth geth --exec "$@" attach /data/geth/geth.ipc
}

function geth-cli() {
  docker exec -ti geth geth attach /data/geth/geth.ipc
}

function geth-balance() {
  address="$1"
  # check if address is defined
  if [[ -z "$address" ]]; then
    echo >&2 "address must be set"
    exit 1
  fi
  geth-command "eth.getBalance(\"${address}\")/1e18"
}

function toWei() {
  amount="$1"
  # check if address is defined
  if [[ -z "$amount" ]]; then
    echo >&2 "amount must be set"
    exit 1
  fi
  geth-command "web3.toWei($amount, \"ether\")"
}

# fund from given account with ALL the money
function geth-transfer() {
  from="$1"
  to="$2"
  amount="$3"
  # check if address is defined
  if [[ -z "$from" ]]; then
    echo >&2 "from must be set"
    exit 1
  fi
  if [[ -z "$to" ]]; then
    echo >&2 "to must be set"
    exit 1
  fi
  if [[ -z "$amount" ]]; then
    echo >&2 "amount must be set"
    exit 1
  fi
  geth-command "eth.sendTransaction({from: \"${from}\", to: \"${to}\", value: ${amount}})"
}


# fund the given account with ALL the money from coinbase
function geth-fund-admin() {
  address="$1"
  # check if address is defined
  if [[ -z "$address" ]]; then
    echo >&2 "address must be set"
    exit 1
  fi
  geth-command "eth.sendTransaction({from: eth.coinbase, to: \"${address}\", value: eth.getBalance(eth.coinbase)})"
}


function coinbase() {
  geth-command "eth.coinbase"
}

# this means run ipfs, bacalhau and the modicum resource provider
# in the same service - it is what nodes will run on their hardware
#
# NB: Bind-mounting the code is debug trim, take this out for prod
function lilypad-node() {
  if [[ -z "$LILYPAD_NODE_IMAGE" ]]; then
    echo >&2 "LILYPAD_NODE_IMAGE must be set"
  fi
  if [[ -z "$LILYPAD_NODE_NAME" ]]; then
    echo >&2 "LILYPAD_NODE_NAME must be set"
  fi
  if [[ -z "$RPC_URL" ]]; then
    echo >&2 "RPC_URL must be set"
  fi
  if [[ "$TRIM" == "development" ]]; then
    local LILYPAD_NODE_FLAGS="$LILYPAD_NODE_FLAGS -v $DIR/src/python:/app --network modicum"
  elif [[ "$TRIM" == "production" ]]; then
    local LILYPAD_NODE_FLAGS="$LILYPAD_NODE_FLAGS --network modicum"
  elif [[ "$TRIM" == "production-client" ]]; then
    local LILYPAD_NODE_FLAGS="$LILYPAD_NODE_FLAGS"
  fi
  if [[ "$CONTAINER_MODE" == "server" ]]; then
    local LILYPAD_NODE_FLAGS="$LILYPAD_NODE_FLAGS -d --restart always"
  elif [[ "$CONTAINER_MODE" == "cli" ]]; then
    local LILYPAD_NODE_FLAGS="$LILYPAD_NODE_FLAGS -ti --rm"
  fi
  eval docker run $LILYPAD_NODE_FLAGS --name $LILYPAD_NODE_NAME \
    -v /tmp:/tmp \
    -v /var/run/docker.sock:/var/run/docker.sock \
    -e DEBUG \
    -e PRIVATE_KEY \
    -e CONTRACT_ADDRESS=$(contract-address) \
    -e CONTRACT_ABI_FILE=/Modicum.json \
    -e RPC_URL=$RPC_URL \
    $LILYPAD_NODE_IMAGE \
    ${1:-""} \
    $(for arg in ${GLOBAL_ARGS[@]:1}; do echo ${arg@Q}; done)
}

function logs() {
  trap "sleep 1; reset" EXIT
  service="$1"
  if [[ "$service" == "geth" ]]; then
    docker logs -f geth
  fi
  if [[ "$service" == "solver" ]]; then
    docker logs -f solver
  fi
  docker exec -ti $service supervisorctl tail -f bacalhau-serve stdout &
  docker exec -ti $service supervisorctl tail -f bacalhau-serve stderr &
  docker exec -ti $service supervisorctl tail -f ipfs stdout &
  docker exec -ti $service supervisorctl tail -f ipfs stderr &
  docker exec -ti $service supervisorctl tail -f $service stdout &
  docker exec -ti $service supervisorctl tail -f $service stderr
}

function resource-provider() {
  LILYPAD_NODE_IMAGE=$IMAGE_RESOURCE_PROVIDER \
  LILYPAD_NODE_NAME=resource-provider \
  CONTAINER_MODE=server \
  lilypad-node "$@"
}

function mediator() {
  LILYPAD_NODE_IMAGE=$IMAGE_MEDIATOR \
  LILYPAD_NODE_NAME=mediator \
  CONTAINER_MODE=server \
  lilypad-node "$@"
}

function solver() {
  LILYPAD_NODE_IMAGE=$IMAGE_MODICUM \
  LILYPAD_NODE_NAME=solver \
  CONTAINER_MODE=server \
  lilypad-node "runAsSolver"
}

function submitjob() {
  LILYPAD_NODE_IMAGE=$IMAGE_MODICUM \
  LILYPAD_NODE_NAME=submitjob \
  CONTAINER_MODE=cli \
  lilypad-node "runLilypadCLI"
}

function reset() {
  set -x
  docker rm -f $(docker ps -aq) ||true
  sudo rm -rf $DATA_DIRECTORY
  rm -rf src/js/deployments/localgeth
  (cd src/js
   npm install
   npx hardhat compile
  )
  node src/js/scripts/create-new-accounts.js > .env
  geth
  sleep 5
  geth-fund-admin
  # (set -euo pipefail
  #  source src/js/.env && \
  #  ./stack geth-fund $ADMIN_ADDRESS && \
  #  ./stack geth-balance $ADMIN_ADDRESS)
  (cd src/js && npx hardhat deploy --network localgeth)
}

function stop() {
  docker rm -f $(docker ps -aq)
}

function start() {
  build
  geth ||true
  echo "Waiting for geth to start"
  sleep 5
  solver
  sleep 5
  mediator
  resource-provider
  echo "Now run (in separate terminals):"
  echo "./stack logs geth"
  echo "./stack logs solver"
  echo "./stack logs mediator"
  echo "./stack logs resource-provider"
}

function clean() {
  sudo rm -rf "$DATA_DIRECTORY"
  rm -rf "$DIR/src/js/deployments/$DEPLOYMENT"
}

function stop-modicum() {
  docker rm -f solver || true
  docker rm -f mediator || true
  docker rm -f resource-provider || true
  docker rm -f submitjob || true
}

eval "$@"
